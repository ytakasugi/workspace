use std::thread;

fn main() {
    let data = "86967897737416471853297327050364959
                11861322575564723963297542624962850
                70856234701860851907960690014725639
                38397966707106094172783238747669219
                52380795257888236525459303330302837
                58495327135744041048897885734297812
                69920216438980873548808413720956532
                16278424637452589860345374828574668";
                
    let mut children = vec![];

    /*************************************************************************
     * "Map "フェーズ
     *
     * データをセグメント化して、初期処理を行う。
     ************************************************************************/
    // 個々の計算のためにデータをセグメントに分割する
    // 各チャンクは実際のデータへの参照(&str)となる
    let chunked_data = data.split_whitespace();

    // データセグメントを反復処理します。
    // .enumerate() は、現在のループのインデックスを、反復されるものに追加します。
    // 結果として得られるタプル "(index, element)" は、直ちに
    // "i" と "data_segment" の 2 つの変数に"デストラクション"されます。
    for (i, data_segment) in chunked_data.enumerate() {
        println!("data segment {} is \"{}\"", i, data_segment);

        // 各データセグメントを別のスレッドで処理
        //
        // spawn() は、新しいスレッドのハンドルを返します。
        // 返された値にアクセスするためには、このハンドルを保持しなければなりません。
        //
        // 'move || -> u32' は、以下のクロージャの構文です。
        // * 引数を取らない ('||')
        // * キャプチャした変数の所有権を取る ('move')。
        // * 符号なし32ビット整数を返す ('-> u32')
        //
        // Rustは賢いので、'-> u32'をクロージャ自体から推測します。
        children.push(thread::spawn(move || -> u32 {
            // このセグメントの中間和を計算する。
            let result = data_segment
                        // セグメントの文字を繰り返し処理する...
                        .chars()
                        // ... テキストの文字を数値に変換します。
                        .map(|c| c.to_digit(10).expect("should be a digit"))
                        // ... そして，結果として得られる数値のイテレータを合計する
                        .sum();
            
            // println! は標準出力をロックするので、テキストのインターリーブは発生しません。
            println!("processed segment {}, result={}", i, result);

            // Rustは「式言語」なので、各ブロックで最後に評価された式は
            // 各ブロックで最後に評価された式が自動的にその値になります。
            result
        }));
    }

    /*************************************************************************
     * "Reduc"フェーズ
     *
     * 中間結果を集めて、最終結果にまとめる
     ************************************************************************/
    // 各スレッドの中間結果を新しいVecに格納する
    let mut intermediate_sums = vec![];
    
    for child in children {
        // 各子スレッドの戻り値を集める
        let intermediate_sum = child.join().unwrap();
        intermediate_sums.push(intermediate_sum);
    }

    // すべての中間和を単一の最終和にまとめる。
    //
    // "turbofish" ::<> を使用して、sum() に型のヒントを与えます。
    let final_result = intermediate_sums.iter().sum::<u32>();
    println!("Final sum result: {}", final_result);
}
