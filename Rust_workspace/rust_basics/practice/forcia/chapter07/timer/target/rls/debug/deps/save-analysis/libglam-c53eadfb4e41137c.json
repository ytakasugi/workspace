{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7","program":"/home/ytakasugi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","glam","--edition=2018","/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=c53eadfb4e41137c","-C","extra-filename=-c53eadfb4e41137c","--out-dir","/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter07/timer/target/rls/debug/deps","-L","dependency=/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter07/timer/target/rls/debug/deps","--cap-lints","allow","--cfg","vec3sse2","--cfg","vec4sse2","--error-format=json","--sysroot","/home/ytakasugi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter07/timer/target/rls/debug/deps/libglam-c53eadfb4e41137c.rmeta"},"prelude":{"crate_id":{"name":"glam","disambiguator":[6130772190082049010,3525391728510148190]},"crate_root":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src","external_crates":[{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3329901521826220148,8779651902869174066]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/funcs.rs","num":2,"id":{"name":"core","disambiguator":[11533795067257537051,6600409280955634707]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12614123221401343543,9564301585503608515]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1785005413158388284,2453622026203223019]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12957079427417428001,17718260667887668647]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10214993728156300765,14618204673916620187]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12453517098623888364,4709794086161820998]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12634510118091288440,7983944581587655387]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14017342134866723280,9256858969587329629]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7061025862014072460,14171357653989770935]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2285728033677722481,16182084057206383065]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[7305883247437987566,266452839079745451]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13956229687295891598,15294992126055156716]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[931598532372339641,10024719927090962737]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[11150552510595322945,15608256962932530162]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4217706585212656622,592289864015908737]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[2229008352226773351,3496425060661471051]}}],"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":0,"byte_end":5011,"line_start":1,"line_end":167,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6067,"byte_end":6068,"line_start":18,"line_end":18,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Mat2, mat2","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6084,"byte_end":6085,"line_start":19,"line_end":19,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Mat3, mat3","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6101,"byte_end":6102,"line_start":20,"line_end":20,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Mat4, mat4","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6118,"byte_end":6119,"line_start":21,"line_end":21,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"quat, Quat","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6193,"byte_end":6194,"line_start":24,"line_end":24,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec2, vec2","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6215,"byte_end":6216,"line_start":25,"line_end":25,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Vec2Mask","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6232,"byte_end":6233,"line_start":26,"line_end":26,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec3, vec3","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6254,"byte_end":6255,"line_start":27,"line_end":27,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Vec3Mask","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6271,"byte_end":6272,"line_start":28,"line_end":28,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec4, Y_AXIS, X_AXIS, vec4, Z_AXIS","parent":{"krate":0,"index":7}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":6293,"byte_end":6294,"line_start":29,"line_end":29,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Vec4Mask","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4275,"byte_end":4279,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"alias_span":null,"name":"mat2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4281,"byte_end":4285,"line_start":135,"line_end":135,"column_start":11,"column_end":15},"alias_span":null,"name":"mat3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4287,"byte_end":4291,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"alias_span":null,"name":"mat4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4293,"byte_end":4297,"line_start":135,"line_end":135,"column_start":23,"column_end":27},"alias_span":null,"name":"quat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":388},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4299,"byte_end":4303,"line_start":135,"line_end":135,"column_start":29,"column_end":33},"alias_span":null,"name":"vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":564},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4305,"byte_end":4309,"line_start":135,"line_end":135,"column_start":35,"column_end":39},"alias_span":null,"name":"vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4311,"byte_end":4315,"line_start":135,"line_end":135,"column_start":41,"column_end":45},"alias_span":null,"name":"vec4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1009},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4317,"byte_end":4321,"line_start":135,"line_end":135,"column_start":47,"column_end":51},"alias_span":null,"name":"Mat2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1010},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4317,"byte_end":4321,"line_start":135,"line_end":135,"column_start":47,"column_end":51},"alias_span":null,"name":"Mat2","value":"","parent":{"krate":0,"index":980}},{"kind":"Use","ref_id":{"krate":0,"index":1027},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4323,"byte_end":4327,"line_start":135,"line_end":135,"column_start":53,"column_end":57},"alias_span":null,"name":"Mat3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1054},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4329,"byte_end":4333,"line_start":135,"line_end":135,"column_start":59,"column_end":63},"alias_span":null,"name":"Mat4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1086},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4335,"byte_end":4339,"line_start":135,"line_end":135,"column_start":65,"column_end":69},"alias_span":null,"name":"Quat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1087},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4335,"byte_end":4339,"line_start":135,"line_end":135,"column_start":65,"column_end":69},"alias_span":null,"name":"Quat","value":"","parent":{"krate":0,"index":983}},{"kind":"Use","ref_id":{"krate":0,"index":1092},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4341,"byte_end":4345,"line_start":135,"line_end":135,"column_start":71,"column_end":75},"alias_span":null,"name":"Vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1093},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4341,"byte_end":4345,"line_start":135,"line_end":135,"column_start":71,"column_end":75},"alias_span":null,"name":"Vec2","value":"","parent":{"krate":0,"index":984}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4347,"byte_end":4355,"line_start":135,"line_end":135,"column_start":77,"column_end":85},"alias_span":null,"name":"Vec2Mask","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1148},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4357,"byte_end":4361,"line_start":135,"line_end":135,"column_start":87,"column_end":91},"alias_span":null,"name":"Vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1149},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4357,"byte_end":4361,"line_start":135,"line_end":135,"column_start":87,"column_end":91},"alias_span":null,"name":"Vec3","value":"","parent":{"krate":0,"index":986}},{"kind":"Use","ref_id":{"krate":0,"index":1156},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4367,"byte_end":4375,"line_start":136,"line_end":136,"column_start":5,"column_end":13},"alias_span":null,"name":"Vec3Mask","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1157},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4367,"byte_end":4375,"line_start":136,"line_end":136,"column_start":5,"column_end":13},"alias_span":null,"name":"Vec3Mask","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1162},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4377,"byte_end":4381,"line_start":136,"line_end":136,"column_start":15,"column_end":19},"alias_span":null,"name":"Vec4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1163},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4377,"byte_end":4381,"line_start":136,"line_end":136,"column_start":15,"column_end":19},"alias_span":null,"name":"Vec4","value":"","parent":{"krate":0,"index":988}},{"kind":"Use","ref_id":{"krate":0,"index":1170},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4383,"byte_end":4391,"line_start":136,"line_end":136,"column_start":21,"column_end":29},"alias_span":null,"name":"Vec4Mask","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1171},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4383,"byte_end":4391,"line_start":136,"line_end":136,"column_start":21,"column_end":29},"alias_span":null,"name":"Vec4Mask","value":"","parent":{"krate":0,"index":989}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":0,"byte_end":5011,"line_start":1,"line_end":167,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":7},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":1342},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":1348},{"krate":0,"index":984},{"krate":0,"index":1350},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":1354},{"krate":0,"index":987},{"krate":0,"index":1356},{"krate":0,"index":988},{"krate":0,"index":1358},{"krate":0,"index":989},{"krate":0,"index":1360},{"krate":0,"index":990},{"krate":0,"index":994}],"decl_id":null,"docs":"# glam","sig":null,"attributes":[{"value":"*\n# glam\n\n`glam` is a simple and fast linear algebra library for games and graphics.\n\n## Features\n\n`glam` is built with SIMD in mind. Currently only SSE2 on x86/x86_64 is\nsupported as this is what stable Rust supports.\n\n* Single precision float (`f32`) support only\n* SSE2 implementation for most types, including `Mat2`, `Mat3`, `Mat4`, `Quat`,\n  `Vec3` and `Vec4`\n* Scalar fallback implementations exist when SSE2 is not available\n* Most functionality includes unit tests and benchmarks\n\n## Linear algebra conventions\n\n`glam` interprets vectors as column matrices (also known as \"column vectors\")\nmeaning when transforming a vector with a matrix the matrix goes on the left.\n\n```\nuse glam::{Mat3, Vec3};\nlet m = Mat3::identity();\nlet x = Vec3::unit_x();\nlet v = m * x;\nassert_eq!(v, x);\n```\n\nMatrices are stored in memory in column-major order.\n\nRotations follow left-hand rule. The direction of the axis gives the direction\nof rotation: with the left thumb pointing in the positive direction of the axis\nthe left fingers curl around the axis in the direction of the rotation.\n\n```\nuse glam::{Mat3, Vec3};\n// rotate +x 90 degrees clockwise around y giving -z\nlet m = Mat3::from_rotation_y(90.0_f32.to_radians());\nlet v = m * Vec3::unit_x();\nassert!(v.abs_diff_eq(-Vec3::unit_z(), core::f32::EPSILON));\n```\n\n## Size and alignment of types\n\nMost `glam` types use SIMD for storage meaning most types are 16 byte aligned.\nThe only exception is Vec2`. When SSE2 is not available on the target\narchitecture the types will still be 16 byte aligned, so object sizes and\nlayouts will not change between architectures.\n\n16 byte alignment means that some types will have a stride larger than their\nsize resulting in some wasted space.\n\n| Type | f32 bytes | SIMD bytes | Wasted bytes |\n|:-----|----------:|-----------:|-------------:|\n|`Vec3`|         12|          16|             4|\n|`Mat3`|         36|          48|            12|\n\nDespite this wasted space the SIMD version tends to outperform the `f32`\nimplementation in [**mathbench**](https://github.com/bitshifter/mathbench-rs)\nbenchmarks.\n\nSIMD support can be disabled entirely using the `scalar-math` feature. This\nfeature will also disable SIMD alignment meaning most types will use native\n`f32` alignment of 4 bytes.\n\nAll the main `glam` types are tagged with #[repr(C)], so they are possible\nto expose as struct members to C interfaces if desired. Be mindful of Vec3's\nextra float though.\n\n## Accessing internal data\n\nThe SIMD types that `glam` builds on are opaque and their contents are not\ndirectly accessible. Because of this `glam` types uses getter and setter\nmethods instead of providing direct access.\n\n```\nuse glam::Vec3;\nlet mut v = Vec3::new(1.0, 2.0, 3.0);\nassert_eq!(v.y(), 2.0);\nv.set_z(1.0);\nassert_eq!(v.z(), 1.0);\n```\n\nIf you need to access multiple elements it is easier to convert the type to a\ntuple or array:\n\n```\nuse glam::Vec3;\nlet v = Vec3::new(1.0, 2.0, 3.0);\nlet (x, y, z) = v.into();\nassert_eq!((x, y, z), (1.0, 2.0, 3.0));\n```\n\n## SIMD and scalar consistency\n\n`glam` types implement `serde` `Serialize` and `Deserialize` traits to ensure\nthat they will serialize and deserialize exactly the same whether or not\nSIMD support is being used.\n\nThe SIMD versions implement `core::fmt::Display` traits so they print the same as\nthe scalar version.\n\n```\nuse glam::Vec3;\nlet a = Vec3::new(1.0, 2.0, 3.0);\nassert_eq!(format!(\"{}\", a), \"[1, 2, 3]\");\n```\n\n## Feature gates\n\nAll `glam` dependencies are optional, however some are required for tests\nand benchmarks.\n\n* `std` - the default feature, has no dependencies.\n* `rand` - used to generate random values. Used in benchmarks.\n* `serde` - used for serialization and deserialization of types.\n* `mint` - used for interoperating with other linear algebra libraries.\n* `scalar-math` - disables SIMD support and uses native alignment for all\n  types.\n* `debug-glam-assert` - adds assertions in debug builds which check the validity\n  of parameters passed to `glam` to help catch runtime errors.\n* `glam-assert` - adds assertions to all builds which check the validity of\n  parameters passed to `glam` to help catch runtime errors.\n\n*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":0,"byte_end":4154,"line_start":1,"line_end":126,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f32","qualname":"::f32","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mod.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":24},{"krate":0,"index":99},{"krate":0,"index":175},{"krate":0,"index":280},{"krate":0,"index":380},{"krate":0,"index":495},{"krate":0,"index":533},{"krate":0,"index":685},{"krate":0,"index":739},{"krate":0,"index":894},{"krate":0,"index":948},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25553,"byte_end":25557,"line_start":12,"line_end":12,"column_start":8,"column_end":12},"name":"mat2","qualname":"::f32::mat2::mat2","value":"pub fn mat2(Vec2, Vec2) -> Mat2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25536,"byte_end":25545,"line_start":11,"line_end":11,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1009},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25741,"byte_end":25745,"line_start":19,"line_end":19,"column_start":12,"column_end":16},"name":"Mat2","qualname":"::f32::mat2::Mat2","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 2x2 column major matrix.\n","sig":null,"attributes":[{"value":"/ A 2x2 column major matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25635,"byte_end":25665,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25719,"byte_end":25729,"line_start":18,"line_end":18,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26119,"byte_end":26123,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"zero","qualname":"<Mat2>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix with all elements set to `0.0`.\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix with all elements set to `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26037,"byte_end":26093,"line_start":35,"line_end":35,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26098,"byte_end":26107,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26234,"byte_end":26242,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"identity","qualname":"<Mat2>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 identity matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 identity matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26174,"byte_end":26208,"line_start":41,"line_end":41,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26213,"byte_end":26222,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26386,"byte_end":26395,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"from_cols","qualname":"<Mat2>::from_cols","value":"pub fn from_cols(Vec2, Vec2) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix from four column vectors.\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix from four column vectors.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26310,"byte_end":26360,"line_start":47,"line_end":47,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26365,"byte_end":26374,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26718,"byte_end":26733,"line_start":57,"line_end":57,"column_start":12,"column_end":27},"name":"from_cols_array","qualname":"<Mat2>::from_cols_array","value":"pub fn from_cols_array(&[f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix from a `[f32; 4]` stored in column major order.  If\n your data is stored in row major you will need to `transpose` the\n returned matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix from a `[f32; 4]` stored in column major order.  If","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26517,"byte_end":26593,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ your data is stored in row major you will need to `transpose` the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26598,"byte_end":26667,"line_start":54,"line_end":54,"column_start":5,"column_end":74}},{"value":"/ returned matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26672,"byte_end":26692,"line_start":55,"line_end":55,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26697,"byte_end":26706,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26980,"byte_end":26993,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"to_cols_array","qualname":"<Mat2>::to_cols_array","value":"pub fn to_cols_array(&Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a `[f32; 4]` storing data in column major order.\n If you require data in row major order `transpose` the matrix first.\n","sig":null,"attributes":[{"value":"/ Creates a `[f32; 4]` storing data in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26817,"byte_end":26877,"line_start":61,"line_end":61,"column_start":5,"column_end":65}},{"value":"/ If you require data in row major order `transpose` the matrix first.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26882,"byte_end":26954,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26959,"byte_end":26968,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27253,"byte_end":27271,"line_start":72,"line_end":72,"column_start":12,"column_end":30},"name":"from_cols_array_2d","qualname":"<Mat2>::from_cols_array_2d","value":"pub fn from_cols_array_2d(&[[f32; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix from a `[[f32; 2]; 2]` stored in column major\n order.  If your data is in row major order you will need to `transpose`\n the returned matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix from a `[[f32; 2]; 2]` stored in column major","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27048,"byte_end":27118,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ order.  If your data is in row major order you will need to `transpose`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27123,"byte_end":27198,"line_start":69,"line_end":69,"column_start":5,"column_end":80}},{"value":"/ the returned matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27203,"byte_end":27227,"line_start":70,"line_end":70,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27232,"byte_end":27241,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27540,"byte_end":27556,"line_start":79,"line_end":79,"column_start":12,"column_end":28},"name":"to_cols_array_2d","qualname":"<Mat2>::to_cols_array_2d","value":"pub fn to_cols_array_2d(&Self) -> [[f32; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a `[[f32; 2]; 2]` storing data in column major order.\n If you require data in row major order `transpose` the matrix first.\n","sig":null,"attributes":[{"value":"/ Creates a `[[f32; 2]; 2]` storing data in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27372,"byte_end":27437,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/ If you require data in row major order `transpose` the matrix first.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27442,"byte_end":27514,"line_start":77,"line_end":77,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27519,"byte_end":27528,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27794,"byte_end":27810,"line_start":87,"line_end":87,"column_start":12,"column_end":28},"name":"from_scale_angle","qualname":"<Mat2>::from_scale_angle","value":"pub fn from_scale_angle(Vec2, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix containing the given `scale` and rotation of\n `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix containing the given `scale` and rotation of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27669,"byte_end":27738,"line_start":84,"line_end":84,"column_start":5,"column_end":74}},{"value":"/ `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27743,"byte_end":27768,"line_start":85,"line_end":85,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":27773,"byte_end":27782,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28193,"byte_end":28203,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"from_angle","qualname":"<Mat2>::from_angle","value":"pub fn from_angle(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix containing a rotation of `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix containing a rotation of `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28096,"byte_end":28167,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28172,"byte_end":28181,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28422,"byte_end":28432,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Mat2>::from_scale","value":"pub fn from_scale(Vec2) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2x2 matrix containing the given non-uniform `scale`.\n","sig":null,"attributes":[{"value":"/ Creates a 2x2 matrix containing the given non-uniform `scale`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28330,"byte_end":28396,"line_start":105,"line_end":105,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28401,"byte_end":28410,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28563,"byte_end":28573,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"set_x_axis","qualname":"<Mat2>::set_x_axis","value":"pub fn set_x_axis(&mut Self, Vec2)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28542,"byte_end":28551,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28705,"byte_end":28715,"line_start":120,"line_end":120,"column_start":12,"column_end":22},"name":"set_y_axis","qualname":"<Mat2>::set_y_axis","value":"pub fn set_y_axis(&mut Self, Vec2)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28684,"byte_end":28693,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28847,"byte_end":28853,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"x_axis","qualname":"<Mat2>::x_axis","value":"pub fn x_axis(&Self) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28826,"byte_end":28835,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28969,"byte_end":28975,"line_start":133,"line_end":133,"column_start":12,"column_end":18},"name":"y_axis","qualname":"<Mat2>::y_axis","value":"pub fn y_axis(&Self) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":28948,"byte_end":28957,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":29920,"byte_end":29929,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Mat2>::transpose","value":"pub fn transpose(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the transpose of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the transpose of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":29858,"byte_end":29894,"line_start":162,"line_end":162,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":29899,"byte_end":29908,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30355,"byte_end":30366,"line_start":181,"line_end":181,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Mat2>::determinant","value":"pub fn determinant(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the determinant of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the determinant of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30291,"byte_end":30329,"line_start":179,"line_end":179,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30334,"byte_end":30343,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30973,"byte_end":30980,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Mat2>::inverse","value":"pub fn inverse(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the inverse of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30828,"byte_end":30862,"line_start":198,"line_end":198,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30867,"byte_end":30870,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ If the matrix is not invertible the returned matrix will be invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30875,"byte_end":30947,"line_start":200,"line_end":200,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":30952,"byte_end":30961,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":31838,"byte_end":31846,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"mul_vec2","qualname":"<Mat2>::mul_vec2","value":"pub fn mul_vec2(&Self, Vec2) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":31817,"byte_end":31826,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32119,"byte_end":32127,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"mul_mat2","qualname":"<Mat2>::mul_mat2","value":"pub fn mul_mat2(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32098,"byte_end":32107,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32387,"byte_end":32395,"line_start":245,"line_end":245,"column_start":12,"column_end":20},"name":"add_mat2","qualname":"<Mat2>::add_mat2","value":"pub fn add_mat2(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32366,"byte_end":32375,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32490,"byte_end":32498,"line_start":250,"line_end":250,"column_start":12,"column_end":20},"name":"sub_mat2","qualname":"<Mat2>::sub_mat2","value":"pub fn sub_mat2(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32469,"byte_end":32478,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32593,"byte_end":32603,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"mul_scalar","qualname":"<Mat2>::mul_scalar","value":"pub fn mul_scalar(&Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32572,"byte_end":32581,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33266,"byte_end":33277,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Mat2>::abs_diff_eq","value":"pub fn abs_diff_eq(&Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32705,"byte_end":32779,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32784,"byte_end":32840,"line_start":261,"line_end":261,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32845,"byte_end":32848,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Mat2`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32853,"byte_end":32929,"line_start":263,"line_end":263,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":32934,"byte_end":33007,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33012,"byte_end":33081,"line_start":265,"line_end":265,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33086,"byte_end":33089,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33094,"byte_end":33140,"line_start":267,"line_end":267,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33145,"byte_end":33240,"line_start":268,"line_end":268,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33245,"byte_end":33254,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":34671,"byte_end":34675,"line_start":8,"line_end":8,"column_start":8,"column_end":12},"name":"mat3","qualname":"::f32::mat3::mat3","value":"pub fn mat3(Vec3, Vec3, Vec3) -> Mat3","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":34654,"byte_end":34663,"line_start":7,"line_end":7,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1027},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35561,"byte_end":35565,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"Mat3","qualname":"::f32::mat3::Mat3","value":"Mat3 {  }","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030}],"decl_id":null,"docs":" A 3x3 column major matrix.","sig":null,"attributes":[{"value":"/ A 3x3 column major matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35417,"byte_end":35447,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35448,"byte_end":35451,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This type is 16 byte aligned.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35452,"byte_end":35485,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35539,"byte_end":35549,"line_start":43,"line_end":43,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36025,"byte_end":36029,"line_start":66,"line_end":66,"column_start":12,"column_end":16},"name":"zero","qualname":"<Mat3>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 matrix with all elements set to `0.0`.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 matrix with all elements set to `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35943,"byte_end":35999,"line_start":64,"line_end":64,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36004,"byte_end":36013,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36240,"byte_end":36248,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"identity","qualname":"<Mat3>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 identity matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 identity matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36180,"byte_end":36214,"line_start":74,"line_end":74,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36219,"byte_end":36228,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36482,"byte_end":36491,"line_start":86,"line_end":86,"column_start":12,"column_end":21},"name":"from_cols","qualname":"<Mat3>::from_cols","value":"pub fn from_cols(Vec3, Vec3, Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 matrix from three column vectors.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 matrix from three column vectors.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36405,"byte_end":36456,"line_start":84,"line_end":84,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36461,"byte_end":36470,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36840,"byte_end":36855,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"from_cols_array","qualname":"<Mat3>::from_cols_array","value":"pub fn from_cols_array(&[f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 matrix from a `[f32; 9]` stored in column major order.\n If your data is stored in row major you will need to `transpose` the\n returned matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 matrix from a `[f32; 9]` stored in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36640,"byte_end":36712,"line_start":94,"line_end":94,"column_start":5,"column_end":77}},{"value":"/ If your data is stored in row major you will need to `transpose` the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36717,"byte_end":36789,"line_start":95,"line_end":95,"column_start":5,"column_end":77}},{"value":"/ returned matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36794,"byte_end":36814,"line_start":96,"line_end":96,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":36819,"byte_end":36828,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37226,"byte_end":37239,"line_start":109,"line_end":109,"column_start":12,"column_end":25},"name":"to_cols_array","qualname":"<Mat3>::to_cols_array","value":"pub fn to_cols_array(&Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a `[f32; 9]` storing data in column major order.\n If you require data in row major order `transpose` the matrix first.\n","sig":null,"attributes":[{"value":"/ Creates a `[f32; 9]` storing data in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37063,"byte_end":37123,"line_start":106,"line_end":106,"column_start":5,"column_end":65}},{"value":"/ If you require data in row major order `transpose` the matrix first.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37128,"byte_end":37200,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37205,"byte_end":37214,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37680,"byte_end":37698,"line_start":120,"line_end":120,"column_start":12,"column_end":30},"name":"from_cols_array_2d","qualname":"<Mat3>::from_cols_array_2d","value":"pub fn from_cols_array_2d(&[[f32; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 matrix from a `[[f32; 3]; 3]` stored in column major order.\n If your data is in row major order you will need to `transpose` the\n returned matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 matrix from a `[[f32; 3]; 3]` stored in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37476,"byte_end":37553,"line_start":116,"line_end":116,"column_start":5,"column_end":82}},{"value":"/ If your data is in row major order you will need to `transpose` the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37558,"byte_end":37629,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"/ returned matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37634,"byte_end":37654,"line_start":118,"line_end":118,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37659,"byte_end":37668,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38031,"byte_end":38047,"line_start":131,"line_end":131,"column_start":12,"column_end":28},"name":"to_cols_array_2d","qualname":"<Mat3>::to_cols_array_2d","value":"pub fn to_cols_array_2d(&Self) -> [[f32; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a `[[f32; 3]; 3]` storing data in column major order.\n If you require data in row major order `transpose` the matrix first.\n","sig":null,"attributes":[{"value":"/ Creates a `[[f32; 3]; 3]` storing data in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37863,"byte_end":37928,"line_start":128,"line_end":128,"column_start":5,"column_end":70}},{"value":"/ If you require data in row major order `transpose` the matrix first.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":37933,"byte_end":38005,"line_start":129,"line_end":129,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38010,"byte_end":38019,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38397,"byte_end":38425,"line_start":140,"line_end":140,"column_start":12,"column_end":40},"name":"from_scale_angle_translation","qualname":"<Mat3>::from_scale_angle_translation","value":"pub fn from_scale_angle_translation(Vec2, f32, Vec2) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 homogeneous transformation matrix from the given `scale`,\n rotation `angle` (in radians) and `translation`.","sig":null,"attributes":[{"value":"/ Creates a 3x3 homogeneous transformation matrix from the given `scale`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38154,"byte_end":38229,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/ rotation `angle` (in radians) and `translation`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38234,"byte_end":38286,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38291,"byte_end":38294,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ The resulting matrix can be used to transform 2D points and vectors.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38299,"byte_end":38371,"line_start":138,"line_end":138,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38376,"byte_end":38385,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38875,"byte_end":38884,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"from_quat","qualname":"<Mat3>::from_quat","value":"pub fn from_quat(Quat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 rotation matrix from the given quaternion.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38789,"byte_end":38798,"line_start":150,"line_end":150,"column_start":5,"column_end":14}},{"value":"/ Creates a 3x3 rotation matrix from the given quaternion.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":38803,"byte_end":38863,"line_start":151,"line_end":151,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39197,"byte_end":39212,"line_start":164,"line_end":164,"column_start":12,"column_end":27},"name":"from_axis_angle","qualname":"<Mat3>::from_axis_angle","value":"pub fn from_axis_angle(Vec3, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 rotation matrix from a normalized rotation `axis` and\n `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 rotation matrix from a normalized rotation `axis` and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39070,"byte_end":39141,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/ `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39146,"byte_end":39171,"line_start":162,"line_end":162,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39176,"byte_end":39185,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39969,"byte_end":39986,"line_start":183,"line_end":183,"column_start":12,"column_end":29},"name":"from_rotation_ypr","qualname":"<Mat3>::from_rotation_ypr","value":"pub fn from_rotation_ypr(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 rotation matrix from the given Euler angles (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 rotation matrix from the given Euler angles (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39868,"byte_end":39943,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":39948,"byte_end":39957,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40237,"byte_end":40252,"line_start":190,"line_end":190,"column_start":12,"column_end":27},"name":"from_rotation_x","qualname":"<Mat3>::from_rotation_x","value":"pub fn from_rotation_x(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 rotation matrix from `angle` (in radians) around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 rotation matrix from `angle` (in radians) around the x axis.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40133,"byte_end":40211,"line_start":188,"line_end":188,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40216,"byte_end":40225,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40598,"byte_end":40613,"line_start":201,"line_end":201,"column_start":12,"column_end":27},"name":"from_rotation_y","qualname":"<Mat3>::from_rotation_y","value":"pub fn from_rotation_y(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 rotation matrix from `angle` (in radians) around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 rotation matrix from `angle` (in radians) around the y axis.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40494,"byte_end":40572,"line_start":199,"line_end":199,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40577,"byte_end":40586,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40959,"byte_end":40974,"line_start":212,"line_end":212,"column_start":12,"column_end":27},"name":"from_rotation_z","qualname":"<Mat3>::from_rotation_z","value":"pub fn from_rotation_z(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 rotation matrix from `angle` (in radians) around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 rotation matrix from `angle` (in radians) around the z axis.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40855,"byte_end":40933,"line_start":210,"line_end":210,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":40938,"byte_end":40947,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41285,"byte_end":41295,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Mat3>::from_scale","value":"pub fn from_scale(Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3x3 non-uniform scale matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 3x3 non-uniform scale matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41216,"byte_end":41259,"line_start":221,"line_end":221,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41264,"byte_end":41273,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41725,"byte_end":41735,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"set_x_axis","qualname":"<Mat3>::set_x_axis","value":"pub fn set_x_axis(&mut Self, Vec3)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41704,"byte_end":41713,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41815,"byte_end":41825,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"set_y_axis","qualname":"<Mat3>::set_y_axis","value":"pub fn set_y_axis(&mut Self, Vec3)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41794,"byte_end":41803,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41905,"byte_end":41915,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"set_z_axis","qualname":"<Mat3>::set_z_axis","value":"pub fn set_z_axis(&mut Self, Vec3)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41884,"byte_end":41893,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41995,"byte_end":42001,"line_start":251,"line_end":251,"column_start":12,"column_end":18},"name":"x_axis","qualname":"<Mat3>::x_axis","value":"pub fn x_axis(&Self) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":41974,"byte_end":41983,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":42071,"byte_end":42077,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"y_axis","qualname":"<Mat3>::y_axis","value":"pub fn y_axis(&Self) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":42050,"byte_end":42059,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":42147,"byte_end":42153,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"z_axis","qualname":"<Mat3>::z_axis","value":"pub fn z_axis(&Self) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":42126,"byte_end":42135,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":43026,"byte_end":43035,"line_start":293,"line_end":293,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Mat3>::transpose","value":"pub fn transpose(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the transpose of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the transpose of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":42964,"byte_end":43000,"line_start":291,"line_end":291,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":43005,"byte_end":43014,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44235,"byte_end":44246,"line_start":327,"line_end":327,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Mat3>::determinant","value":"pub fn determinant(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the determinant of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the determinant of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44171,"byte_end":44209,"line_start":325,"line_end":325,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44214,"byte_end":44223,"line_start":326,"line_end":326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44461,"byte_end":44468,"line_start":334,"line_end":334,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Mat3>::inverse","value":"pub fn inverse(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the inverse of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44330,"byte_end":44364,"line_start":331,"line_end":331,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44369,"byte_end":44372,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ If the matrix is not invertible the returned matrix will be invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44377,"byte_end":44449,"line_start":333,"line_end":333,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45000,"byte_end":45008,"line_start":347,"line_end":347,"column_start":12,"column_end":20},"name":"mul_vec3","qualname":"<Mat3>::mul_vec3","value":"pub fn mul_vec3(&Self, Vec3) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Transforms a 3D vector.\n","sig":null,"attributes":[{"value":"/ Transforms a 3D vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44947,"byte_end":44974,"line_start":345,"line_end":345,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":44979,"byte_end":44988,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45281,"byte_end":45289,"line_start":356,"line_end":356,"column_start":12,"column_end":20},"name":"mul_mat3","qualname":"<Mat3>::mul_mat3","value":"pub fn mul_mat3(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies two 3x3 matrices.\n","sig":null,"attributes":[{"value":"/ Multiplies two 3x3 matrices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45223,"byte_end":45255,"line_start":354,"line_end":354,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45260,"byte_end":45269,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45556,"byte_end":45564,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"add_mat3","qualname":"<Mat3>::add_mat3","value":"pub fn add_mat3(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds two 3x3 matrices.\n","sig":null,"attributes":[{"value":"/ Adds two 3x3 matrices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45504,"byte_end":45530,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45535,"byte_end":45544,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45833,"byte_end":45841,"line_start":376,"line_end":376,"column_start":12,"column_end":20},"name":"sub_mat3","qualname":"<Mat3>::sub_mat3","value":"pub fn sub_mat3(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Subtracts two 3x3 matrices.\n","sig":null,"attributes":[{"value":"/ Subtracts two 3x3 matrices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45776,"byte_end":45807,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":45812,"byte_end":45821,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46119,"byte_end":46129,"line_start":386,"line_end":386,"column_start":12,"column_end":22},"name":"mul_scalar","qualname":"<Mat3>::mul_scalar","value":"pub fn mul_scalar(&Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies a 3x3 matrix by a scalar.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46053,"byte_end":46062,"line_start":384,"line_end":384,"column_start":5,"column_end":14}},{"value":"/ Multiplies a 3x3 matrix by a scalar.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46067,"byte_end":46107,"line_start":385,"line_end":385,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46509,"byte_end":46525,"line_start":399,"line_end":399,"column_start":12,"column_end":28},"name":"transform_point2","qualname":"<Mat3>::transform_point2","value":"pub fn transform_point2(&Self, Vec2) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Transforms the given `Vec2` as 2D point.\n This is the equivalent of multiplying the `Vec2` as a `Vec3` where `w`\n is `1.0`.\n","sig":null,"attributes":[{"value":"/ Transforms the given `Vec2` as 2D point.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46342,"byte_end":46386,"line_start":395,"line_end":395,"column_start":5,"column_end":49}},{"value":"/ This is the equivalent of multiplying the `Vec2` as a `Vec3` where `w`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46391,"byte_end":46465,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/ is `1.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46470,"byte_end":46483,"line_start":397,"line_end":397,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46488,"byte_end":46497,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46979,"byte_end":46996,"line_start":411,"line_end":411,"column_start":12,"column_end":29},"name":"transform_vector2","qualname":"<Mat3>::transform_vector2","value":"pub fn transform_vector2(&Self, Vec2) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Transforms the given `Vec2` as 2D vector.\n This is the equivalent of multiplying the `Vec2` as a `Vec3` where `w`\n is `0.0`.\n","sig":null,"attributes":[{"value":"/ Transforms the given `Vec2` as 2D vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46811,"byte_end":46856,"line_start":407,"line_end":407,"column_start":5,"column_end":50}},{"value":"/ This is the equivalent of multiplying the `Vec2` as a `Vec3` where `w`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46861,"byte_end":46935,"line_start":408,"line_end":408,"column_start":5,"column_end":79}},{"value":"/ is `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46940,"byte_end":46953,"line_start":409,"line_end":409,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":46958,"byte_end":46967,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47846,"byte_end":47857,"line_start":429,"line_end":429,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Mat3>::abs_diff_eq","value":"pub fn abs_diff_eq(&Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47285,"byte_end":47359,"line_start":419,"line_end":419,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47364,"byte_end":47420,"line_start":420,"line_end":420,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47425,"byte_end":47428,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Mat3`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47433,"byte_end":47509,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47514,"byte_end":47587,"line_start":423,"line_end":423,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47592,"byte_end":47661,"line_start":424,"line_end":424,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47666,"byte_end":47669,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47674,"byte_end":47720,"line_start":426,"line_end":426,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47725,"byte_end":47820,"line_start":427,"line_end":427,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":47825,"byte_end":47834,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":49227,"byte_end":49231,"line_start":12,"line_end":12,"column_start":8,"column_end":12},"name":"mat4","qualname":"::f32::mat4::mat4","value":"pub fn mat4(Vec4, Vec4, Vec4, Vec4) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":49210,"byte_end":49219,"line_start":11,"line_end":11,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1054},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50162,"byte_end":50166,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"Mat4","qualname":"::f32::mat4::Mat4","value":"Mat4 {  }","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058}],"decl_id":null,"docs":" A 4x4 column major matrix.","sig":null,"attributes":[{"value":"/ A 4x4 column major matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50018,"byte_end":50048,"line_start":44,"line_end":44,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50049,"byte_end":50052,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This type is 16 byte aligned.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50053,"byte_end":50086,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50140,"byte_end":50150,"line_start":48,"line_end":48,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50718,"byte_end":50722,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"zero","qualname":"<Mat4>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 matrix with all elements set to `0.0`.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 matrix with all elements set to `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50636,"byte_end":50692,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50697,"byte_end":50706,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50967,"byte_end":50975,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"identity","qualname":"<Mat4>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 identity matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 identity matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50907,"byte_end":50941,"line_start":85,"line_end":85,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50946,"byte_end":50955,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51244,"byte_end":51253,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"from_cols","qualname":"<Mat4>::from_cols","value":"pub fn from_cols(Vec4, Vec4, Vec4, Vec4) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 matrix from four column vectors.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 matrix from four column vectors.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51168,"byte_end":51218,"line_start":96,"line_end":96,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51223,"byte_end":51232,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51637,"byte_end":51652,"line_start":111,"line_end":111,"column_start":12,"column_end":27},"name":"from_cols_array","qualname":"<Mat4>::from_cols_array","value":"pub fn from_cols_array(&[f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 matrix from a `[f32; 16]` stored in column major order.\n If your data is stored in row major you will need to `transpose` the\n returned matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 matrix from a `[f32; 16]` stored in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51436,"byte_end":51509,"line_start":107,"line_end":107,"column_start":5,"column_end":78}},{"value":"/ If your data is stored in row major you will need to `transpose` the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51514,"byte_end":51586,"line_start":108,"line_end":108,"column_start":5,"column_end":77}},{"value":"/ returned matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51591,"byte_end":51611,"line_start":109,"line_end":109,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51616,"byte_end":51625,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52104,"byte_end":52117,"line_start":123,"line_end":123,"column_start":12,"column_end":25},"name":"to_cols_array","qualname":"<Mat4>::to_cols_array","value":"pub fn to_cols_array(&Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a `[f32; 16]` storing data in column major order.\n If you require data in row major order `transpose` the matrix first.\n","sig":null,"attributes":[{"value":"/ Creates a `[f32; 16]` storing data in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":51940,"byte_end":52001,"line_start":120,"line_end":120,"column_start":5,"column_end":66}},{"value":"/ If you require data in row major order `transpose` the matrix first.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52006,"byte_end":52078,"line_start":121,"line_end":121,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52083,"byte_end":52092,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52379,"byte_end":52397,"line_start":131,"line_end":131,"column_start":12,"column_end":30},"name":"from_cols_array_2d","qualname":"<Mat4>::from_cols_array_2d","value":"pub fn from_cols_array_2d(&[[f32; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 matrix from a `[[f32; 4]; 4]` stored in column major\n order.  If your data is in row major order you will need to `transpose`\n the returned matrix.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 matrix from a `[[f32; 4]; 4]` stored in column major","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52174,"byte_end":52244,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"/ order.  If your data is in row major order you will need to `transpose`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52249,"byte_end":52324,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ the returned matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52329,"byte_end":52353,"line_start":129,"line_end":129,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52358,"byte_end":52367,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52763,"byte_end":52779,"line_start":143,"line_end":143,"column_start":12,"column_end":28},"name":"to_cols_array_2d","qualname":"<Mat4>::to_cols_array_2d","value":"pub fn to_cols_array_2d(&Self) -> [[f32; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Creates a `[[f32; 4]; 4]` storing data in column major order.\n If you require data in row major order `transpose` the matrix first.\n","sig":null,"attributes":[{"value":"/ Creates a `[[f32; 4]; 4]` storing data in column major order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52595,"byte_end":52660,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/ If you require data in row major order `transpose` the matrix first.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52665,"byte_end":52737,"line_start":141,"line_end":141,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52742,"byte_end":52751,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53104,"byte_end":53135,"line_start":155,"line_end":155,"column_start":12,"column_end":43},"name":"from_scale_rotation_translation","qualname":"<Mat4>::from_scale_rotation_translation","value":"pub fn from_scale_rotation_translation(Vec3, Quat, Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix from the given `scale`,\n `rotation` and `translation`.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix from the given `scale`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":52965,"byte_end":53040,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/ `rotation` and `translation`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53045,"byte_end":53078,"line_start":153,"line_end":153,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53083,"byte_end":53092,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53663,"byte_end":53688,"line_start":169,"line_end":169,"column_start":12,"column_end":37},"name":"from_rotation_translation","qualname":"<Mat4>::from_rotation_translation","value":"pub fn from_rotation_translation(Quat, Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix from the given `translation`.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix from the given `translation`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53556,"byte_end":53637,"line_start":167,"line_end":167,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53642,"byte_end":53651,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":54182,"byte_end":54211,"line_start":182,"line_end":182,"column_start":12,"column_end":41},"name":"to_scale_rotation_translation","qualname":"<Mat4>::to_scale_rotation_translation","value":"pub fn to_scale_rotation_translation(&Self) -> (Vec3, Quat, Vec3)","parent":null,"children":[],"decl_id":null,"docs":" Extracts `scale`, `rotation` and `translation` from `self`. The input matrix is expected to\n be a 4x4 homogeneous transformation matrix otherwise the output will be invalid.\n","sig":null,"attributes":[{"value":"/ Extracts `scale`, `rotation` and `translation` from `self`. The input matrix is expected to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":53986,"byte_end":54081,"line_start":180,"line_end":180,"column_start":5,"column_end":100}},{"value":"/ be a 4x4 homogeneous transformation matrix otherwise the output will be invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":54086,"byte_end":54170,"line_start":181,"line_end":181,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55034,"byte_end":55043,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"from_quat","qualname":"<Mat4>::from_quat","value":"pub fn from_quat(Quat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix from the given `rotation`.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix from the given `rotation`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":54930,"byte_end":55008,"line_start":206,"line_end":206,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55013,"byte_end":55022,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55420,"byte_end":55436,"line_start":221,"line_end":221,"column_start":12,"column_end":28},"name":"from_translation","qualname":"<Mat4>::from_translation","value":"pub fn from_translation(Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix from the given `translation`.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix from the given `translation`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55313,"byte_end":55394,"line_start":219,"line_end":219,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55399,"byte_end":55408,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55823,"byte_end":55838,"line_start":233,"line_end":233,"column_start":12,"column_end":27},"name":"from_axis_angle","qualname":"<Mat4>::from_axis_angle","value":"pub fn from_axis_angle(Vec3, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix containing a rotation\n around a normalized rotation `axis` of `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix containing a rotation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55655,"byte_end":55728,"line_start":230,"line_end":230,"column_start":5,"column_end":78}},{"value":"/ around a normalized rotation `axis` of `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55733,"byte_end":55797,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":55802,"byte_end":55811,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56696,"byte_end":56713,"line_start":254,"line_end":254,"column_start":12,"column_end":29},"name":"from_rotation_ypr","qualname":"<Mat4>::from_rotation_ypr","value":"pub fn from_rotation_ypr(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix containing a rotation\n around the given Euler angles (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix containing a rotation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56545,"byte_end":56618,"line_start":251,"line_end":251,"column_start":5,"column_end":78}},{"value":"/ around the given Euler angles (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56623,"byte_end":56670,"line_start":252,"line_end":252,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56675,"byte_end":56684,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57010,"byte_end":57025,"line_start":262,"line_end":262,"column_start":12,"column_end":27},"name":"from_rotation_x","qualname":"<Mat4>::from_rotation_x","value":"pub fn from_rotation_x(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix containing a rotation\n around the x axis of `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix containing a rotation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56860,"byte_end":56933,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ around the x axis of `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56938,"byte_end":56984,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":56989,"byte_end":56998,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57463,"byte_end":57478,"line_start":275,"line_end":275,"column_start":12,"column_end":27},"name":"from_rotation_y","qualname":"<Mat4>::from_rotation_y","value":"pub fn from_rotation_y(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix containing a rotation\n around the y axis of `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix containing a rotation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57313,"byte_end":57386,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ around the y axis of `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57391,"byte_end":57437,"line_start":273,"line_end":273,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57442,"byte_end":57451,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57916,"byte_end":57931,"line_start":288,"line_end":288,"column_start":12,"column_end":27},"name":"from_rotation_z","qualname":"<Mat4>::from_rotation_z","value":"pub fn from_rotation_z(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix containing a rotation\n around the z axis of `angle` (in radians).\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix containing a rotation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57766,"byte_end":57839,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/ around the z axis of `angle` (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57844,"byte_end":57890,"line_start":286,"line_end":286,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":57895,"byte_end":57904,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58346,"byte_end":58356,"line_start":301,"line_end":301,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Mat4>::from_scale","value":"pub fn from_scale(Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 4x4 homogeneous transformation matrix containing the given\n non-uniform `scale`.\n","sig":null,"attributes":[{"value":"/ Creates a 4x4 homogeneous transformation matrix containing the given","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58219,"byte_end":58291,"line_start":298,"line_end":298,"column_start":5,"column_end":77}},{"value":"/ non-uniform `scale`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58296,"byte_end":58320,"line_start":299,"line_end":299,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58325,"byte_end":58334,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58774,"byte_end":58784,"line_start":314,"line_end":314,"column_start":12,"column_end":22},"name":"set_x_axis","qualname":"<Mat4>::set_x_axis","value":"pub fn set_x_axis(&mut Self, Vec4)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58753,"byte_end":58762,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58864,"byte_end":58874,"line_start":319,"line_end":319,"column_start":12,"column_end":22},"name":"set_y_axis","qualname":"<Mat4>::set_y_axis","value":"pub fn set_y_axis(&mut Self, Vec4)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58843,"byte_end":58852,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58954,"byte_end":58964,"line_start":324,"line_end":324,"column_start":12,"column_end":22},"name":"set_z_axis","qualname":"<Mat4>::set_z_axis","value":"pub fn set_z_axis(&mut Self, Vec4)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":58933,"byte_end":58942,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59044,"byte_end":59054,"line_start":329,"line_end":329,"column_start":12,"column_end":22},"name":"set_w_axis","qualname":"<Mat4>::set_w_axis","value":"pub fn set_w_axis(&mut Self, Vec4)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59023,"byte_end":59032,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59134,"byte_end":59140,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"x_axis","qualname":"<Mat4>::x_axis","value":"pub fn x_axis(&Self) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59113,"byte_end":59122,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59210,"byte_end":59216,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"y_axis","qualname":"<Mat4>::y_axis","value":"pub fn y_axis(&Self) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59189,"byte_end":59198,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59286,"byte_end":59292,"line_start":344,"line_end":344,"column_start":12,"column_end":18},"name":"z_axis","qualname":"<Mat4>::z_axis","value":"pub fn z_axis(&Self) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59265,"byte_end":59274,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59362,"byte_end":59368,"line_start":349,"line_end":349,"column_start":12,"column_end":18},"name":"w_axis","qualname":"<Mat4>::w_axis","value":"pub fn w_axis(&Self) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":59341,"byte_end":59350,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":60312,"byte_end":60321,"line_start":383,"line_end":383,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Mat4>::transpose","value":"pub fn transpose(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the transpose of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the transpose of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":60250,"byte_end":60286,"line_start":381,"line_end":381,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":60291,"byte_end":60300,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":61754,"byte_end":61765,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Mat4>::determinant","value":"pub fn determinant(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the determinant of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the determinant of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":61690,"byte_end":61728,"line_start":416,"line_end":416,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":61733,"byte_end":61742,"line_start":417,"line_end":417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":62646,"byte_end":62653,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Mat4>::inverse","value":"pub fn inverse(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the inverse of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":62515,"byte_end":62549,"line_start":437,"line_end":437,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":62554,"byte_end":62557,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ If the matrix is not invertible the returned matrix will be invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":62562,"byte_end":62634,"line_start":439,"line_end":439,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":65750,"byte_end":65760,"line_start":531,"line_end":531,"column_start":12,"column_end":22},"name":"look_at_lh","qualname":"<Mat4>::look_at_lh","value":"pub fn look_at_lh(Vec3, Vec3, Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":65729,"byte_end":65738,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":65928,"byte_end":65938,"line_start":537,"line_end":537,"column_start":12,"column_end":22},"name":"look_at_rh","qualname":"<Mat4>::look_at_rh","value":"pub fn look_at_rh(Vec3, Vec3, Vec3) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":65907,"byte_end":65916,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":66336,"byte_end":66353,"line_start":545,"line_end":545,"column_start":12,"column_end":29},"name":"perspective_rh_gl","qualname":"<Mat4>::perspective_rh_gl","value":"pub fn perspective_rh_gl(f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a right-handed perspective projection matrix with [-1,1] depth range.\n This is the same as the OpenGL `gluPerspective` function.\n See https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml\n","sig":null,"attributes":[{"value":"/ Creates a right-handed perspective projection matrix with [-1,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":66085,"byte_end":66166,"line_start":542,"line_end":542,"column_start":5,"column_end":86}},{"value":"/ This is the same as the OpenGL `gluPerspective` function.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":66171,"byte_end":66232,"line_start":543,"line_end":543,"column_start":5,"column_end":66}},{"value":"/ See https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":66237,"byte_end":66324,"line_start":544,"line_end":544,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":67003,"byte_end":67017,"line_start":565,"line_end":565,"column_start":12,"column_end":26},"name":"perspective_lh","qualname":"<Mat4>::perspective_lh","value":"pub fn perspective_lh(f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a left-handed perspective projection matrix with [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates a left-handed perspective projection matrix with [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":66912,"byte_end":66991,"line_start":564,"line_end":564,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":67645,"byte_end":67668,"line_start":580,"line_end":580,"column_start":12,"column_end":35},"name":"perspective_infinite_lh","qualname":"<Mat4>::perspective_infinite_lh","value":"pub fn perspective_infinite_lh(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an infinite left-handed perspective projection matrix with [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates an infinite left-handed perspective projection matrix with [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":67544,"byte_end":67633,"line_start":579,"line_end":579,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":68225,"byte_end":68256,"line_start":594,"line_end":594,"column_start":12,"column_end":43},"name":"perspective_infinite_reverse_lh","qualname":"<Mat4>::perspective_infinite_reverse_lh","value":"pub fn perspective_infinite_reverse_lh(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an infinite left-handed perspective projection matrix with [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates an infinite left-handed perspective projection matrix with [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":68124,"byte_end":68213,"line_start":593,"line_end":593,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":68853,"byte_end":68871,"line_start":613,"line_end":613,"column_start":12,"column_end":30},"name":"perspective_glu_rh","qualname":"<Mat4>::perspective_glu_rh","value":"pub fn perspective_glu_rh(f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":68742,"byte_end":68751,"line_start":611,"line_end":611,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"0.8.2\", note =\n             \"please use `Mat4::perspective_rh_gl` instead\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":68756,"byte_end":68841,"line_start":612,"line_end":612,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":69182,"byte_end":69205,"line_start":624,"line_end":624,"column_start":12,"column_end":35},"name":"perspective_infinite_rh","qualname":"<Mat4>::perspective_infinite_rh","value":"pub fn perspective_infinite_rh(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an infinite right-handed perspective projection matrix with\n [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates an infinite right-handed perspective projection matrix with","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":69072,"byte_end":69143,"line_start":622,"line_end":622,"column_start":5,"column_end":76}},{"value":"/ [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":69148,"byte_end":69170,"line_start":623,"line_end":623,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":69672,"byte_end":69703,"line_start":636,"line_end":636,"column_start":12,"column_end":43},"name":"perspective_infinite_reverse_rh","qualname":"<Mat4>::perspective_infinite_reverse_rh","value":"pub fn perspective_infinite_reverse_rh(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an infinite reverse right-handed perspective projection matrix\n with [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates an infinite reverse right-handed perspective projection matrix","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":69554,"byte_end":69628,"line_start":634,"line_end":634,"column_start":5,"column_end":79}},{"value":"/ with [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":69633,"byte_end":69660,"line_start":635,"line_end":635,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":70338,"byte_end":70356,"line_start":654,"line_end":654,"column_start":12,"column_end":30},"name":"orthographic_rh_gl","qualname":"<Mat4>::orthographic_rh_gl","value":"pub fn orthographic_rh_gl(f32, f32, f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a right-handed orthographic projection matrix with [-1,1] depth\n range.  This is the same as the OpenGL `glOrtho` function in OpenGL.\n See\n https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml\n","sig":null,"attributes":[{"value":"/ Creates a right-handed orthographic projection matrix with [-1,1] depth","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":70081,"byte_end":70156,"line_start":650,"line_end":650,"column_start":5,"column_end":80}},{"value":"/ range.  This is the same as the OpenGL `glOrtho` function in OpenGL.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":70161,"byte_end":70233,"line_start":651,"line_end":651,"column_start":5,"column_end":77}},{"value":"/ See","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":70238,"byte_end":70245,"line_start":652,"line_end":652,"column_start":5,"column_end":12}},{"value":"/ https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":70250,"byte_end":70326,"line_start":653,"line_end":653,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":71053,"byte_end":71068,"line_start":678,"line_end":678,"column_start":12,"column_end":27},"name":"orthographic_lh","qualname":"<Mat4>::orthographic_lh","value":"pub fn orthographic_lh(f32, f32, f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a left-handed orthographic projection matrix with [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates a left-handed orthographic projection matrix with [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":70961,"byte_end":71041,"line_start":677,"line_end":677,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":71811,"byte_end":71826,"line_start":703,"line_end":703,"column_start":12,"column_end":27},"name":"orthographic_rh","qualname":"<Mat4>::orthographic_rh","value":"pub fn orthographic_rh(f32, f32, f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a right-handed orthographic projection matrix with [0,1] depth range.\n","sig":null,"attributes":[{"value":"/ Creates a right-handed orthographic projection matrix with [0,1] depth range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":71718,"byte_end":71799,"line_start":702,"line_end":702,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":72496,"byte_end":72504,"line_start":728,"line_end":728,"column_start":12,"column_end":20},"name":"mul_vec4","qualname":"<Mat4>::mul_vec4","value":"pub fn mul_vec4(&Self, Vec4) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":72475,"byte_end":72484,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":72832,"byte_end":72840,"line_start":738,"line_end":738,"column_start":12,"column_end":20},"name":"mul_mat4","qualname":"<Mat4>::mul_mat4","value":"pub fn mul_mat4(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies two 4x4 matrices.\n","sig":null,"attributes":[{"value":"/ Multiplies two 4x4 matrices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":72774,"byte_end":72806,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":72811,"byte_end":72820,"line_start":737,"line_end":737,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73125,"byte_end":73133,"line_start":748,"line_end":748,"column_start":12,"column_end":20},"name":"add_mat4","qualname":"<Mat4>::add_mat4","value":"pub fn add_mat4(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73104,"byte_end":73113,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73414,"byte_end":73422,"line_start":758,"line_end":758,"column_start":12,"column_end":20},"name":"sub_mat4","qualname":"<Mat4>::sub_mat4","value":"pub fn sub_mat4(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73393,"byte_end":73402,"line_start":757,"line_end":757,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73703,"byte_end":73713,"line_start":768,"line_end":768,"column_start":12,"column_end":22},"name":"mul_scalar","qualname":"<Mat4>::mul_scalar","value":"pub fn mul_scalar(&Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73682,"byte_end":73691,"line_start":767,"line_end":767,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74130,"byte_end":74146,"line_start":782,"line_end":782,"column_start":12,"column_end":28},"name":"transform_point3","qualname":"<Mat4>::transform_point3","value":"pub fn transform_point3(&Self, Vec3) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Transforms the given `Vec3` as 3D point.\n This is the equivalent of multiplying the `Vec3` as a `Vec4` where `w`\n is `1.0`.\n","sig":null,"attributes":[{"value":"/ Transforms the given `Vec3` as 3D point.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":73963,"byte_end":74007,"line_start":778,"line_end":778,"column_start":5,"column_end":49}},{"value":"/ This is the equivalent of multiplying the `Vec3` as a `Vec4` where `w`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74012,"byte_end":74086,"line_start":779,"line_end":779,"column_start":5,"column_end":79}},{"value":"/ is `1.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74091,"byte_end":74104,"line_start":780,"line_end":780,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74109,"byte_end":74118,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74787,"byte_end":74804,"line_start":797,"line_end":797,"column_start":12,"column_end":29},"name":"transform_vector3","qualname":"<Mat4>::transform_vector3","value":"pub fn transform_vector3(&Self, Vec3) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Transforms the give `Vec3` as 3D vector.\n This is the equivalent of multiplying the `Vec3` as a `Vec4` where `w`\n is `0.0`.\n","sig":null,"attributes":[{"value":"/ Transforms the give `Vec3` as 3D vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74620,"byte_end":74664,"line_start":793,"line_end":793,"column_start":5,"column_end":49}},{"value":"/ This is the equivalent of multiplying the `Vec3` as a `Vec4` where `w`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74669,"byte_end":74743,"line_start":794,"line_end":794,"column_start":5,"column_end":79}},{"value":"/ is `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74748,"byte_end":74761,"line_start":795,"line_end":795,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":74766,"byte_end":74775,"line_start":796,"line_end":796,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75831,"byte_end":75842,"line_start":818,"line_end":818,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Mat4>::abs_diff_eq","value":"pub fn abs_diff_eq(&Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75270,"byte_end":75344,"line_start":808,"line_end":808,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75349,"byte_end":75405,"line_start":809,"line_end":809,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75410,"byte_end":75413,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Mat4`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75418,"byte_end":75494,"line_start":811,"line_end":811,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75499,"byte_end":75572,"line_start":812,"line_end":812,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75577,"byte_end":75646,"line_start":813,"line_end":813,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75651,"byte_end":75654,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75659,"byte_end":75705,"line_start":815,"line_end":815,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75710,"byte_end":75805,"line_start":816,"line_end":816,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":75810,"byte_end":75819,"line_start":817,"line_end":817,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77939,"byte_end":77943,"line_start":21,"line_end":21,"column_start":12,"column_end":16},"name":"Quat","qualname":"::f32::quat::Quat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A quaternion representing an orientation.","sig":null,"attributes":[{"value":"/ A quaternion representing an orientation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77622,"byte_end":77667,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77668,"byte_end":77671,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This quaternion is intended to be of unit length but may denormalize due to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77672,"byte_end":77751,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ floating point \"error creep\" which can occur when successive quaternion","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77752,"byte_end":77827,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ operations are applied.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77828,"byte_end":77855,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77856,"byte_end":77859,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This type is 16 byte aligned.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77860,"byte_end":77893,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77917,"byte_end":77927,"line_start":20,"line_end":20,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77980,"byte_end":77984,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"quat","qualname":"::f32::quat::quat","value":"pub fn quat(f32, f32, f32, f32) -> Quat","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":77963,"byte_end":77972,"line_start":23,"line_end":23,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78416,"byte_end":78425,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"from_xyzw","qualname":"<Quat>::from_xyzw","value":"pub fn from_xyzw(f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rotation quaternion.","sig":null,"attributes":[{"value":"/ Creates a new rotation quaternion.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78078,"byte_end":78116,"line_start":29,"line_end":29,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78121,"byte_end":78124,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This should generally not be called manually unless you know what you are doing. Use one of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78129,"byte_end":78224,"line_start":31,"line_end":31,"column_start":5,"column_end":100}},{"value":"/ the other constructors instead such as `identity` or `from_axis_angle`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78229,"byte_end":78304,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78309,"byte_end":78312,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `from_xyzw` is mostly used by unit tests and `serde` deserialization.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78317,"byte_end":78390,"line_start":34,"line_end":34,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78395,"byte_end":78404,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78536,"byte_end":78544,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"identity","qualname":"<Quat>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78515,"byte_end":78524,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78892,"byte_end":78912,"line_start":55,"line_end":55,"column_start":12,"column_end":32},"name":"from_slice_unaligned","qualname":"<Quat>::from_slice_unaligned","value":"pub fn from_slice_unaligned(&[f32]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rotation quaternion from an unaligned `&[f32]`.","sig":null,"attributes":[{"value":"/ Creates a new rotation quaternion from an unaligned `&[f32]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78612,"byte_end":78677,"line_start":45,"line_end":45,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78682,"byte_end":78685,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Preconditions","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78690,"byte_end":78709,"line_start":47,"line_end":47,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78714,"byte_end":78717,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ The resulting quaternion is expected to be of unit length.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78722,"byte_end":78784,"line_start":49,"line_end":49,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78789,"byte_end":78792,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78797,"byte_end":78809,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78814,"byte_end":78817,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` length is less than 4.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78822,"byte_end":78866,"line_start":53,"line_end":53,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78871,"byte_end":78880,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79220,"byte_end":79244,"line_start":67,"line_end":67,"column_start":12,"column_end":36},"name":"write_to_slice_unaligned","qualname":"<Quat>::write_to_slice_unaligned","value":"pub fn write_to_slice_unaligned(Self, &mut [f32])","parent":null,"children":[],"decl_id":null,"docs":" Writes the quaternion to an unaligned `&mut [f32]`.","sig":null,"attributes":[{"value":"/ Writes the quaternion to an unaligned `&mut [f32]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79057,"byte_end":79112,"line_start":61,"line_end":61,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79117,"byte_end":79120,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79125,"byte_end":79137,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79142,"byte_end":79145,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` length is less than 4.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79150,"byte_end":79194,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79199,"byte_end":79208,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79445,"byte_end":79460,"line_start":74,"line_end":74,"column_start":12,"column_end":27},"name":"from_axis_angle","qualname":"<Quat>::from_axis_angle","value":"pub fn from_axis_angle(Vec3, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new quaterion for a normalized rotation axis and angle\n (in radians).\n","sig":null,"attributes":[{"value":"/ Create a new quaterion for a normalized rotation axis and angle","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79330,"byte_end":79397,"line_start":71,"line_end":71,"column_start":5,"column_end":72}},{"value":"/ (in radians).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79402,"byte_end":79419,"line_start":72,"line_end":72,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79424,"byte_end":79433,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79736,"byte_end":79751,"line_start":82,"line_end":82,"column_start":12,"column_end":27},"name":"from_rotation_x","qualname":"<Quat>::from_rotation_x","value":"pub fn from_rotation_x(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from the angle (in radians) around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a new quaternion from the angle (in radians) around the x axis.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79635,"byte_end":79710,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79715,"byte_end":79724,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79976,"byte_end":79991,"line_start":89,"line_end":89,"column_start":12,"column_end":27},"name":"from_rotation_y","qualname":"<Quat>::from_rotation_y","value":"pub fn from_rotation_y(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from the angle (in radians) around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a new quaternion from the angle (in radians) around the y axis.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79875,"byte_end":79950,"line_start":87,"line_end":87,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":79955,"byte_end":79964,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80216,"byte_end":80231,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"from_rotation_z","qualname":"<Quat>::from_rotation_z","value":"pub fn from_rotation_z(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from the angle (in radians) around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a new quaternion from the angle (in radians) around the z axis.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80115,"byte_end":80190,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80195,"byte_end":80204,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80492,"byte_end":80509,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"name":"from_rotation_ypr","qualname":"<Quat>::from_rotation_ypr","value":"pub fn from_rotation_ypr(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a quaternion from the given yaw (around y), pitch (around x) and roll (around z)\n in radians.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80355,"byte_end":80364,"line_start":101,"line_end":101,"column_start":5,"column_end":14}},{"value":"/ Create a quaternion from the given yaw (around y), pitch (around x) and roll (around z)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80369,"byte_end":80460,"line_start":102,"line_end":102,"column_start":5,"column_end":96}},{"value":"/ in radians.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":80465,"byte_end":80480,"line_start":103,"line_end":103,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83263,"byte_end":83281,"line_start":185,"line_end":185,"column_start":12,"column_end":30},"name":"from_rotation_mat3","qualname":"<Quat>::from_rotation_mat3","value":"pub fn from_rotation_mat3(&Mat3) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from a 3x3 rotation matrix.\n","sig":null,"attributes":[{"value":"/ Creates a new quaternion from a 3x3 rotation matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83181,"byte_end":83237,"line_start":183,"line_end":183,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83242,"byte_end":83251,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83512,"byte_end":83530,"line_start":192,"line_end":192,"column_start":12,"column_end":30},"name":"from_rotation_mat4","qualname":"<Quat>::from_rotation_mat4","value":"pub fn from_rotation_mat4(&Mat4) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from a 3x3 rotation matrix inside a homogeneous\n 4x4 matrix.\n","sig":null,"attributes":[{"value":"/ Creates a new quaternion from a 3x3 rotation matrix inside a homogeneous","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83390,"byte_end":83466,"line_start":189,"line_end":189,"column_start":5,"column_end":81}},{"value":"/ 4x4 matrix.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83471,"byte_end":83486,"line_start":190,"line_end":190,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83491,"byte_end":83500,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83795,"byte_end":83808,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"to_axis_angle","qualname":"<Quat>::to_axis_angle","value":"pub fn to_axis_angle(Self) -> (Vec3, f32)","parent":null,"children":[],"decl_id":null,"docs":" Returns the rotation axis and angle of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the rotation axis and angle of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83719,"byte_end":83769,"line_start":200,"line_end":200,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":83774,"byte_end":83783,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84367,"byte_end":84376,"line_start":218,"line_end":218,"column_start":12,"column_end":21},"name":"conjugate","qualname":"<Quat>::conjugate","value":"pub fn conjugate(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the quaternion conjugate of `self`. For a unit quaternion the\n conjugate is also the inverse.\n","sig":null,"attributes":[{"value":"/ Returns the quaternion conjugate of `self`. For a unit quaternion the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84229,"byte_end":84302,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ conjugate is also the inverse.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84307,"byte_end":84341,"line_start":216,"line_end":216,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84346,"byte_end":84355,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84883,"byte_end":84886,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"dot","qualname":"<Quat>::dot","value":"pub fn dot(Self, Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the dot product of `self` and `other`. The dot product is\n equal to the the cosine of the angle between two quaterion rotations.\n","sig":null,"attributes":[{"value":"/ Computes the dot product of `self` and `other`. The dot product is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84709,"byte_end":84779,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/ equal to the the cosine of the angle between two quaterion rotations.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84784,"byte_end":84857,"line_start":234,"line_end":234,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84862,"byte_end":84871,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85014,"byte_end":85020,"line_start":242,"line_end":242,"column_start":12,"column_end":18},"name":"length","qualname":"<Quat>::length","value":"pub fn length(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the length of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84954,"byte_end":84988,"line_start":240,"line_end":240,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":84993,"byte_end":85002,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85248,"byte_end":85262,"line_start":251,"line_end":251,"column_start":12,"column_end":26},"name":"length_squared","qualname":"<Quat>::length_squared","value":"pub fn length_squared(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared length of `self`.","sig":null,"attributes":[{"value":"/ Computes the squared length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85071,"byte_end":85113,"line_start":246,"line_end":246,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85118,"byte_end":85121,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This is generally faster than `Quat::length()` as it avoids a square","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85126,"byte_end":85198,"line_start":248,"line_end":248,"column_start":5,"column_end":77}},{"value":"/ root operation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85203,"byte_end":85222,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85227,"byte_end":85236,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85455,"byte_end":85472,"line_start":259,"line_end":259,"column_start":12,"column_end":29},"name":"length_reciprocal","qualname":"<Quat>::length_reciprocal","value":"pub fn length_reciprocal(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes `1.0 / Quat::length()`.","sig":null,"attributes":[{"value":"/ Computes `1.0 / Quat::length()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85321,"byte_end":85357,"line_start":255,"line_end":255,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85362,"byte_end":85365,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85370,"byte_end":85429,"line_start":257,"line_end":257,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85434,"byte_end":85443,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85671,"byte_end":85680,"line_start":267,"line_end":267,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Quat>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns `self` normalized to length 1.0.","sig":null,"attributes":[{"value":"/ Returns `self` normalized to length 1.0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85529,"byte_end":85573,"line_start":263,"line_end":263,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85578,"byte_end":85581,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85586,"byte_end":85645,"line_start":265,"line_end":265,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85650,"byte_end":85659,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85922,"byte_end":85935,"line_start":276,"line_end":276,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Quat>::is_normalized","value":"pub fn is_normalized(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether `self` of length `1.0` or not.","sig":null,"attributes":[{"value":"/ Returns whether `self` of length `1.0` or not.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85792,"byte_end":85842,"line_start":272,"line_end":272,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85847,"byte_end":85850,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Uses a precision threshold of `1e-6`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85855,"byte_end":85896,"line_start":274,"line_end":274,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85901,"byte_end":85910,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":86013,"byte_end":86029,"line_start":281,"line_end":281,"column_start":12,"column_end":28},"name":"is_near_identity","qualname":"<Quat>::is_near_identity","value":"pub fn is_near_identity(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":85992,"byte_end":86001,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87584,"byte_end":87595,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Quat>::abs_diff_eq","value":"pub fn abs_diff_eq(Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87023,"byte_end":87097,"line_start":301,"line_end":301,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87102,"byte_end":87158,"line_start":302,"line_end":302,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87163,"byte_end":87166,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Quat`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87171,"byte_end":87247,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87252,"byte_end":87325,"line_start":305,"line_end":305,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87330,"byte_end":87399,"line_start":306,"line_end":306,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87404,"byte_end":87407,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87412,"byte_end":87458,"line_start":308,"line_end":308,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87463,"byte_end":87558,"line_start":309,"line_end":309,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87563,"byte_end":87572,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87961,"byte_end":87965,"line_start":321,"line_end":321,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Quat>::lerp","value":"pub fn lerp(Self, Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs a linear interpolation between `self` and `other` based on\n the value `s`.","sig":null,"attributes":[{"value":"/ Performs a linear interpolation between `self` and `other` based on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87705,"byte_end":87776,"line_start":315,"line_end":315,"column_start":5,"column_end":76}},{"value":"/ the value `s`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87781,"byte_end":87799,"line_start":316,"line_end":316,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87804,"byte_end":87807,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ When `s` is `0.0`, the result will be equal to `self`.  When `s`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87812,"byte_end":87880,"line_start":318,"line_end":318,"column_start":5,"column_end":73}},{"value":"/ is `1.0`, the result will be equal to `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87885,"byte_end":87935,"line_start":319,"line_end":319,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":87940,"byte_end":87949,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89825,"byte_end":89830,"line_start":367,"line_end":367,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Quat>::slerp","value":"pub fn slerp(Self, Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.","sig":null,"attributes":[{"value":"/ Performs a spherical linear interpolation between `self` and `end`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89108,"byte_end":89178,"line_start":354,"line_end":354,"column_start":5,"column_end":75}},{"value":"/ based on the value `s`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89183,"byte_end":89210,"line_start":355,"line_end":355,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89215,"byte_end":89218,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ When `s` is `0.0`, the result will be equal to `self`.  When `s`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89223,"byte_end":89291,"line_start":357,"line_end":357,"column_start":5,"column_end":73}},{"value":"/ is `1.0`, the result will be equal to `end`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89296,"byte_end":89344,"line_start":358,"line_end":358,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89349,"byte_end":89352,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Note that a rotation can be represented by two quaternions: `q` and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89357,"byte_end":89428,"line_start":360,"line_end":360,"column_start":5,"column_end":76}},{"value":"/ `-q`. The slerp path between `q` and `end` will be different from the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89433,"byte_end":89506,"line_start":361,"line_end":361,"column_start":5,"column_end":78}},{"value":"/ path between `-q` and `end`. One path will take the long way around and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89511,"byte_end":89586,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ one will take the short way. In order to correct for this, the `dot`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89591,"byte_end":89663,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ product between `self` and `end` should be positive. If the `dot`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89668,"byte_end":89737,"line_start":364,"line_end":364,"column_start":5,"column_end":74}},{"value":"/ product is negative, slerp between `-self` and `end`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89742,"byte_end":89799,"line_start":365,"line_end":365,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":89804,"byte_end":89813,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":91662,"byte_end":91670,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"mul_vec3","qualname":"<Quat>::mul_vec3","value":"pub fn mul_vec3(Self, Vec3) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Multiplies a quaternion and a 3D vector, rotating it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":91579,"byte_end":91588,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"/ Multiplies a quaternion and a 3D vector, rotating it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":91593,"byte_end":91650,"line_start":418,"line_end":418,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":92449,"byte_end":92457,"line_start":443,"line_end":443,"column_start":12,"column_end":20},"name":"mul_quat","qualname":"<Quat>::mul_quat","value":"pub fn mul_quat(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies two quaternions.\n Note that due to floating point rounding the result may not be perfectly normalized.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":92299,"byte_end":92308,"line_start":440,"line_end":440,"column_start":5,"column_end":14}},{"value":"/ Multiplies two quaternions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":92313,"byte_end":92344,"line_start":441,"line_end":441,"column_start":5,"column_end":36}},{"value":"/ Note that due to floating point rounding the result may not be perfectly normalized.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":92349,"byte_end":92437,"line_start":442,"line_end":442,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94625,"byte_end":94626,"line_start":497,"line_end":497,"column_start":12,"column_end":13},"name":"x","qualname":"<Quat>::x","value":"pub fn x(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `x`.\n","sig":null,"attributes":[{"value":"/ Returns element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94575,"byte_end":94599,"line_start":495,"line_end":495,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94604,"byte_end":94613,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94722,"byte_end":94723,"line_start":503,"line_end":503,"column_start":12,"column_end":13},"name":"y","qualname":"<Quat>::y","value":"pub fn y(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `y`.\n","sig":null,"attributes":[{"value":"/ Returns element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94672,"byte_end":94696,"line_start":501,"line_end":501,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94701,"byte_end":94710,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94819,"byte_end":94820,"line_start":509,"line_end":509,"column_start":12,"column_end":13},"name":"z","qualname":"<Quat>::z","value":"pub fn z(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `z`.\n","sig":null,"attributes":[{"value":"/ Returns element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94769,"byte_end":94793,"line_start":507,"line_end":507,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94798,"byte_end":94807,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94916,"byte_end":94917,"line_start":515,"line_end":515,"column_start":12,"column_end":13},"name":"w","qualname":"<Quat>::w","value":"pub fn w(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `w`.\n","sig":null,"attributes":[{"value":"/ Returns element `w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94866,"byte_end":94890,"line_start":513,"line_end":513,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94895,"byte_end":94904,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1092},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":97932,"byte_end":97936,"line_start":7,"line_end":7,"column_start":12,"column_end":16},"name":"Vec2","qualname":"::f32::vec2::Vec2","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional vector.\n","sig":null,"attributes":[{"value":"/ A 2-dimensional vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":97820,"byte_end":97847,"line_start":4,"line_end":4,"column_start":1,"column_end":28}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":97910,"byte_end":97920,"line_start":6,"line_end":6,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":388},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":97988,"byte_end":97992,"line_start":10,"line_end":10,"column_start":8,"column_end":12},"name":"vec2","qualname":"::f32::vec2::vec2","value":"pub fn vec2(f32, f32) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":97971,"byte_end":97980,"line_start":9,"line_end":9,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98291,"byte_end":98295,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"sign","qualname":"<Vec2>::sign","value":"pub fn sign(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Vec4` with elements representing the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a new `Vec4` with elements representing the sign of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98053,"byte_end":98124,"line_start":15,"line_end":15,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98129,"byte_end":98132,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98137,"byte_end":98196,"line_start":17,"line_end":17,"column_start":5,"column_end":64}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98201,"byte_end":98265,"line_start":18,"line_end":18,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98270,"byte_end":98279,"line_start":19,"line_end":19,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98550,"byte_end":98560,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"reciprocal","qualname":"<Vec2>::reciprocal","value":"pub fn reciprocal(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the reciprocal `1.0/n` of each element, returning the\n results in a new `Vec2`.\n","sig":null,"attributes":[{"value":"/ Computes the reciprocal `1.0/n` of each element, returning the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98425,"byte_end":98491,"line_start":25,"line_end":25,"column_start":5,"column_end":71}},{"value":"/ results in a new `Vec2`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98496,"byte_end":98524,"line_start":26,"line_end":26,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98529,"byte_end":98538,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98871,"byte_end":98875,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vec2>::lerp","value":"pub fn lerp(Self, Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs a linear interpolation between `self` and `other` based on\n the value `s`.","sig":null,"attributes":[{"value":"/ Performs a linear interpolation between `self` and `other` based on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98615,"byte_end":98686,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ the value `s`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98691,"byte_end":98709,"line_start":33,"line_end":33,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98714,"byte_end":98717,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ When `s` is `0.0`, the result will be equal to `self`.  When `s`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98722,"byte_end":98790,"line_start":35,"line_end":35,"column_start":5,"column_end":73}},{"value":"/ is `1.0`, the result will be equal to `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98795,"byte_end":98845,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98850,"byte_end":98859,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99090,"byte_end":99103,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Vec2>::is_normalized","value":"pub fn is_normalized(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether `self` is length `1.0` or not.","sig":null,"attributes":[{"value":"/ Returns whether `self` is length `1.0` or not.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98960,"byte_end":99010,"line_start":42,"line_end":42,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99015,"byte_end":99018,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Uses a precision threshold of `1e-6`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99023,"byte_end":99064,"line_start":44,"line_end":44,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99069,"byte_end":99078,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99721,"byte_end":99732,"line_start":60,"line_end":60,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Vec2>::abs_diff_eq","value":"pub fn abs_diff_eq(Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99160,"byte_end":99234,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99239,"byte_end":99295,"line_start":51,"line_end":51,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99300,"byte_end":99303,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Vec2`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99308,"byte_end":99384,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99389,"byte_end":99462,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99467,"byte_end":99536,"line_start":55,"line_end":55,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99541,"byte_end":99544,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99549,"byte_end":99595,"line_start":57,"line_end":57,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99600,"byte_end":99695,"line_start":58,"line_end":58,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99700,"byte_end":99709,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99891,"byte_end":99894,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec2>::new","value":"pub fn new(f32, f32) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99840,"byte_end":99865,"line_start":64,"line_end":64,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99870,"byte_end":99879,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100033,"byte_end":100037,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vec2>::zero","value":"pub fn zero() -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` with all elements set to `0.0`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` with all elements set to `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":99951,"byte_end":100007,"line_start":70,"line_end":70,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100012,"byte_end":100021,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100166,"byte_end":100169,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"one","qualname":"<Vec2>::one","value":"pub fn one() -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` with all elements set to `1.0`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` with all elements set to `1.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100084,"byte_end":100140,"line_start":76,"line_end":76,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100145,"byte_end":100154,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100298,"byte_end":100304,"line_start":84,"line_end":84,"column_start":12,"column_end":18},"name":"unit_x","qualname":"<Vec2>::unit_x","value":"pub fn unit_x() -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` with values `[x: 1.0, y: 0.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` with values `[x: 1.0, y: 0.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100216,"byte_end":100272,"line_start":82,"line_end":82,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100277,"byte_end":100286,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100433,"byte_end":100439,"line_start":90,"line_end":90,"column_start":12,"column_end":18},"name":"unit_y","qualname":"<Vec2>::unit_y","value":"pub fn unit_y() -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` with values `[x: 0.0, y: 1.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` with values `[x: 0.0, y: 1.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100351,"byte_end":100407,"line_start":88,"line_end":88,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100412,"byte_end":100421,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100566,"byte_end":100571,"line_start":96,"line_end":96,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vec2>::splat","value":"pub fn splat(f32) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` with all elements set to `v`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` with all elements set to `v`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100486,"byte_end":100540,"line_start":94,"line_end":94,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100545,"byte_end":100554,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100707,"byte_end":100713,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vec2>::extend","value":"pub fn extend(Self, f32) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` from `self` and the given `z` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` from `self` and the given `z` value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100620,"byte_end":100681,"line_start":100,"line_end":100,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100686,"byte_end":100695,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100836,"byte_end":100837,"line_start":108,"line_end":108,"column_start":12,"column_end":13},"name":"x","qualname":"<Vec2>::x","value":"pub fn x(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `x`.\n","sig":null,"attributes":[{"value":"/ Returns element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100786,"byte_end":100810,"line_start":106,"line_end":106,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100815,"byte_end":100824,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100929,"byte_end":100930,"line_start":114,"line_end":114,"column_start":12,"column_end":13},"name":"y","qualname":"<Vec2>::y","value":"pub fn y(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `y`.\n","sig":null,"attributes":[{"value":"/ Returns element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100879,"byte_end":100903,"line_start":112,"line_end":112,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100908,"byte_end":100917,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101045,"byte_end":101050,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"x_mut","qualname":"<Vec2>::x_mut","value":"pub fn x_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `x`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":100972,"byte_end":101019,"line_start":118,"line_end":118,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101024,"byte_end":101033,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101180,"byte_end":101185,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"y_mut","qualname":"<Vec2>::y_mut","value":"pub fn y_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `y`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101107,"byte_end":101154,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101159,"byte_end":101168,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101289,"byte_end":101294,"line_start":132,"line_end":132,"column_start":12,"column_end":17},"name":"set_x","qualname":"<Vec2>::set_x","value":"pub fn set_x(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `x`.\n","sig":null,"attributes":[{"value":"/ Sets element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101242,"byte_end":101263,"line_start":130,"line_end":130,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101268,"byte_end":101277,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101394,"byte_end":101399,"line_start":138,"line_end":138,"column_start":12,"column_end":17},"name":"set_y","qualname":"<Vec2>::set_y","value":"pub fn set_y(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `y`.\n","sig":null,"attributes":[{"value":"/ Sets element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101347,"byte_end":101368,"line_start":136,"line_end":136,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101373,"byte_end":101382,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101529,"byte_end":101532,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vec2>::dot","value":"pub fn dot(Self, Vec2) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the dot product of `self` and `other`.\n","sig":null,"attributes":[{"value":"/ Computes the dot product of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101452,"byte_end":101503,"line_start":142,"line_end":142,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101508,"byte_end":101517,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101680,"byte_end":101686,"line_start":150,"line_end":150,"column_start":12,"column_end":18},"name":"length","qualname":"<Vec2>::length","value":"pub fn length(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the length of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101620,"byte_end":101654,"line_start":148,"line_end":148,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101659,"byte_end":101668,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101920,"byte_end":101934,"line_start":159,"line_end":159,"column_start":12,"column_end":26},"name":"length_squared","qualname":"<Vec2>::length_squared","value":"pub fn length_squared(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared length of `self`.","sig":null,"attributes":[{"value":"/ Computes the squared length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101743,"byte_end":101785,"line_start":154,"line_end":154,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101790,"byte_end":101793,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is generally faster than `Vec2::length()` as it avoids a square","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101798,"byte_end":101870,"line_start":156,"line_end":156,"column_start":5,"column_end":77}},{"value":"/ root operation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101875,"byte_end":101894,"line_start":157,"line_end":157,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101899,"byte_end":101908,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102118,"byte_end":102135,"line_start":167,"line_end":167,"column_start":12,"column_end":29},"name":"length_reciprocal","qualname":"<Vec2>::length_reciprocal","value":"pub fn length_reciprocal(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes `1.0 / Vec2::length()`.","sig":null,"attributes":[{"value":"/ Computes `1.0 / Vec2::length()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":101984,"byte_end":102020,"line_start":163,"line_end":163,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102025,"byte_end":102028,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102033,"byte_end":102092,"line_start":165,"line_end":165,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102097,"byte_end":102106,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102332,"byte_end":102341,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vec2>::normalize","value":"pub fn normalize(Self) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Returns `self` normalized to length 1.0.","sig":null,"attributes":[{"value":"/ Returns `self` normalized to length 1.0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102190,"byte_end":102234,"line_start":171,"line_end":171,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102239,"byte_end":102242,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102247,"byte_end":102306,"line_start":173,"line_end":173,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102311,"byte_end":102320,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102637,"byte_end":102640,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"min","qualname":"<Vec2>::min","value":"pub fn min(Self, Vec2) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Returns the vertical minimum of `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the vertical minimum of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102409,"byte_end":102464,"line_start":179,"line_end":179,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102469,"byte_end":102472,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102477,"byte_end":102510,"line_start":181,"line_end":181,"column_start":5,"column_end":38}},{"value":"/ `[x: min(x1, x2), y: min(y1, y2)]`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102515,"byte_end":102554,"line_start":182,"line_end":182,"column_start":5,"column_end":44}},{"value":"/ taking the minimum of each element individually.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102559,"byte_end":102611,"line_start":183,"line_end":183,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102616,"byte_end":102625,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102964,"byte_end":102967,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"max","qualname":"<Vec2>::max","value":"pub fn max(Self, Vec2) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Returns the vertical maximum of `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the vertical maximum of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102736,"byte_end":102791,"line_start":189,"line_end":189,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102796,"byte_end":102799,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102804,"byte_end":102837,"line_start":191,"line_end":191,"column_start":5,"column_end":38}},{"value":"/ `[x: max(x1, x2), y: max(y1, y2)]`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102842,"byte_end":102881,"line_start":192,"line_end":192,"column_start":5,"column_end":44}},{"value":"/ taking the maximum of each element individually.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102886,"byte_end":102938,"line_start":193,"line_end":193,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":102943,"byte_end":102952,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103204,"byte_end":103215,"line_start":203,"line_end":203,"column_start":12,"column_end":23},"name":"min_element","qualname":"<Vec2>::min_element","value":"pub fn min_element(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the horizontal minimum of `self`'s elements.","sig":null,"attributes":[{"value":"/ Returns the horizontal minimum of `self`'s elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103063,"byte_end":103119,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103124,"byte_end":103127,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `min(x, y)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103132,"byte_end":103178,"line_start":201,"line_end":201,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103183,"byte_end":103192,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103410,"byte_end":103421,"line_start":211,"line_end":211,"column_start":12,"column_end":23},"name":"max_element","qualname":"<Vec2>::max_element","value":"pub fn max_element(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the horizontal maximum of `self`'s elements.","sig":null,"attributes":[{"value":"/ Returns the horizontal maximum of `self`'s elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103269,"byte_end":103325,"line_start":207,"line_end":207,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103330,"byte_end":103333,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `max(x, y)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103338,"byte_end":103384,"line_start":209,"line_end":209,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103389,"byte_end":103398,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103705,"byte_end":103710,"line_start":220,"line_end":220,"column_start":12,"column_end":17},"name":"cmpeq","qualname":"<Vec2>::cmpeq","value":"pub fn cmpeq(Self, Vec2) -> Vec2Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `==` comparison between `self` and `other`,\n returning a `Vec2Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `==` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103475,"byte_end":103542,"line_start":215,"line_end":215,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec2Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103547,"byte_end":103589,"line_start":216,"line_end":216,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103594,"byte_end":103597,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 == x2, y1 == y2, z1 == z2, w1 == w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103602,"byte_end":103679,"line_start":218,"line_end":218,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103684,"byte_end":103693,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104049,"byte_end":104054,"line_start":229,"line_end":229,"column_start":12,"column_end":17},"name":"cmpne","qualname":"<Vec2>::cmpne","value":"pub fn cmpne(Self, Vec2) -> Vec2Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `!=` comparison between `self` and `other`,\n returning a `Vec2Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `!=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103819,"byte_end":103886,"line_start":224,"line_end":224,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec2Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103891,"byte_end":103933,"line_start":225,"line_end":225,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103938,"byte_end":103941,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 != x2, y1 != y2, z1 != z2, w1 != w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":103946,"byte_end":104023,"line_start":227,"line_end":227,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104028,"byte_end":104037,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104393,"byte_end":104398,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"cmpge","qualname":"<Vec2>::cmpge","value":"pub fn cmpge(Self, Vec2) -> Vec2Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `>=` comparison between `self` and `other`,\n returning a `Vec2Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `>=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104163,"byte_end":104230,"line_start":233,"line_end":233,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec2Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104235,"byte_end":104277,"line_start":234,"line_end":234,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104282,"byte_end":104285,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 >= x2, y1 >= y2, z1 >= z2, w1 >= w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104290,"byte_end":104367,"line_start":236,"line_end":236,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104372,"byte_end":104381,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104732,"byte_end":104737,"line_start":247,"line_end":247,"column_start":12,"column_end":17},"name":"cmpgt","qualname":"<Vec2>::cmpgt","value":"pub fn cmpgt(Self, Vec2) -> Vec2Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `>` comparison between `self` and `other`,\n returning a `Vec2Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `>` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104507,"byte_end":104573,"line_start":242,"line_end":242,"column_start":5,"column_end":71}},{"value":"/ returning a `Vec2Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104578,"byte_end":104620,"line_start":243,"line_end":243,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104625,"byte_end":104628,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 > x2, y1 > y2, z1 > z2, w1 > w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104633,"byte_end":104706,"line_start":245,"line_end":245,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104711,"byte_end":104720,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105076,"byte_end":105081,"line_start":256,"line_end":256,"column_start":12,"column_end":17},"name":"cmple","qualname":"<Vec2>::cmple","value":"pub fn cmple(Self, Vec2) -> Vec2Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `<=` comparison between `self` and `other`,\n returning a `Vec2Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `<=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104846,"byte_end":104913,"line_start":251,"line_end":251,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec2Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104918,"byte_end":104960,"line_start":252,"line_end":252,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104965,"byte_end":104968,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 <= x2, y1 <= y2, z1 <= z2, w1 <= w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":104973,"byte_end":105050,"line_start":254,"line_end":254,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105055,"byte_end":105064,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105415,"byte_end":105420,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"name":"cmplt","qualname":"<Vec2>::cmplt","value":"pub fn cmplt(Self, Vec2) -> Vec2Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `<` comparison between `self` and `other`,\n returning a `Vec2Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `<` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105190,"byte_end":105256,"line_start":260,"line_end":260,"column_start":5,"column_end":71}},{"value":"/ returning a `Vec2Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105261,"byte_end":105303,"line_start":261,"line_end":261,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105308,"byte_end":105311,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 < x2, y1 < y2, z1 < z2, w1 < w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105316,"byte_end":105389,"line_start":263,"line_end":263,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105394,"byte_end":105403,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105708,"byte_end":105728,"line_start":275,"line_end":275,"column_start":12,"column_end":32},"name":"from_slice_unaligned","qualname":"<Vec2>::from_slice_unaligned","value":"pub fn from_slice_unaligned(&[f32]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` from the first two values in `slice`.","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` from the first two values in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105529,"byte_end":105591,"line_start":269,"line_end":269,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105596,"byte_end":105599,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105604,"byte_end":105616,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105621,"byte_end":105624,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` is less than two elements long.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105629,"byte_end":105682,"line_start":273,"line_end":273,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105687,"byte_end":105696,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105986,"byte_end":106010,"line_start":285,"line_end":285,"column_start":12,"column_end":36},"name":"write_to_slice_unaligned","qualname":"<Vec2>::write_to_slice_unaligned","value":"pub fn write_to_slice_unaligned(Self, &mut [f32])","parent":null,"children":[],"decl_id":null,"docs":" Writes the elements of `self` to the first two elements in `slice`.","sig":null,"attributes":[{"value":"/ Writes the elements of `self` to the first two elements in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105798,"byte_end":105869,"line_start":279,"line_end":279,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105874,"byte_end":105877,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105882,"byte_end":105894,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105899,"byte_end":105902,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` is less than two elements long.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105907,"byte_end":105960,"line_start":283,"line_end":283,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":105965,"byte_end":105974,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106231,"byte_end":106234,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vec2>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Vec2` containing the absolute value of each element of the original\n `Vec2`.\n","sig":null,"attributes":[{"value":"/ Returns a new `Vec2` containing the absolute value of each element of the original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106103,"byte_end":106189,"line_start":290,"line_end":290,"column_start":5,"column_end":91}},{"value":"/ `Vec2`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106194,"byte_end":106205,"line_start":291,"line_end":291,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106210,"byte_end":106219,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106324,"byte_end":106329,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"round","qualname":"<Vec2>::round","value":"pub fn round(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106303,"byte_end":106312,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106423,"byte_end":106428,"line_start":303,"line_end":303,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vec2>::floor","value":"pub fn floor(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106402,"byte_end":106411,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106522,"byte_end":106526,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vec2>::ceil","value":"pub fn ceil(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106501,"byte_end":106510,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106683,"byte_end":106691,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"perp_dot","qualname":"<Vec2>::perp_dot","value":"pub fn perp_dot(Self, Vec2) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The perpendicular dot product of the vector and `other`.\n","sig":null,"attributes":[{"value":"/ The perpendicular dot product of the vector and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106597,"byte_end":106657,"line_start":312,"line_end":312,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106662,"byte_end":106671,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106967,"byte_end":106980,"line_start":323,"line_end":323,"column_start":12,"column_end":25},"name":"angle_between","qualname":"<Vec2>::angle_between","value":"pub fn angle_between(Self, Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the angle between two vectors, in radians.","sig":null,"attributes":[{"value":"/ Returns the angle between two vectors, in radians.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106779,"byte_end":106833,"line_start":318,"line_end":318,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106838,"byte_end":106841,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ The vectors do not need to be unit length, but this function does","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106846,"byte_end":106915,"line_start":320,"line_end":320,"column_start":5,"column_end":74}},{"value":"/ perform a `sqrt`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106920,"byte_end":106941,"line_start":321,"line_end":321,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":106946,"byte_end":106955,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1117},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110833,"byte_end":110841,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"Vec2Mask","qualname":"::f32::vec2_mask::Vec2Mask","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional vector mask.","sig":null,"attributes":[{"value":"/ A 2-dimensional vector mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110636,"byte_end":110668,"line_start":4,"line_end":4,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110669,"byte_end":110672,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This type is typically created by comparison methods on `Vec2`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110673,"byte_end":110740,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110811,"byte_end":110821,"line_start":8,"line_end":8,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110929,"byte_end":110932,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec2Mask>::new","value":"pub fn new(bool, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2Mask`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec2Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110874,"byte_end":110903,"line_start":12,"line_end":12,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110908,"byte_end":110917,"line_start":13,"line_end":13,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111373,"byte_end":111380,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"bitmask","qualname":"<Vec2Mask>::bitmask","value":"pub fn bitmask(Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a bitmask with the lowest two bits set from the elements of\n the `Vec2Mask`.","sig":null,"attributes":[{"value":"/ Returns a bitmask with the lowest two bits set from the elements of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111072,"byte_end":111143,"line_start":19,"line_end":19,"column_start":5,"column_end":76}},{"value":"/ the `Vec2Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111148,"byte_end":111167,"line_start":20,"line_end":20,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111172,"byte_end":111175,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ A true element results in a `1` bit and a false element in a `0` bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111180,"byte_end":111253,"line_start":22,"line_end":22,"column_start":5,"column_end":78}},{"value":"/ Element `x` goes into the first lowest bit, element `y` into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111258,"byte_end":111326,"line_start":23,"line_end":23,"column_start":5,"column_end":73}},{"value":"/ second, etc.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111331,"byte_end":111347,"line_start":24,"line_end":24,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111352,"byte_end":111361,"line_start":25,"line_end":25,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111586,"byte_end":111589,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"any","qualname":"<Vec2Mask>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any of the elements are true, false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if any of the elements are true, false otherwise.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111452,"byte_end":111518,"line_start":30,"line_end":30,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111523,"byte_end":111526,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ In other words: `x || y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111531,"byte_end":111560,"line_start":32,"line_end":32,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111565,"byte_end":111574,"line_start":33,"line_end":33,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111844,"byte_end":111847,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"all","qualname":"<Vec2Mask>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all the elements are true, false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if all the elements are true, false otherwise.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111713,"byte_end":111776,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111781,"byte_end":111784,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ In other words: `x && y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111789,"byte_end":111818,"line_start":41,"line_end":41,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111823,"byte_end":111832,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112283,"byte_end":112289,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"select","qualname":"<Vec2Mask>::select","value":"pub fn select(Self, Vec2, Vec2) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec2` from the elements in `if_true` and `if_false`,\n selecting which to use for each element based on the `Vec2Mask`.","sig":null,"attributes":[{"value":"/ Creates a new `Vec2` from the elements in `if_true` and `if_false`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":111971,"byte_end":112042,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ selecting which to use for each element based on the `Vec2Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112047,"byte_end":112115,"line_start":49,"line_end":49,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112120,"byte_end":112123,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ A true element in the mask uses the corresponding element from","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112128,"byte_end":112194,"line_start":51,"line_end":51,"column_start":5,"column_end":71}},{"value":"/ `if_true`, and false uses the element from `if_false`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112199,"byte_end":112257,"line_start":52,"line_end":52,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112262,"byte_end":112271,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114388,"byte_end":114392,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"Vec3","qualname":"::f32::vec3::Vec3","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional vector.","sig":null,"attributes":[{"value":"/ A 3-dimensional vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114219,"byte_end":114246,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114247,"byte_end":114250,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This type is 16 byte aligned and thus contains 4 bytes padding.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114251,"byte_end":114318,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"cfg(vec3sse2)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114319,"byte_end":114335,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114366,"byte_end":114376,"line_start":23,"line_end":23,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115963,"byte_end":115967,"line_start":90,"line_end":90,"column_start":8,"column_end":12},"name":"vec3","qualname":"::f32::vec3::vec3","value":"pub fn vec3(f32, f32, f32) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115946,"byte_end":115955,"line_start":89,"line_end":89,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116095,"byte_end":116098,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec3>::new","value":"pub fn new(f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116044,"byte_end":116069,"line_start":95,"line_end":95,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116074,"byte_end":116083,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116390,"byte_end":116394,"line_start":111,"line_end":111,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vec3>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` with all elements set to `0.0`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` with all elements set to `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116308,"byte_end":116364,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116369,"byte_end":116378,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116664,"byte_end":116667,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"one","qualname":"<Vec3>::one","value":"pub fn one() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` with all elements set to `1.0`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` with all elements set to `1.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116582,"byte_end":116638,"line_start":123,"line_end":123,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116643,"byte_end":116652,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116945,"byte_end":116951,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"unit_x","qualname":"<Vec3>::unit_x","value":"pub fn unit_x() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` with values `[x: 1.0, y: 0.0, z: 0.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` with values `[x: 1.0, y: 0.0, z: 0.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116855,"byte_end":116919,"line_start":137,"line_end":137,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116924,"byte_end":116933,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117243,"byte_end":117249,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"unit_y","qualname":"<Vec3>::unit_y","value":"pub fn unit_y() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` with values `[x: 0.0, y: 1.0, z: 0.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` with values `[x: 0.0, y: 1.0, z: 0.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117153,"byte_end":117217,"line_start":151,"line_end":151,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117222,"byte_end":117231,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117541,"byte_end":117547,"line_start":167,"line_end":167,"column_start":12,"column_end":18},"name":"unit_z","qualname":"<Vec3>::unit_z","value":"pub fn unit_z() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` with values `[x: 0.0, y: 0.0, z: 1.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` with values `[x: 0.0, y: 0.0, z: 1.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117451,"byte_end":117515,"line_start":165,"line_end":165,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117520,"byte_end":117529,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117829,"byte_end":117834,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vec3>::splat","value":"pub fn splat(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` with all elements set to `v`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` with all elements set to `v`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117749,"byte_end":117803,"line_start":179,"line_end":179,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":117808,"byte_end":117817,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118107,"byte_end":118113,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vec3>::extend","value":"pub fn extend(Self, f32) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` from `self` and the given `w` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` from `self` and the given `w` value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118020,"byte_end":118081,"line_start":193,"line_end":193,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118086,"byte_end":118095,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118489,"byte_end":118497,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec3>::truncate","value":"pub fn truncate(Self) -> Vec2","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Vec2` from the first three elements of `self`,\n removing `z`.\n","sig":null,"attributes":[{"value":"/ Creates a `Vec2` from the first three elements of `self`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118380,"byte_end":118441,"line_start":209,"line_end":209,"column_start":5,"column_end":66}},{"value":"/ removing `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118446,"byte_end":118463,"line_start":210,"line_end":210,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118468,"byte_end":118477,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118772,"byte_end":118773,"line_start":227,"line_end":227,"column_start":12,"column_end":13},"name":"x","qualname":"<Vec3>::x","value":"pub fn x(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `x`.\n","sig":null,"attributes":[{"value":"/ Returns element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118722,"byte_end":118746,"line_start":225,"line_end":225,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118751,"byte_end":118760,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119000,"byte_end":119001,"line_start":241,"line_end":241,"column_start":12,"column_end":13},"name":"y","qualname":"<Vec3>::y","value":"pub fn y(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `y`.\n","sig":null,"attributes":[{"value":"/ Returns element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118950,"byte_end":118974,"line_start":239,"line_end":239,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":118979,"byte_end":118988,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119267,"byte_end":119268,"line_start":255,"line_end":255,"column_start":12,"column_end":13},"name":"z","qualname":"<Vec3>::z","value":"pub fn z(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `z`.\n","sig":null,"attributes":[{"value":"/ Returns element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119217,"byte_end":119241,"line_start":253,"line_end":253,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119246,"byte_end":119255,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119557,"byte_end":119562,"line_start":269,"line_end":269,"column_start":12,"column_end":17},"name":"x_mut","qualname":"<Vec3>::x_mut","value":"pub fn x_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `x`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119484,"byte_end":119531,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119536,"byte_end":119545,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119843,"byte_end":119848,"line_start":283,"line_end":283,"column_start":12,"column_end":17},"name":"y_mut","qualname":"<Vec3>::y_mut","value":"pub fn y_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `y`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119770,"byte_end":119817,"line_start":281,"line_end":281,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":119822,"byte_end":119831,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120139,"byte_end":120144,"line_start":297,"line_end":297,"column_start":12,"column_end":17},"name":"z_mut","qualname":"<Vec3>::z_mut","value":"pub fn z_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `z`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120066,"byte_end":120113,"line_start":295,"line_end":295,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120118,"byte_end":120127,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120409,"byte_end":120414,"line_start":311,"line_end":311,"column_start":12,"column_end":17},"name":"set_x","qualname":"<Vec3>::set_x","value":"pub fn set_x(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `x`.\n","sig":null,"attributes":[{"value":"/ Sets element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120362,"byte_end":120383,"line_start":309,"line_end":309,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120388,"byte_end":120397,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120672,"byte_end":120677,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"set_y","qualname":"<Vec3>::set_y","value":"pub fn set_y(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `y`.\n","sig":null,"attributes":[{"value":"/ Sets element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120625,"byte_end":120646,"line_start":323,"line_end":323,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120651,"byte_end":120660,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":121036,"byte_end":121041,"line_start":341,"line_end":341,"column_start":12,"column_end":17},"name":"set_z","qualname":"<Vec3>::set_z","value":"pub fn set_z(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `z`.\n","sig":null,"attributes":[{"value":"/ Sets element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":120989,"byte_end":121010,"line_start":339,"line_end":339,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":121015,"byte_end":121024,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":122447,"byte_end":122450,"line_start":399,"line_end":399,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vec3>::dot","value":"pub fn dot(Self, Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the dot product of `self` and `other`.\n","sig":null,"attributes":[{"value":"/ Computes the dot product of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":122370,"byte_end":122421,"line_start":397,"line_end":397,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":122426,"byte_end":122435,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":123209,"byte_end":123214,"line_start":429,"line_end":429,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vec3>::cross","value":"pub fn cross(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the cross product of `self` and `other`.\n","sig":null,"attributes":[{"value":"/ Computes the cross product of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":123130,"byte_end":123183,"line_start":427,"line_end":427,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":123188,"byte_end":123197,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124236,"byte_end":124242,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"length","qualname":"<Vec3>::length","value":"pub fn length(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the length of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124176,"byte_end":124210,"line_start":455,"line_end":455,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124215,"byte_end":124224,"line_start":456,"line_end":456,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124640,"byte_end":124654,"line_start":474,"line_end":474,"column_start":12,"column_end":26},"name":"length_squared","qualname":"<Vec3>::length_squared","value":"pub fn length_squared(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared length of `self`.","sig":null,"attributes":[{"value":"/ Computes the squared length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124463,"byte_end":124505,"line_start":469,"line_end":469,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124510,"byte_end":124513,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This is generally faster than `Vec3::length()` as it avoids a square","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124518,"byte_end":124590,"line_start":471,"line_end":471,"column_start":5,"column_end":77}},{"value":"/ root operation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124595,"byte_end":124614,"line_start":472,"line_end":472,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124619,"byte_end":124628,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124838,"byte_end":124855,"line_start":482,"line_end":482,"column_start":12,"column_end":29},"name":"length_reciprocal","qualname":"<Vec3>::length_reciprocal","value":"pub fn length_reciprocal(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes `1.0 / Vec3::length()`.","sig":null,"attributes":[{"value":"/ Computes `1.0 / Vec3::length()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124704,"byte_end":124740,"line_start":478,"line_end":478,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124745,"byte_end":124748,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124753,"byte_end":124812,"line_start":480,"line_end":480,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":124817,"byte_end":124826,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125358,"byte_end":125367,"line_start":502,"line_end":502,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vec3>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns `self` normalized to length 1.0.","sig":null,"attributes":[{"value":"/ Returns `self` normalized to length 1.0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125216,"byte_end":125260,"line_start":498,"line_end":498,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125265,"byte_end":125268,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125273,"byte_end":125332,"line_start":500,"line_end":500,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125337,"byte_end":125346,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125887,"byte_end":125890,"line_start":521,"line_end":521,"column_start":12,"column_end":15},"name":"min","qualname":"<Vec3>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vertical minimum of `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the vertical minimum of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125643,"byte_end":125698,"line_start":515,"line_end":515,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125703,"byte_end":125706,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125711,"byte_end":125744,"line_start":517,"line_end":517,"column_start":5,"column_end":38}},{"value":"/ `[x: min(x1, x2), y: min(y1, y2), z: min(z1, z2)]`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125749,"byte_end":125804,"line_start":518,"line_end":518,"column_start":5,"column_end":60}},{"value":"/ taking the minimum of each element individually.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125809,"byte_end":125861,"line_start":519,"line_end":519,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":125866,"byte_end":125875,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126461,"byte_end":126464,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"name":"max","qualname":"<Vec3>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vertical maximum of `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the vertical maximum of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126217,"byte_end":126272,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126277,"byte_end":126280,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126285,"byte_end":126318,"line_start":539,"line_end":539,"column_start":5,"column_end":38}},{"value":"/ `[x: max(x1, x2), y: max(y1, y2), z: max(z1, z2)]`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126323,"byte_end":126378,"line_start":540,"line_end":540,"column_start":5,"column_end":60}},{"value":"/ taking the maximum of each element individually.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126383,"byte_end":126435,"line_start":541,"line_end":541,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126440,"byte_end":126449,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126935,"byte_end":126946,"line_start":563,"line_end":563,"column_start":12,"column_end":23},"name":"min_element","qualname":"<Vec3>::min_element","value":"pub fn min_element(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the horizontal minimum of `self`'s elements.","sig":null,"attributes":[{"value":"/ Returns the horizontal minimum of `self`'s elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126791,"byte_end":126847,"line_start":559,"line_end":559,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126852,"byte_end":126855,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `min(x, y, z)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126860,"byte_end":126909,"line_start":561,"line_end":561,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":126914,"byte_end":126923,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127458,"byte_end":127469,"line_start":582,"line_end":582,"column_start":12,"column_end":23},"name":"max_element","qualname":"<Vec3>::max_element","value":"pub fn max_element(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the horizontal maximum of `self`'s elements.","sig":null,"attributes":[{"value":"/ Returns the horizontal maximum of `self`'s elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127314,"byte_end":127370,"line_start":578,"line_end":578,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127375,"byte_end":127378,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `max(x, y, z)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127383,"byte_end":127432,"line_start":580,"line_end":580,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127437,"byte_end":127446,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128067,"byte_end":128072,"line_start":602,"line_end":602,"column_start":12,"column_end":17},"name":"cmpeq","qualname":"<Vec3>::cmpeq","value":"pub fn cmpeq(Self, Self) -> Vec3Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `==` comparison between `self` and `other`,\n returning a `Vec3Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `==` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127837,"byte_end":127904,"line_start":597,"line_end":597,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec3Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127909,"byte_end":127951,"line_start":598,"line_end":598,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127956,"byte_end":127959,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 == x2, y1 == y2, z1 == z2, w1 == w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":127964,"byte_end":128041,"line_start":600,"line_end":600,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128046,"byte_end":128055,"line_start":601,"line_end":601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128648,"byte_end":128653,"line_start":623,"line_end":623,"column_start":12,"column_end":17},"name":"cmpne","qualname":"<Vec3>::cmpne","value":"pub fn cmpne(Self, Self) -> Vec3Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `!=` comparison between `self` and `other`,\n returning a `Vec3Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `!=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128418,"byte_end":128485,"line_start":618,"line_end":618,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec3Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128490,"byte_end":128532,"line_start":619,"line_end":619,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128537,"byte_end":128540,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 != x2, y1 != y2, z1 != z2, w1 != w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128545,"byte_end":128622,"line_start":621,"line_end":621,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":128627,"byte_end":128636,"line_start":622,"line_end":622,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129230,"byte_end":129235,"line_start":644,"line_end":644,"column_start":12,"column_end":17},"name":"cmpge","qualname":"<Vec3>::cmpge","value":"pub fn cmpge(Self, Self) -> Vec3Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `>=` comparison between `self` and `other`,\n returning a `Vec3Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `>=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129000,"byte_end":129067,"line_start":639,"line_end":639,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec3Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129072,"byte_end":129114,"line_start":640,"line_end":640,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129119,"byte_end":129122,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 >= x2, y1 >= y2, z1 >= z2, w1 >= w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129127,"byte_end":129204,"line_start":642,"line_end":642,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129209,"byte_end":129218,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129806,"byte_end":129811,"line_start":665,"line_end":665,"column_start":12,"column_end":17},"name":"cmpgt","qualname":"<Vec3>::cmpgt","value":"pub fn cmpgt(Self, Self) -> Vec3Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `>` comparison between `self` and `other`,\n returning a `Vec3Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `>` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129581,"byte_end":129647,"line_start":660,"line_end":660,"column_start":5,"column_end":71}},{"value":"/ returning a `Vec3Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129652,"byte_end":129694,"line_start":661,"line_end":661,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129699,"byte_end":129702,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 > x2, y1 > y2, z1 > z2, w1 > w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129707,"byte_end":129780,"line_start":663,"line_end":663,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":129785,"byte_end":129794,"line_start":664,"line_end":664,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130387,"byte_end":130392,"line_start":686,"line_end":686,"column_start":12,"column_end":17},"name":"cmple","qualname":"<Vec3>::cmple","value":"pub fn cmple(Self, Self) -> Vec3Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `<=` comparison between `self` and `other`,\n returning a `Vec3Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `<=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130157,"byte_end":130224,"line_start":681,"line_end":681,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec3Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130229,"byte_end":130271,"line_start":682,"line_end":682,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130276,"byte_end":130279,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 <= x2, y1 <= y2, z1 <= z2, w1 <= w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130284,"byte_end":130361,"line_start":684,"line_end":684,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130366,"byte_end":130375,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130963,"byte_end":130968,"line_start":707,"line_end":707,"column_start":12,"column_end":17},"name":"cmplt","qualname":"<Vec3>::cmplt","value":"pub fn cmplt(Self, Self) -> Vec3Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `<` comparison between `self` and `other`,\n returning a `Vec3Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `<` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130738,"byte_end":130804,"line_start":702,"line_end":702,"column_start":5,"column_end":71}},{"value":"/ returning a `Vec3Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130809,"byte_end":130851,"line_start":703,"line_end":703,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130856,"byte_end":130859,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 < x2, y1 < y2, z1 < z2, w1 < w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130864,"byte_end":130937,"line_start":705,"line_end":705,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":130942,"byte_end":130951,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131496,"byte_end":131516,"line_start":729,"line_end":729,"column_start":12,"column_end":32},"name":"from_slice_unaligned","qualname":"<Vec3>::from_slice_unaligned","value":"pub fn from_slice_unaligned(&[f32]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` from the first four values in `slice`.","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` from the first four values in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131314,"byte_end":131377,"line_start":723,"line_end":723,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131382,"byte_end":131385,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131390,"byte_end":131402,"line_start":725,"line_end":725,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131407,"byte_end":131410,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` is less than three elements long.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131415,"byte_end":131470,"line_start":727,"line_end":727,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131475,"byte_end":131484,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131793,"byte_end":131817,"line_start":739,"line_end":739,"column_start":12,"column_end":36},"name":"write_to_slice_unaligned","qualname":"<Vec3>::write_to_slice_unaligned","value":"pub fn write_to_slice_unaligned(Self, &mut [f32])","parent":null,"children":[],"decl_id":null,"docs":" Writes the elements of `self` to the first three elements in `slice`.","sig":null,"attributes":[{"value":"/ Writes the elements of `self` to the first three elements in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131601,"byte_end":131674,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131679,"byte_end":131682,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131687,"byte_end":131699,"line_start":735,"line_end":735,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131704,"byte_end":131707,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` is less than three elements long.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131712,"byte_end":131767,"line_start":737,"line_end":737,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":131772,"byte_end":131781,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":132553,"byte_end":132556,"line_start":767,"line_end":767,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vec3>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Vec3` containing the absolute value of each element of the original\n `Vec3`.\n","sig":null,"attributes":[{"value":"/ Returns a new `Vec3` containing the absolute value of each element of the original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":132425,"byte_end":132511,"line_start":764,"line_end":764,"column_start":5,"column_end":91}},{"value":"/ `Vec3`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":132516,"byte_end":132527,"line_start":765,"line_end":765,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":132532,"byte_end":132541,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":132894,"byte_end":132899,"line_start":783,"line_end":783,"column_start":12,"column_end":17},"name":"round","qualname":"<Vec3>::round","value":"pub fn round(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":132873,"byte_end":132882,"line_start":782,"line_end":782,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133200,"byte_end":133205,"line_start":797,"line_end":797,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vec3>::floor","value":"pub fn floor(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133179,"byte_end":133188,"line_start":796,"line_end":796,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133506,"byte_end":133510,"line_start":811,"line_end":811,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vec3>::ceil","value":"pub fn ceil(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133485,"byte_end":133494,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134023,"byte_end":134027,"line_start":829,"line_end":829,"column_start":12,"column_end":16},"name":"sign","qualname":"<Vec3>::sign","value":"pub fn sign(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Vec4` with elements representing the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a new `Vec4` with elements representing the sign of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133785,"byte_end":133856,"line_start":824,"line_end":824,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133861,"byte_end":133864,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133869,"byte_end":133928,"line_start":826,"line_end":826,"column_start":5,"column_end":64}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":133933,"byte_end":133997,"line_start":827,"line_end":827,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134002,"byte_end":134011,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134282,"byte_end":134292,"line_start":837,"line_end":837,"column_start":12,"column_end":22},"name":"reciprocal","qualname":"<Vec3>::reciprocal","value":"pub fn reciprocal(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the reciprocal `1.0/n` of each element, returning the\n results in a new `Vec3`.\n","sig":null,"attributes":[{"value":"/ Computes the reciprocal `1.0/n` of each element, returning the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134157,"byte_end":134223,"line_start":834,"line_end":834,"column_start":5,"column_end":71}},{"value":"/ results in a new `Vec3`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134228,"byte_end":134256,"line_start":835,"line_end":835,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134261,"byte_end":134270,"line_start":836,"line_end":836,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134629,"byte_end":134633,"line_start":848,"line_end":848,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vec3>::lerp","value":"pub fn lerp(Self, Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs a linear interpolation between `self` and `other` based on\n the value `s`.","sig":null,"attributes":[{"value":"/ Performs a linear interpolation between `self` and `other` based on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134373,"byte_end":134444,"line_start":842,"line_end":842,"column_start":5,"column_end":76}},{"value":"/ the value `s`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134449,"byte_end":134467,"line_start":843,"line_end":843,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134472,"byte_end":134475,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ When `s` is `0.0`, the result will be equal to `self`.  When `s`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134480,"byte_end":134548,"line_start":845,"line_end":845,"column_start":5,"column_end":73}},{"value":"/ is `1.0`, the result will be equal to `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134553,"byte_end":134603,"line_start":846,"line_end":846,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134608,"byte_end":134617,"line_start":847,"line_end":847,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134848,"byte_end":134861,"line_start":856,"line_end":856,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Vec3>::is_normalized","value":"pub fn is_normalized(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether `self` of length `1.0` or not.","sig":null,"attributes":[{"value":"/ Returns whether `self` of length `1.0` or not.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134718,"byte_end":134768,"line_start":852,"line_end":852,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134773,"byte_end":134776,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ Uses a precision threshold of `1e-6`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134781,"byte_end":134822,"line_start":854,"line_end":854,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134827,"byte_end":134836,"line_start":855,"line_end":855,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135479,"byte_end":135490,"line_start":870,"line_end":870,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Vec3>::abs_diff_eq","value":"pub fn abs_diff_eq(Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134918,"byte_end":134992,"line_start":860,"line_end":860,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":134997,"byte_end":135053,"line_start":861,"line_end":861,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135058,"byte_end":135061,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Vec3`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135066,"byte_end":135142,"line_start":863,"line_end":863,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135147,"byte_end":135220,"line_start":864,"line_end":864,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135225,"byte_end":135294,"line_start":865,"line_end":865,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135299,"byte_end":135302,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135307,"byte_end":135353,"line_start":867,"line_end":867,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135358,"byte_end":135453,"line_start":868,"line_end":868,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135458,"byte_end":135467,"line_start":869,"line_end":869,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135786,"byte_end":135799,"line_start":879,"line_end":879,"column_start":12,"column_end":25},"name":"angle_between","qualname":"<Vec3>::angle_between","value":"pub fn angle_between(Self, Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the angle between two vectors, in radians.","sig":null,"attributes":[{"value":"/ Returns the angle between two vectors, in radians.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135598,"byte_end":135652,"line_start":874,"line_end":874,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135657,"byte_end":135660,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ The vectors do not need to be unit length, but this function does","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135665,"byte_end":135734,"line_start":876,"line_end":876,"column_start":5,"column_end":74}},{"value":"/ perform a `sqrt`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135739,"byte_end":135760,"line_start":877,"line_end":877,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135765,"byte_end":135774,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1156},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143596,"byte_end":143604,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"Vec3Mask","qualname":"::f32::vec3_mask::Vec3Mask","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional vector mask.","sig":null,"attributes":[{"value":"/ A 3-dimensional vector mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143372,"byte_end":143404,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143405,"byte_end":143408,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type is typically created by comparison methods on `Vec3`.  It is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143409,"byte_end":143483,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ essentially a vector of three boolean values.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143484,"byte_end":143533,"line_start":14,"line_end":14,"column_start":1,"column_end":50}},{"value":"cfg(vec3sse2)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143534,"byte_end":143550,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143574,"byte_end":143584,"line_start":17,"line_end":17,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144832,"byte_end":144835,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec3Mask>::new","value":"pub fn new(bool, bool, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3Mask`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec3Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144777,"byte_end":144806,"line_start":72,"line_end":72,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144811,"byte_end":144820,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145910,"byte_end":145917,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"bitmask","qualname":"<Vec3Mask>::bitmask","value":"pub fn bitmask(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a bitmask with the lowest three bits set from the elements of\n the `Vec3Mask`.","sig":null,"attributes":[{"value":"/ Returns a bitmask with the lowest three bits set from the elements of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145607,"byte_end":145680,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ the `Vec3Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145685,"byte_end":145704,"line_start":97,"line_end":97,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145709,"byte_end":145712,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ A true element results in a `1` bit and a false element in a `0` bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145717,"byte_end":145790,"line_start":99,"line_end":99,"column_start":5,"column_end":78}},{"value":"/ Element `x` goes into the first lowest bit, element `y` into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145795,"byte_end":145863,"line_start":100,"line_end":100,"column_start":5,"column_end":73}},{"value":"/ second, etc.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145868,"byte_end":145884,"line_start":101,"line_end":101,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":145889,"byte_end":145898,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146452,"byte_end":146455,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"any","qualname":"<Vec3Mask>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any of the elements are true, false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if any of the elements are true, false otherwise.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146313,"byte_end":146379,"line_start":118,"line_end":118,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146384,"byte_end":146387,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ In other words: `x || y || z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146392,"byte_end":146426,"line_start":120,"line_end":120,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146431,"byte_end":146440,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146818,"byte_end":146821,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"all","qualname":"<Vec3Mask>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all the elements are true, false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if all the elements are true, false otherwise.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146682,"byte_end":146745,"line_start":134,"line_end":134,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146750,"byte_end":146753,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ In other words: `x && y && z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146758,"byte_end":146792,"line_start":136,"line_end":136,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":146797,"byte_end":146806,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147362,"byte_end":147368,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"select","qualname":"<Vec3Mask>::select","value":"pub fn select(Self, Vec3, Vec3) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec3` from the elements in `if_true` and `if_false`,\n selecting which to use for each element based on the `Vec3Mask`.","sig":null,"attributes":[{"value":"/ Creates a new `Vec3` from the elements in `if_true` and `if_false`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147050,"byte_end":147121,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ selecting which to use for each element based on the `Vec3Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147126,"byte_end":147194,"line_start":151,"line_end":151,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147199,"byte_end":147202,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ A true element in the mask uses the corresponding element from","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147207,"byte_end":147273,"line_start":153,"line_end":153,"column_start":5,"column_end":71}},{"value":"/ `if_true`, and false uses the element from `if_false`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147278,"byte_end":147336,"line_start":154,"line_end":154,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":147341,"byte_end":147350,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1162},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151434,"byte_end":151438,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Vec4","qualname":"::f32::vec4::Vec4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 4-dimensional vector.","sig":null,"attributes":[{"value":"/ A 4-dimensional vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151299,"byte_end":151326,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151327,"byte_end":151330,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This type is 16 byte aligned.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151331,"byte_end":151364,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"cfg(vec4sse2)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151365,"byte_end":151381,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151412,"byte_end":151422,"line_start":28,"line_end":28,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152620,"byte_end":152624,"line_start":89,"line_end":89,"column_start":8,"column_end":12},"name":"vec4","qualname":"::f32::vec4::vec4","value":"pub fn vec4(f32, f32, f32, f32) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152603,"byte_end":152612,"line_start":88,"line_end":88,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152763,"byte_end":152766,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec4>::new","value":"pub fn new(f32, f32, f32, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152712,"byte_end":152737,"line_start":94,"line_end":94,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152742,"byte_end":152751,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153068,"byte_end":153072,"line_start":109,"line_end":109,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vec4>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with all elements set to `0.0`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with all elements set to `0.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152986,"byte_end":153042,"line_start":107,"line_end":107,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153047,"byte_end":153056,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153347,"byte_end":153350,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"one","qualname":"<Vec4>::one","value":"pub fn one() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with all elements set to `1.0`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with all elements set to `1.0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153265,"byte_end":153321,"line_start":121,"line_end":121,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153326,"byte_end":153335,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153641,"byte_end":153647,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"unit_x","qualname":"<Vec4>::unit_x","value":"pub fn unit_x() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with values `[x: 1.0, y: 0.0, z: 0.0, w: 0.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with values `[x: 1.0, y: 0.0, z: 0.0, w: 0.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153543,"byte_end":153615,"line_start":135,"line_end":135,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153620,"byte_end":153629,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153952,"byte_end":153958,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"name":"unit_y","qualname":"<Vec4>::unit_y","value":"pub fn unit_y() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with values `[x: 0.0, y: 1.0, z: 0.0, w: 0.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with values `[x: 0.0, y: 1.0, z: 0.0, w: 0.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153854,"byte_end":153926,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":153931,"byte_end":153940,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154263,"byte_end":154269,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"unit_z","qualname":"<Vec4>::unit_z","value":"pub fn unit_z() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with values `[x: 0.0, y: 0.0, z: 1.0, w: 0.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with values `[x: 0.0, y: 0.0, z: 1.0, w: 0.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154165,"byte_end":154237,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154242,"byte_end":154251,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154574,"byte_end":154580,"line_start":179,"line_end":179,"column_start":12,"column_end":18},"name":"unit_w","qualname":"<Vec4>::unit_w","value":"pub fn unit_w() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with values `[x: 0.0, y: 0.0, z: 0.0, w: 1.0]`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with values `[x: 0.0, y: 0.0, z: 0.0, w: 1.0]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154476,"byte_end":154548,"line_start":177,"line_end":177,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154553,"byte_end":154562,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154867,"byte_end":154872,"line_start":193,"line_end":193,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vec4>::splat","value":"pub fn splat(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` with all elements set to `v`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` with all elements set to `v`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154787,"byte_end":154841,"line_start":191,"line_end":191,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":154846,"byte_end":154855,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155170,"byte_end":155178,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec4>::truncate","value":"pub fn truncate(Self) -> Vec3","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Vec3` from the first three elements of `self`,\n removing `w`.\n","sig":null,"attributes":[{"value":"/ Creates a `Vec3` from the first three elements of `self`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155061,"byte_end":155122,"line_start":205,"line_end":205,"column_start":5,"column_end":66}},{"value":"/ removing `w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155127,"byte_end":155144,"line_start":206,"line_end":206,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155149,"byte_end":155158,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155574,"byte_end":155575,"line_start":228,"line_end":228,"column_start":12,"column_end":13},"name":"x","qualname":"<Vec4>::x","value":"pub fn x(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `x`.\n","sig":null,"attributes":[{"value":"/ Returns element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155524,"byte_end":155548,"line_start":226,"line_end":226,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155553,"byte_end":155562,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155802,"byte_end":155803,"line_start":242,"line_end":242,"column_start":12,"column_end":13},"name":"y","qualname":"<Vec4>::y","value":"pub fn y(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `y`.\n","sig":null,"attributes":[{"value":"/ Returns element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155752,"byte_end":155776,"line_start":240,"line_end":240,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":155781,"byte_end":155790,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156069,"byte_end":156070,"line_start":256,"line_end":256,"column_start":12,"column_end":13},"name":"z","qualname":"<Vec4>::z","value":"pub fn z(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `z`.\n","sig":null,"attributes":[{"value":"/ Returns element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156019,"byte_end":156043,"line_start":254,"line_end":254,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156048,"byte_end":156057,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156336,"byte_end":156337,"line_start":270,"line_end":270,"column_start":12,"column_end":13},"name":"w","qualname":"<Vec4>::w","value":"pub fn w(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns element `w`.\n","sig":null,"attributes":[{"value":"/ Returns element `w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156286,"byte_end":156310,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156315,"byte_end":156324,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156626,"byte_end":156631,"line_start":284,"line_end":284,"column_start":12,"column_end":17},"name":"x_mut","qualname":"<Vec4>::x_mut","value":"pub fn x_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `x`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156553,"byte_end":156600,"line_start":282,"line_end":282,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156605,"byte_end":156614,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156912,"byte_end":156917,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"y_mut","qualname":"<Vec4>::y_mut","value":"pub fn y_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `y`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156839,"byte_end":156886,"line_start":296,"line_end":296,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":156891,"byte_end":156900,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157208,"byte_end":157213,"line_start":312,"line_end":312,"column_start":12,"column_end":17},"name":"z_mut","qualname":"<Vec4>::z_mut","value":"pub fn z_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `z`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157135,"byte_end":157182,"line_start":310,"line_end":310,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157187,"byte_end":157196,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157504,"byte_end":157509,"line_start":326,"line_end":326,"column_start":12,"column_end":17},"name":"w_mut","qualname":"<Vec4>::w_mut","value":"pub fn w_mut(&mut Self) -> &mut f32","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to element `w`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to element `w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157431,"byte_end":157478,"line_start":324,"line_end":324,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157483,"byte_end":157492,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157774,"byte_end":157779,"line_start":340,"line_end":340,"column_start":12,"column_end":17},"name":"set_x","qualname":"<Vec4>::set_x","value":"pub fn set_x(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `x`.\n","sig":null,"attributes":[{"value":"/ Sets element `x`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157727,"byte_end":157748,"line_start":338,"line_end":338,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157753,"byte_end":157762,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158037,"byte_end":158042,"line_start":354,"line_end":354,"column_start":12,"column_end":17},"name":"set_y","qualname":"<Vec4>::set_y","value":"pub fn set_y(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `y`.\n","sig":null,"attributes":[{"value":"/ Sets element `y`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":157990,"byte_end":158011,"line_start":352,"line_end":352,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158016,"byte_end":158025,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158401,"byte_end":158406,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"set_z","qualname":"<Vec4>::set_z","value":"pub fn set_z(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `z`.\n","sig":null,"attributes":[{"value":"/ Sets element `z`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158354,"byte_end":158375,"line_start":368,"line_end":368,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158380,"byte_end":158389,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158765,"byte_end":158770,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"name":"set_w","qualname":"<Vec4>::set_w","value":"pub fn set_w(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets element `w`.\n","sig":null,"attributes":[{"value":"/ Sets element `w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158718,"byte_end":158739,"line_start":384,"line_end":384,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":158744,"byte_end":158753,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161355,"byte_end":161358,"line_start":479,"line_end":479,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vec4>::dot","value":"pub fn dot(Self, Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the 4D dot product of `self` and `other`.\n","sig":null,"attributes":[{"value":"/ Computes the 4D dot product of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161275,"byte_end":161329,"line_start":477,"line_end":477,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161334,"byte_end":161343,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161703,"byte_end":161709,"line_start":493,"line_end":493,"column_start":12,"column_end":18},"name":"length","qualname":"<Vec4>::length","value":"pub fn length(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the 4D length of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the 4D length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161640,"byte_end":161677,"line_start":491,"line_end":491,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161682,"byte_end":161691,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162143,"byte_end":162157,"line_start":511,"line_end":511,"column_start":12,"column_end":26},"name":"length_squared","qualname":"<Vec4>::length_squared","value":"pub fn length_squared(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared 4D length of `self`.","sig":null,"attributes":[{"value":"/ Computes the squared 4D length of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":161963,"byte_end":162008,"line_start":506,"line_end":506,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162013,"byte_end":162016,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This is generally faster than `Vec4::length()` as it avoids a square","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162021,"byte_end":162093,"line_start":508,"line_end":508,"column_start":5,"column_end":77}},{"value":"/ root operation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162098,"byte_end":162117,"line_start":509,"line_end":509,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162122,"byte_end":162131,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162341,"byte_end":162358,"line_start":519,"line_end":519,"column_start":12,"column_end":29},"name":"length_reciprocal","qualname":"<Vec4>::length_reciprocal","value":"pub fn length_reciprocal(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Computes `1.0 / Vec4::length()`.","sig":null,"attributes":[{"value":"/ Computes `1.0 / Vec4::length()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162207,"byte_end":162243,"line_start":515,"line_end":515,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162248,"byte_end":162251,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162256,"byte_end":162315,"line_start":517,"line_end":517,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162320,"byte_end":162329,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162861,"byte_end":162870,"line_start":539,"line_end":539,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vec4>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns `self` normalized to length 1.0.","sig":null,"attributes":[{"value":"/ Returns `self` normalized to length 1.0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162719,"byte_end":162763,"line_start":535,"line_end":535,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162768,"byte_end":162771,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ For valid results, `self` must _not_ be of length zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162776,"byte_end":162835,"line_start":537,"line_end":537,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":162840,"byte_end":162849,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163406,"byte_end":163409,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"min","qualname":"<Vec4>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vertical minimum of `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the vertical minimum of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163146,"byte_end":163201,"line_start":552,"line_end":552,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163206,"byte_end":163209,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163214,"byte_end":163247,"line_start":554,"line_end":554,"column_start":5,"column_end":38}},{"value":"/ `[x: min(x1, x2), y: min(y1, y2), z: min(z1, z2), w: min(w1, w2)]`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163252,"byte_end":163323,"line_start":555,"line_end":555,"column_start":5,"column_end":76}},{"value":"/ taking the minimum of each element individually.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163328,"byte_end":163380,"line_start":556,"line_end":556,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163385,"byte_end":163394,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164033,"byte_end":164036,"line_start":581,"line_end":581,"column_start":12,"column_end":15},"name":"max","qualname":"<Vec4>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vertical maximum of `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the vertical maximum of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163773,"byte_end":163828,"line_start":575,"line_end":575,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163833,"byte_end":163836,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163841,"byte_end":163874,"line_start":577,"line_end":577,"column_start":5,"column_end":38}},{"value":"/ `[x: max(x1, x2), y: max(y1, y2), z: max(z1, z2), w: max(w1, w2)]`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163879,"byte_end":163950,"line_start":578,"line_end":578,"column_start":5,"column_end":76}},{"value":"/ taking the maximum of each element individually.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":163955,"byte_end":164007,"line_start":579,"line_end":579,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164012,"byte_end":164021,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164547,"byte_end":164558,"line_start":602,"line_end":602,"column_start":12,"column_end":23},"name":"min_element","qualname":"<Vec4>::min_element","value":"pub fn min_element(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the horizontal minimum of `self`'s elements.","sig":null,"attributes":[{"value":"/ Returns the horizontal minimum of `self`'s elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164400,"byte_end":164456,"line_start":598,"line_end":598,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164461,"byte_end":164464,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `min(x, y, z, w)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164469,"byte_end":164521,"line_start":600,"line_end":600,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164526,"byte_end":164535,"line_start":601,"line_end":601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165085,"byte_end":165096,"line_start":621,"line_end":621,"column_start":12,"column_end":23},"name":"max_element","qualname":"<Vec4>::max_element","value":"pub fn max_element(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the horizontal maximum of `self`'s elements.","sig":null,"attributes":[{"value":"/ Returns the horizontal maximum of `self`'s elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164938,"byte_end":164994,"line_start":617,"line_end":617,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":164999,"byte_end":165002,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `max(x, y, z, w)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165007,"byte_end":165059,"line_start":619,"line_end":619,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165064,"byte_end":165073,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165706,"byte_end":165711,"line_start":641,"line_end":641,"column_start":12,"column_end":17},"name":"cmpeq","qualname":"<Vec4>::cmpeq","value":"pub fn cmpeq(Self, Self) -> Vec4Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `==` comparison between `self` and `other`,\n returning a `Vec4Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `==` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165476,"byte_end":165543,"line_start":636,"line_end":636,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec4Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165548,"byte_end":165590,"line_start":637,"line_end":637,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165595,"byte_end":165598,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 == x2, y1 == y2, z1 == z2, w1 == w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165603,"byte_end":165680,"line_start":639,"line_end":639,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":165685,"byte_end":165694,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166324,"byte_end":166329,"line_start":663,"line_end":663,"column_start":12,"column_end":17},"name":"cmpne","qualname":"<Vec4>::cmpne","value":"pub fn cmpne(Self, Self) -> Vec4Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `!=` comparison between `self` and `other`,\n returning a `Vec4Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `!=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166094,"byte_end":166161,"line_start":658,"line_end":658,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec4Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166166,"byte_end":166208,"line_start":659,"line_end":659,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166213,"byte_end":166216,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 != x2, y1 != y2, z1 != z2, w1 != w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166221,"byte_end":166298,"line_start":661,"line_end":661,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166303,"byte_end":166312,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166943,"byte_end":166948,"line_start":685,"line_end":685,"column_start":12,"column_end":17},"name":"cmpge","qualname":"<Vec4>::cmpge","value":"pub fn cmpge(Self, Self) -> Vec4Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `>=` comparison between `self` and `other`,\n returning a `Vec4Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `>=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166713,"byte_end":166780,"line_start":680,"line_end":680,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec4Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166785,"byte_end":166827,"line_start":681,"line_end":681,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166832,"byte_end":166835,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 >= x2, y1 >= y2, z1 >= z2, w1 >= w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166840,"byte_end":166917,"line_start":683,"line_end":683,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":166922,"byte_end":166931,"line_start":684,"line_end":684,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167556,"byte_end":167561,"line_start":707,"line_end":707,"column_start":12,"column_end":17},"name":"cmpgt","qualname":"<Vec4>::cmpgt","value":"pub fn cmpgt(Self, Self) -> Vec4Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `>` comparison between `self` and `other`,\n returning a `Vec4Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `>` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167331,"byte_end":167397,"line_start":702,"line_end":702,"column_start":5,"column_end":71}},{"value":"/ returning a `Vec4Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167402,"byte_end":167444,"line_start":703,"line_end":703,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167449,"byte_end":167452,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 > x2, y1 > y2, z1 > z2, w1 > w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167457,"byte_end":167530,"line_start":705,"line_end":705,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167535,"byte_end":167544,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168174,"byte_end":168179,"line_start":729,"line_end":729,"column_start":12,"column_end":17},"name":"cmple","qualname":"<Vec4>::cmple","value":"pub fn cmple(Self, Self) -> Vec4Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `<=` comparison between `self` and `other`,\n returning a `Vec4Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `<=` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":167944,"byte_end":168011,"line_start":724,"line_end":724,"column_start":5,"column_end":72}},{"value":"/ returning a `Vec4Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168016,"byte_end":168058,"line_start":725,"line_end":725,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168063,"byte_end":168066,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 <= x2, y1 <= y2, z1 <= z2, w1 <= w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168071,"byte_end":168148,"line_start":727,"line_end":727,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168153,"byte_end":168162,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168787,"byte_end":168792,"line_start":751,"line_end":751,"column_start":12,"column_end":17},"name":"cmplt","qualname":"<Vec4>::cmplt","value":"pub fn cmplt(Self, Self) -> Vec4Mask","parent":null,"children":[],"decl_id":null,"docs":" Performs a vertical `<` comparison between `self` and `other`,\n returning a `Vec4Mask` of the results.","sig":null,"attributes":[{"value":"/ Performs a vertical `<` comparison between `self` and `other`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168562,"byte_end":168628,"line_start":746,"line_end":746,"column_start":5,"column_end":71}},{"value":"/ returning a `Vec4Mask` of the results.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168633,"byte_end":168675,"line_start":747,"line_end":747,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168680,"byte_end":168683,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ In other words, this computes `[x1 < x2, y1 < y2, z1 < z2, w1 < w2]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168688,"byte_end":168761,"line_start":749,"line_end":749,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":168766,"byte_end":168775,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169356,"byte_end":169376,"line_start":774,"line_end":774,"column_start":12,"column_end":32},"name":"from_slice_unaligned","qualname":"<Vec4>::from_slice_unaligned","value":"pub fn from_slice_unaligned(&[f32]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` from the first four values in `slice`.","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` from the first four values in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169175,"byte_end":169238,"line_start":768,"line_end":768,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169243,"byte_end":169246,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169251,"byte_end":169263,"line_start":770,"line_end":770,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169268,"byte_end":169271,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` is less than four elements long.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169276,"byte_end":169330,"line_start":772,"line_end":772,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169335,"byte_end":169344,"line_start":773,"line_end":773,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169847,"byte_end":169871,"line_start":793,"line_end":793,"column_start":12,"column_end":36},"name":"write_to_slice_unaligned","qualname":"<Vec4>::write_to_slice_unaligned","value":"pub fn write_to_slice_unaligned(Self, &mut [f32])","parent":null,"children":[],"decl_id":null,"docs":" Writes the elements of `self` to the first four elements in `slice`.","sig":null,"attributes":[{"value":"/ Writes the elements of `self` to the first four elements in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169657,"byte_end":169729,"line_start":787,"line_end":787,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169734,"byte_end":169737,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169742,"byte_end":169754,"line_start":789,"line_end":789,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169759,"byte_end":169762,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ Panics if `slice` is less than four elements long.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169767,"byte_end":169821,"line_start":791,"line_end":791,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":169826,"byte_end":169835,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":170854,"byte_end":170857,"line_start":831,"line_end":831,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vec4>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Vec4` containing the absolute value of each element of the original\n `Vec4`.\n","sig":null,"attributes":[{"value":"/ Returns a new `Vec4` containing the absolute value of each element of the original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":170726,"byte_end":170812,"line_start":828,"line_end":828,"column_start":5,"column_end":91}},{"value":"/ `Vec4`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":170817,"byte_end":170828,"line_start":829,"line_end":829,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":170833,"byte_end":170842,"line_start":830,"line_end":830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":171209,"byte_end":171214,"line_start":847,"line_end":847,"column_start":12,"column_end":17},"name":"round","qualname":"<Vec4>::round","value":"pub fn round(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":171188,"byte_end":171197,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":171610,"byte_end":171615,"line_start":866,"line_end":866,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vec4>::floor","value":"pub fn floor(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":171589,"byte_end":171598,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172011,"byte_end":172015,"line_start":885,"line_end":885,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vec4>::ceil","value":"pub fn ceil(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":171990,"byte_end":171999,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172543,"byte_end":172547,"line_start":903,"line_end":903,"column_start":12,"column_end":16},"name":"sign","qualname":"<Vec4>::sign","value":"pub fn sign(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Vec4` with elements representing the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a new `Vec4` with elements representing the sign of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172305,"byte_end":172376,"line_start":898,"line_end":898,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172381,"byte_end":172384,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172389,"byte_end":172448,"line_start":900,"line_end":900,"column_start":5,"column_end":64}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172453,"byte_end":172517,"line_start":901,"line_end":901,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172522,"byte_end":172531,"line_start":902,"line_end":902,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173064,"byte_end":173074,"line_start":924,"line_end":924,"column_start":12,"column_end":22},"name":"reciprocal","qualname":"<Vec4>::reciprocal","value":"pub fn reciprocal(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the reciprocal `1.0/n` of each element, returning the\n results in a new `Vec4`.\n","sig":null,"attributes":[{"value":"/ Computes the reciprocal `1.0/n` of each element, returning the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":172939,"byte_end":173005,"line_start":921,"line_end":921,"column_start":5,"column_end":71}},{"value":"/ results in a new `Vec4`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173010,"byte_end":173038,"line_start":922,"line_end":922,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173043,"byte_end":173052,"line_start":923,"line_end":923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173411,"byte_end":173415,"line_start":935,"line_end":935,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vec4>::lerp","value":"pub fn lerp(Self, Self, f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs a linear interpolation between `self` and `other` based on\n the value `s`.","sig":null,"attributes":[{"value":"/ Performs a linear interpolation between `self` and `other` based on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173155,"byte_end":173226,"line_start":929,"line_end":929,"column_start":5,"column_end":76}},{"value":"/ the value `s`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173231,"byte_end":173249,"line_start":930,"line_end":930,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173254,"byte_end":173257,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ When `s` is `0.0`, the result will be equal to `self`.  When `s`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173262,"byte_end":173330,"line_start":932,"line_end":932,"column_start":5,"column_end":73}},{"value":"/ is `1.0`, the result will be equal to `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173335,"byte_end":173385,"line_start":933,"line_end":933,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173390,"byte_end":173399,"line_start":934,"line_end":934,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173630,"byte_end":173643,"line_start":943,"line_end":943,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Vec4>::is_normalized","value":"pub fn is_normalized(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether `self` is length `1.0` or not.","sig":null,"attributes":[{"value":"/ Returns whether `self` is length `1.0` or not.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173500,"byte_end":173550,"line_start":939,"line_end":939,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173555,"byte_end":173558,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ Uses a precision threshold of `1e-6`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173563,"byte_end":173604,"line_start":941,"line_end":941,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173609,"byte_end":173618,"line_start":942,"line_end":942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174261,"byte_end":174272,"line_start":957,"line_end":957,"column_start":12,"column_end":23},"name":"abs_diff_eq","qualname":"<Vec4>::abs_diff_eq","value":"pub fn abs_diff_eq(Self, Self, f32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the absolute difference of all elements between `self`\n and `other` is less than or equal to `max_abs_diff`.","sig":null,"attributes":[{"value":"/ Returns true if the absolute difference of all elements between `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173700,"byte_end":173774,"line_start":947,"line_end":947,"column_start":5,"column_end":79}},{"value":"/ and `other` is less than or equal to `max_abs_diff`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173779,"byte_end":173835,"line_start":948,"line_end":948,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173840,"byte_end":173843,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ This can be used to compare if two `Vec4`'s contain similar elements. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173848,"byte_end":173924,"line_start":950,"line_end":950,"column_start":5,"column_end":81}},{"value":"/ works best when comparing with a known value. The `max_abs_diff` that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":173929,"byte_end":174002,"line_start":951,"line_end":951,"column_start":5,"column_end":78}},{"value":"/ should be used used depends on the values being compared against.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174007,"byte_end":174076,"line_start":952,"line_end":952,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174081,"byte_end":174084,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ For more on floating point comparisons see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174089,"byte_end":174135,"line_start":954,"line_end":954,"column_start":5,"column_end":51}},{"value":"/ https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174140,"byte_end":174235,"line_start":955,"line_end":955,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174240,"byte_end":174249,"line_start":956,"line_end":956,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1170},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183115,"byte_end":183123,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"Vec4Mask","qualname":"::f32::vec4_mask::Vec4Mask","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 4-dimensional vector mask.","sig":null,"attributes":[{"value":"/ A 4-dimensional vector mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":182892,"byte_end":182924,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":182925,"byte_end":182928,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type is typically created by comparison methods on `Vec4`.  It is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":182929,"byte_end":183003,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ essentially a vector of four boolean values.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183004,"byte_end":183052,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"cfg(vec4sse2)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183053,"byte_end":183069,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183093,"byte_end":183103,"line_start":17,"line_end":17,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184210,"byte_end":184213,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec4Mask>::new","value":"pub fn new(bool, bool, bool, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4Mask`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Vec4Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184155,"byte_end":184184,"line_start":70,"line_end":70,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184189,"byte_end":184198,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185393,"byte_end":185400,"line_start":106,"line_end":106,"column_start":12,"column_end":19},"name":"bitmask","qualname":"<Vec4Mask>::bitmask","value":"pub fn bitmask(Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a bitmask with the lowest four bits set from the elements of\n the `Vec4Mask`.","sig":null,"attributes":[{"value":"/ Returns a bitmask with the lowest four bits set from the elements of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185091,"byte_end":185163,"line_start":99,"line_end":99,"column_start":5,"column_end":77}},{"value":"/ the `Vec4Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185168,"byte_end":185187,"line_start":100,"line_end":100,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185192,"byte_end":185195,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ A true element results in a `1` bit and a false element in a `0` bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185200,"byte_end":185273,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/ Element `x` goes into the first lowest bit, element `y` into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185278,"byte_end":185346,"line_start":103,"line_end":103,"column_start":5,"column_end":73}},{"value":"/ second, etc.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185351,"byte_end":185367,"line_start":104,"line_end":104,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185372,"byte_end":185381,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185953,"byte_end":185956,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"any","qualname":"<Vec4Mask>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any of the elements are true, false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if any of the elements are true, false otherwise.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185809,"byte_end":185875,"line_start":121,"line_end":121,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185880,"byte_end":185883,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ In other words: `x || y || z || w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185888,"byte_end":185927,"line_start":123,"line_end":123,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":185932,"byte_end":185941,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186324,"byte_end":186327,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"all","qualname":"<Vec4Mask>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all the elements are true, false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if all the elements are true, false otherwise.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186183,"byte_end":186246,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186251,"byte_end":186254,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ In other words: `x && y && z && w`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186259,"byte_end":186298,"line_start":139,"line_end":139,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186303,"byte_end":186312,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186868,"byte_end":186874,"line_start":159,"line_end":159,"column_start":12,"column_end":18},"name":"select","qualname":"<Vec4Mask>::select","value":"pub fn select(Self, Vec4, Vec4) -> Vec4","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Vec4` from the elements in `if_true` and `if_false`,\n selecting which to use for each element based on the `Vec4Mask`.","sig":null,"attributes":[{"value":"/ Creates a new `Vec4` from the elements in `if_true` and `if_false`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186556,"byte_end":186627,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ selecting which to use for each element based on the `Vec4Mask`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186632,"byte_end":186700,"line_start":154,"line_end":154,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186705,"byte_end":186708,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ A true element in the mask uses the corresponding element from","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186713,"byte_end":186779,"line_start":156,"line_end":156,"column_start":5,"column_end":71}},{"value":"/ `if_true`, and false uses the element from `if_false`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186784,"byte_end":186842,"line_start":157,"line_end":157,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":186847,"byte_end":186856,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25782,"byte_end":25786,"line_start":21,"line_end":21,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25886,"byte_end":25890,"line_start":28,"line_end":28,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26026,"byte_end":26030,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33411,"byte_end":33415,"line_start":275,"line_end":275,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33564,"byte_end":33568,"line_start":282,"line_end":282,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33719,"byte_end":33723,"line_start":289,"line_end":289,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33862,"byte_end":33866,"line_start":297,"line_end":297,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":34005,"byte_end":34009,"line_start":305,"line_end":305,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":34148,"byte_end":34152,"line_start":313,"line_end":313,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":34432,"byte_end":34436,"line_start":329,"line_end":329,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35675,"byte_end":35679,"line_start":50,"line_end":50,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35779,"byte_end":35783,"line_start":57,"line_end":57,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35932,"byte_end":35936,"line_start":63,"line_end":63,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48129,"byte_end":48133,"line_start":436,"line_end":436,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48272,"byte_end":48276,"line_start":444,"line_end":444,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48415,"byte_end":48419,"line_start":452,"line_end":452,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48558,"byte_end":48562,"line_start":460,"line_end":460,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48842,"byte_end":48846,"line_start":476,"line_end":476,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50305,"byte_end":50309,"line_start":56,"line_end":56,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50409,"byte_end":50413,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50625,"byte_end":50629,"line_start":73,"line_end":73,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76188,"byte_end":76192,"line_start":826,"line_end":826,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76344,"byte_end":76348,"line_start":833,"line_end":833,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76501,"byte_end":76505,"line_start":840,"line_end":840,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76644,"byte_end":76648,"line_start":848,"line_end":848,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76787,"byte_end":76791,"line_start":856,"line_end":856,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76930,"byte_end":76934,"line_start":864,"line_end":864,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":77214,"byte_end":77218,"line_start":880,"line_end":880,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78067,"byte_end":78071,"line_start":28,"line_end":28,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94981,"byte_end":94985,"line_start":520,"line_end":520,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95440,"byte_end":95444,"line_start":539,"line_end":539,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95630,"byte_end":95634,"line_start":546,"line_end":546,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95778,"byte_end":95782,"line_start":554,"line_end":554,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95909,"byte_end":95913,"line_start":561,"line_end":561,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96045,"byte_end":96049,"line_start":569,"line_end":569,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96171,"byte_end":96175,"line_start":577,"line_end":577,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96272,"byte_end":96276,"line_start":584,"line_end":584,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96399,"byte_end":96403,"line_start":591,"line_end":591,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96566,"byte_end":96570,"line_start":598,"line_end":598,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96681,"byte_end":96685,"line_start":605,"line_end":605,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96799,"byte_end":96803,"line_start":612,"line_end":612,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96896,"byte_end":96900,"line_start":619,"line_end":619,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97005,"byte_end":97009,"line_start":626,"line_end":626,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97266,"byte_end":97270,"line_start":640,"line_end":640,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97495,"byte_end":97501,"line_start":655,"line_end":655,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97670,"byte_end":97674,"line_start":665,"line_end":665,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98042,"byte_end":98046,"line_start":14,"line_end":14,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107282,"byte_end":107286,"line_start":336,"line_end":336,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107422,"byte_end":107426,"line_start":342,"line_end":342,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107590,"byte_end":107594,"line_start":350,"line_end":350,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107736,"byte_end":107740,"line_start":358,"line_end":358,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107898,"byte_end":107902,"line_start":366,"line_end":366,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108040,"byte_end":108044,"line_start":374,"line_end":374,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108208,"byte_end":108212,"line_start":382,"line_end":382,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108354,"byte_end":108358,"line_start":390,"line_end":390,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108516,"byte_end":108520,"line_start":398,"line_end":398,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108809,"byte_end":108813,"line_start":414,"line_end":414,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108971,"byte_end":108975,"line_start":422,"line_end":422,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109112,"byte_end":109116,"line_start":430,"line_end":430,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109274,"byte_end":109278,"line_start":438,"line_end":438,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109415,"byte_end":109419,"line_start":446,"line_end":446,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109552,"byte_end":109556,"line_start":454,"line_end":454,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109705,"byte_end":109709,"line_start":461,"line_end":461,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109863,"byte_end":109867,"line_start":468,"line_end":468,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":110024,"byte_end":110028,"line_start":476,"line_end":476,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":110179,"byte_end":110183,"line_start":483,"line_end":483,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":110399,"byte_end":110403,"line_start":497,"line_end":497,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110859,"byte_end":110867,"line_start":11,"line_end":11,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112510,"byte_end":112518,"line_start":62,"line_end":62,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112682,"byte_end":112690,"line_start":70,"line_end":70,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112832,"byte_end":112840,"line_start":78,"line_end":78,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113002,"byte_end":113010,"line_start":86,"line_end":86,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113149,"byte_end":113157,"line_start":94,"line_end":94,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113285,"byte_end":113293,"line_start":102,"line_end":102,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113450,"byte_end":113458,"line_start":108,"line_end":108,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113735,"byte_end":113743,"line_start":121,"line_end":121,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114745,"byte_end":114749,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115262,"byte_end":115266,"line_start":48,"line_end":48,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115376,"byte_end":115380,"line_start":56,"line_end":56,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115517,"byte_end":115521,"line_start":64,"line_end":64,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115696,"byte_end":115702,"line_start":72,"line_end":72,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115867,"byte_end":115871,"line_start":82,"line_end":82,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116033,"byte_end":116037,"line_start":94,"line_end":94,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135963,"byte_end":135967,"line_start":884,"line_end":884,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136116,"byte_end":136120,"line_start":891,"line_end":891,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136274,"byte_end":136278,"line_start":898,"line_end":898,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136611,"byte_end":136615,"line_start":913,"line_end":913,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136944,"byte_end":136948,"line_start":929,"line_end":929,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":137280,"byte_end":137284,"line_start":946,"line_end":946,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":137616,"byte_end":137620,"line_start":962,"line_end":962,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":137957,"byte_end":137961,"line_start":979,"line_end":979,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":138290,"byte_end":138294,"line_start":995,"line_end":995,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":138626,"byte_end":138630,"line_start":1012,"line_end":1012,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":138962,"byte_end":138966,"line_start":1028,"line_end":1028,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":139628,"byte_end":139632,"line_start":1061,"line_end":1061,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":139955,"byte_end":139959,"line_start":1077,"line_end":1077,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":140286,"byte_end":140290,"line_start":1094,"line_end":1094,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":140613,"byte_end":140617,"line_start":1110,"line_end":1110,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":140944,"byte_end":140948,"line_start":1127,"line_end":1127,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":141243,"byte_end":141247,"line_start":1143,"line_end":1143,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":141404,"byte_end":141408,"line_start":1151,"line_end":1151,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":141564,"byte_end":141568,"line_start":1158,"line_end":1158,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":142187,"byte_end":142191,"line_start":1185,"line_end":1185,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143986,"byte_end":143994,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144125,"byte_end":144133,"line_start":37,"line_end":37,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144270,"byte_end":144278,"line_start":45,"line_end":45,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144313,"byte_end":144321,"line_start":48,"line_end":48,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144472,"byte_end":144480,"line_start":56,"line_end":56,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144635,"byte_end":144643,"line_start":64,"line_end":64,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144762,"byte_end":144770,"line_start":71,"line_end":71,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":148045,"byte_end":148053,"line_start":179,"line_end":179,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":148382,"byte_end":148390,"line_start":195,"line_end":195,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":148722,"byte_end":148730,"line_start":212,"line_end":212,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":149056,"byte_end":149064,"line_start":228,"line_end":228,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":149392,"byte_end":149400,"line_start":245,"line_end":245,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":149769,"byte_end":149777,"line_start":264,"line_end":264,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":150159,"byte_end":150167,"line_start":279,"line_end":279,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":150493,"byte_end":150501,"line_start":293,"line_end":293,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151919,"byte_end":151923,"line_start":47,"line_end":47,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152033,"byte_end":152037,"line_start":55,"line_end":55,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152174,"byte_end":152178,"line_start":63,"line_end":63,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152353,"byte_end":152359,"line_start":71,"line_end":71,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152524,"byte_end":152528,"line_start":81,"line_end":81,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152701,"byte_end":152705,"line_start":93,"line_end":93,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174403,"byte_end":174407,"line_start":962,"line_end":962,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174556,"byte_end":174560,"line_start":969,"line_end":969,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174714,"byte_end":174718,"line_start":976,"line_end":976,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":175079,"byte_end":175083,"line_start":991,"line_end":991,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":175509,"byte_end":175513,"line_start":1012,"line_end":1012,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":175876,"byte_end":175880,"line_start":1030,"line_end":1030,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":176307,"byte_end":176311,"line_start":1051,"line_end":1051,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":176677,"byte_end":176681,"line_start":1069,"line_end":1069,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":177107,"byte_end":177111,"line_start":1090,"line_end":1090,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":177474,"byte_end":177478,"line_start":1108,"line_end":1108,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":177905,"byte_end":177909,"line_start":1129,"line_end":1129,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":178695,"byte_end":178699,"line_start":1168,"line_end":1168,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":179119,"byte_end":179123,"line_start":1189,"line_end":1189,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":179481,"byte_end":179485,"line_start":1207,"line_end":1207,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":179905,"byte_end":179909,"line_start":1228,"line_end":1228,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180267,"byte_end":180271,"line_start":1246,"line_end":1246,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180575,"byte_end":180579,"line_start":1262,"line_end":1262,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180736,"byte_end":180740,"line_start":1270,"line_end":1270,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180901,"byte_end":180905,"line_start":1277,"line_end":1277,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":181489,"byte_end":181493,"line_start":1303,"line_end":1303,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183364,"byte_end":183372,"line_start":27,"line_end":27,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183503,"byte_end":183511,"line_start":35,"line_end":35,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183648,"byte_end":183656,"line_start":43,"line_end":43,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183691,"byte_end":183699,"line_start":46,"line_end":46,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183850,"byte_end":183858,"line_start":54,"line_end":54,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184013,"byte_end":184021,"line_start":62,"line_end":62,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184140,"byte_end":184148,"line_start":69,"line_end":69,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":187617,"byte_end":187625,"line_start":183,"line_end":183,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":188051,"byte_end":188059,"line_start":204,"line_end":204,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":188422,"byte_end":188430,"line_start":222,"line_end":222,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":188853,"byte_end":188861,"line_start":243,"line_end":243,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":189220,"byte_end":189228,"line_start":261,"line_end":261,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":189606,"byte_end":189614,"line_start":280,"line_end":280,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":190150,"byte_end":190158,"line_start":303,"line_end":303,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":190582,"byte_end":190590,"line_start":324,"line_end":324,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4543,"byte_end":4550,"line_start":145,"line_end":145,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4244,"byte_end":4247,"line_start":132,"line_end":132,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":7}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25782,"byte_end":25786,"line_start":21,"line_end":21,"column_start":18,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":25886,"byte_end":25890,"line_start":28,"line_end":28,"column_start":23,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":26026,"byte_end":26030,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33411,"byte_end":33415,"line_start":275,"line_end":275,"column_start":26,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33564,"byte_end":33568,"line_start":282,"line_end":282,"column_start":26,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33719,"byte_end":33723,"line_start":289,"line_end":289,"column_start":20,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":2110}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":33862,"byte_end":33866,"line_start":297,"line_end":297,"column_start":20,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":2115}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":34005,"byte_end":34009,"line_start":305,"line_end":305,"column_start":20,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":34148,"byte_end":34152,"line_start":313,"line_end":313,"column_start":20,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat2.rs","byte_start":34432,"byte_end":34436,"line_start":329,"line_end":329,"column_start":19,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1009},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35675,"byte_end":35679,"line_start":50,"line_end":50,"column_start":18,"column_end":22},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35779,"byte_end":35783,"line_start":57,"line_end":57,"column_start":23,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":35932,"byte_end":35936,"line_start":63,"line_end":63,"column_start":6,"column_end":10},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48129,"byte_end":48133,"line_start":436,"line_end":436,"column_start":20,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":2110}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48272,"byte_end":48276,"line_start":444,"line_end":444,"column_start":20,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":2115}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48415,"byte_end":48419,"line_start":452,"line_end":452,"column_start":20,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48558,"byte_end":48562,"line_start":460,"line_end":460,"column_start":20,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat3.rs","byte_start":48842,"byte_end":48846,"line_start":476,"line_end":476,"column_start":19,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50305,"byte_end":50309,"line_start":56,"line_end":56,"column_start":18,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50409,"byte_end":50413,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":50625,"byte_end":50629,"line_start":73,"line_end":73,"column_start":6,"column_end":10},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76188,"byte_end":76192,"line_start":826,"line_end":826,"column_start":27,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76344,"byte_end":76348,"line_start":833,"line_end":833,"column_start":27,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76501,"byte_end":76505,"line_start":840,"line_end":840,"column_start":20,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2110}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76644,"byte_end":76648,"line_start":848,"line_end":848,"column_start":20,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2115}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76787,"byte_end":76791,"line_start":856,"line_end":856,"column_start":20,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":76930,"byte_end":76934,"line_start":864,"line_end":864,"column_start":20,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/mat4.rs","byte_start":77214,"byte_end":77218,"line_start":880,"line_end":880,"column_start":19,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":78067,"byte_end":78071,"line_start":28,"line_end":28,"column_start":6,"column_end":10},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":94981,"byte_end":94985,"line_start":520,"line_end":520,"column_start":21,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95440,"byte_end":95444,"line_start":539,"line_end":539,"column_start":23,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95630,"byte_end":95634,"line_start":546,"line_end":546,"column_start":20,"column_end":24},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95778,"byte_end":95782,"line_start":554,"line_end":554,"column_start":26,"column_end":30},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":95909,"byte_end":95913,"line_start":561,"line_end":561,"column_start":20,"column_end":24},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96045,"byte_end":96049,"line_start":569,"line_end":569,"column_start":14,"column_end":18},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96171,"byte_end":96175,"line_start":577,"line_end":577,"column_start":18,"column_end":22},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96272,"byte_end":96276,"line_start":584,"line_end":584,"column_start":20,"column_end":24},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96399,"byte_end":96403,"line_start":591,"line_end":591,"column_start":21,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96566,"byte_end":96570,"line_start":598,"line_end":598,"column_start":26,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96681,"byte_end":96685,"line_start":605,"line_end":605,"column_start":26,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96799,"byte_end":96803,"line_start":612,"line_end":612,"column_start":21,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":96896,"byte_end":96900,"line_start":619,"line_end":619,"column_start":21,"column_end":25},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97005,"byte_end":97009,"line_start":626,"line_end":626,"column_start":37,"column_end":41},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97266,"byte_end":97270,"line_start":640,"line_end":640,"column_start":25,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97495,"byte_end":97501,"line_start":655,"line_end":655,"column_start":21,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":2,"index":37332},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/quat.rs","byte_start":97670,"byte_end":97674,"line_start":665,"line_end":665,"column_start":23,"column_end":27},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":98042,"byte_end":98046,"line_start":14,"line_end":14,"column_start":6,"column_end":10},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107282,"byte_end":107286,"line_start":336,"line_end":336,"column_start":23,"column_end":27},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107422,"byte_end":107426,"line_start":342,"line_end":342,"column_start":20,"column_end":24},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2125}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107590,"byte_end":107594,"line_start":350,"line_end":350,"column_start":26,"column_end":30},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2153}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107736,"byte_end":107740,"line_start":358,"line_end":358,"column_start":19,"column_end":23},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2125}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":107898,"byte_end":107902,"line_start":366,"line_end":366,"column_start":25,"column_end":29},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2153}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108040,"byte_end":108044,"line_start":374,"line_end":374,"column_start":20,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108208,"byte_end":108212,"line_start":382,"line_end":382,"column_start":26,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108354,"byte_end":108358,"line_start":390,"line_end":390,"column_start":19,"column_end":23},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108516,"byte_end":108520,"line_start":398,"line_end":398,"column_start":25,"column_end":29},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108809,"byte_end":108813,"line_start":414,"line_end":414,"column_start":14,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2110}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":108971,"byte_end":108975,"line_start":422,"line_end":422,"column_start":20,"column_end":24},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2141}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109112,"byte_end":109116,"line_start":430,"line_end":430,"column_start":14,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2115}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109274,"byte_end":109278,"line_start":438,"line_end":438,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2145}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109415,"byte_end":109419,"line_start":446,"line_end":446,"column_start":14,"column_end":18},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109552,"byte_end":109556,"line_start":454,"line_end":454,"column_start":26,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109705,"byte_end":109709,"line_start":461,"line_end":461,"column_start":26,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":109863,"byte_end":109867,"line_start":468,"line_end":468,"column_start":23,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":110024,"byte_end":110028,"line_start":476,"line_end":476,"column_start":26,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":110179,"byte_end":110183,"line_start":483,"line_end":483,"column_start":27,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2.rs","byte_start":110399,"byte_end":110403,"line_start":497,"line_end":497,"column_start":25,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":110859,"byte_end":110867,"line_start":11,"line_end":11,"column_start":6,"column_end":14},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112510,"byte_end":112518,"line_start":62,"line_end":62,"column_start":17,"column_end":25},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112682,"byte_end":112690,"line_start":70,"line_end":70,"column_start":23,"column_end":31},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":112832,"byte_end":112840,"line_start":78,"line_end":78,"column_start":16,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113002,"byte_end":113010,"line_start":86,"line_end":86,"column_start":22,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113149,"byte_end":113157,"line_start":94,"line_end":94,"column_start":14,"column_end":22},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113285,"byte_end":113293,"line_start":102,"line_end":102,"column_start":21,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113450,"byte_end":113458,"line_start":108,"line_end":108,"column_start":23,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec2_mask.rs","byte_start":113735,"byte_end":113743,"line_start":121,"line_end":121,"column_start":26,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1117},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":114745,"byte_end":114749,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115262,"byte_end":115266,"line_start":48,"line_end":48,"column_start":18,"column_end":22},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115376,"byte_end":115380,"line_start":56,"line_end":56,"column_start":20,"column_end":24},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115517,"byte_end":115521,"line_start":64,"line_end":64,"column_start":21,"column_end":25},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115696,"byte_end":115702,"line_start":72,"line_end":72,"column_start":21,"column_end":27},"kind":{"Impl":{"id":84}},"from":{"krate":2,"index":37332},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":115867,"byte_end":115871,"line_start":82,"line_end":82,"column_start":23,"column_end":27},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":116033,"byte_end":116037,"line_start":94,"line_end":94,"column_start":6,"column_end":10},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":135963,"byte_end":135967,"line_start":884,"line_end":884,"column_start":26,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136116,"byte_end":136120,"line_start":891,"line_end":891,"column_start":26,"column_end":30},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136274,"byte_end":136278,"line_start":898,"line_end":898,"column_start":23,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136611,"byte_end":136615,"line_start":913,"line_end":913,"column_start":20,"column_end":24},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2125}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":136944,"byte_end":136948,"line_start":929,"line_end":929,"column_start":26,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2153}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":137280,"byte_end":137284,"line_start":946,"line_end":946,"column_start":19,"column_end":23},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2125}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":137616,"byte_end":137620,"line_start":962,"line_end":962,"column_start":25,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2153}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":137957,"byte_end":137961,"line_start":979,"line_end":979,"column_start":20,"column_end":24},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":138290,"byte_end":138294,"line_start":995,"line_end":995,"column_start":26,"column_end":30},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":138626,"byte_end":138630,"line_start":1012,"line_end":1012,"column_start":19,"column_end":23},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":138962,"byte_end":138966,"line_start":1028,"line_end":1028,"column_start":25,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":139628,"byte_end":139632,"line_start":1061,"line_end":1061,"column_start":14,"column_end":18},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2110}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":139955,"byte_end":139959,"line_start":1077,"line_end":1077,"column_start":20,"column_end":24},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2141}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":140286,"byte_end":140290,"line_start":1094,"line_end":1094,"column_start":14,"column_end":18},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2115}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":140613,"byte_end":140617,"line_start":1110,"line_end":1110,"column_start":20,"column_end":24},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2145}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":140944,"byte_end":140948,"line_start":1127,"line_end":1127,"column_start":14,"column_end":18},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":141243,"byte_end":141247,"line_start":1143,"line_end":1143,"column_start":23,"column_end":27},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":141404,"byte_end":141408,"line_start":1151,"line_end":1151,"column_start":26,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":141564,"byte_end":141568,"line_start":1158,"line_end":1158,"column_start":32,"column_end":36},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3.rs","byte_start":142187,"byte_end":142191,"line_start":1185,"line_end":1185,"column_start":25,"column_end":29},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1148},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":143986,"byte_end":143994,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144125,"byte_end":144133,"line_start":37,"line_end":37,"column_start":20,"column_end":28},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144270,"byte_end":144278,"line_start":45,"line_end":45,"column_start":13,"column_end":21},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144313,"byte_end":144321,"line_start":48,"line_end":48,"column_start":14,"column_end":22},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144472,"byte_end":144480,"line_start":56,"line_end":56,"column_start":21,"column_end":29},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144635,"byte_end":144643,"line_start":64,"line_end":64,"column_start":21,"column_end":29},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":144762,"byte_end":144770,"line_start":71,"line_end":71,"column_start":6,"column_end":14},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":148045,"byte_end":148053,"line_start":179,"line_end":179,"column_start":17,"column_end":25},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":148382,"byte_end":148390,"line_start":195,"line_end":195,"column_start":23,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":148722,"byte_end":148730,"line_start":212,"line_end":212,"column_start":16,"column_end":24},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":149056,"byte_end":149064,"line_start":228,"line_end":228,"column_start":22,"column_end":30},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":149392,"byte_end":149400,"line_start":245,"line_end":245,"column_start":14,"column_end":22},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":149769,"byte_end":149777,"line_start":264,"line_end":264,"column_start":21,"column_end":29},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":150159,"byte_end":150167,"line_start":279,"line_end":279,"column_start":23,"column_end":31},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec3_mask.rs","byte_start":150493,"byte_end":150501,"line_start":293,"line_end":293,"column_start":26,"column_end":34},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":151919,"byte_end":151923,"line_start":47,"line_end":47,"column_start":18,"column_end":22},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152033,"byte_end":152037,"line_start":55,"line_end":55,"column_start":20,"column_end":24},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152174,"byte_end":152178,"line_start":63,"line_end":63,"column_start":21,"column_end":25},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152353,"byte_end":152359,"line_start":71,"line_end":71,"column_start":21,"column_end":27},"kind":{"Impl":{"id":126}},"from":{"krate":2,"index":37332},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152524,"byte_end":152528,"line_start":81,"line_end":81,"column_start":23,"column_end":27},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":152701,"byte_end":152705,"line_start":93,"line_end":93,"column_start":6,"column_end":10},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174403,"byte_end":174407,"line_start":962,"line_end":962,"column_start":26,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174556,"byte_end":174560,"line_start":969,"line_end":969,"column_start":26,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":174714,"byte_end":174718,"line_start":976,"line_end":976,"column_start":23,"column_end":27},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":175079,"byte_end":175083,"line_start":991,"line_end":991,"column_start":20,"column_end":24},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2125}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":175509,"byte_end":175513,"line_start":1012,"line_end":1012,"column_start":26,"column_end":30},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2153}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":175876,"byte_end":175880,"line_start":1030,"line_end":1030,"column_start":19,"column_end":23},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2125}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":176307,"byte_end":176311,"line_start":1051,"line_end":1051,"column_start":25,"column_end":29},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2153}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":176677,"byte_end":176681,"line_start":1069,"line_end":1069,"column_start":20,"column_end":24},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":177107,"byte_end":177111,"line_start":1090,"line_end":1090,"column_start":26,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":177474,"byte_end":177478,"line_start":1108,"line_end":1108,"column_start":19,"column_end":23},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":177905,"byte_end":177909,"line_start":1129,"line_end":1129,"column_start":25,"column_end":29},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2149}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":178695,"byte_end":178699,"line_start":1168,"line_end":1168,"column_start":14,"column_end":18},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2110}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":179119,"byte_end":179123,"line_start":1189,"line_end":1189,"column_start":20,"column_end":24},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2141}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":179481,"byte_end":179485,"line_start":1207,"line_end":1207,"column_start":14,"column_end":18},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2115}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":179905,"byte_end":179909,"line_start":1228,"line_end":1228,"column_start":20,"column_end":24},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2145}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180267,"byte_end":180271,"line_start":1246,"line_end":1246,"column_start":14,"column_end":18},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180575,"byte_end":180579,"line_start":1262,"line_end":1262,"column_start":23,"column_end":27},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180736,"byte_end":180740,"line_start":1270,"line_end":1270,"column_start":26,"column_end":30},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":180901,"byte_end":180905,"line_start":1277,"line_end":1277,"column_start":37,"column_end":41},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4.rs","byte_start":181489,"byte_end":181493,"line_start":1303,"line_end":1303,"column_start":25,"column_end":29},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1162},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183364,"byte_end":183372,"line_start":27,"line_end":27,"column_start":18,"column_end":26},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183503,"byte_end":183511,"line_start":35,"line_end":35,"column_start":20,"column_end":28},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183648,"byte_end":183656,"line_start":43,"line_end":43,"column_start":13,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183691,"byte_end":183699,"line_start":46,"line_end":46,"column_start":14,"column_end":22},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":183850,"byte_end":183858,"line_start":54,"line_end":54,"column_start":21,"column_end":29},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184013,"byte_end":184021,"line_start":62,"line_end":62,"column_start":21,"column_end":29},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":184140,"byte_end":184148,"line_start":69,"line_end":69,"column_start":6,"column_end":14},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":187617,"byte_end":187625,"line_start":183,"line_end":183,"column_start":17,"column_end":25},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":188051,"byte_end":188059,"line_start":204,"line_end":204,"column_start":23,"column_end":31},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":188422,"byte_end":188430,"line_start":222,"line_end":222,"column_start":16,"column_end":24},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":188853,"byte_end":188861,"line_start":243,"line_end":243,"column_start":22,"column_end":30},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":189220,"byte_end":189228,"line_start":261,"line_end":261,"column_start":14,"column_end":22},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":189606,"byte_end":189614,"line_start":280,"line_end":280,"column_start":21,"column_end":29},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":190150,"byte_end":190158,"line_start":303,"line_end":303,"column_start":23,"column_end":31},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/f32/vec4_mask.rs","byte_start":190582,"byte_end":190590,"line_start":324,"line_end":324,"column_start":26,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1170},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/glam-0.8.7/src/lib.rs","byte_start":4543,"byte_end":4550,"line_start":145,"line_end":145,"column_start":9,"column_end":16},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":990},"to":{"krate":4294967295,"index":4294967295}}]}