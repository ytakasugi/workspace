{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4","program":"/home/ytakasugi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=ed465dcdd0781a6c","-C","extra-filename=-ed465dcdd0781a6c","--out-dir","/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps","-L","dependency=/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps","--extern","funty=/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps/libfunty-94e22bddf0bb8454.rmeta","--extern","radium=/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps/libradium-35cd4de2a219935b.rmeta","--extern","tap=/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps/libtap-a164ea12b64a97f2.rmeta","--extern","wyz=/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps/libwyz-395936d4c5e8c40c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ytakasugi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ytakasugi/000_learning/workspace/Rust_workspace/rust_basics/practice/forcia/chapter05/todo/target/rls/debug/deps/libbitvec-ed465dcdd0781a6c.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[12777093725446998807,16740088783425726264]},"crate_root":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src","external_crates":[{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3329901521826220148,8779651902869174066]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","num":2,"id":{"name":"core","disambiguator":[11533795067257537051,6600409280955634707]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12614123221401343543,9564301585503608515]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1785005413158388284,2453622026203223019]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12957079427417428001,17718260667887668647]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10214993728156300765,14618204673916620187]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12453517098623888364,4709794086161820998]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12634510118091288440,7983944581587655387]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14017342134866723280,9256858969587329629]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7061025862014072460,14171357653989770935]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2285728033677722481,16182084057206383065]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[7305883247437987566,266452839079745451]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[13956229687295891598,15294992126055156716]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[931598532372339641,10024719927090962737]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[11150552510595322945,15608256962932530162]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4217706585212656622,592289864015908737]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[2229008352226773351,3496425060661471051]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","num":18,"id":{"name":"radium","disambiguator":[10485550553799709405,18300396089677858910]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","num":19,"id":{"name":"tap","disambiguator":[8617986225405374519,3650880209839785492]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","num":20,"id":{"name":"wyz","disambiguator":[16757656109631392713,16842841537687774891]}},{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","num":21,"id":{"name":"funty","disambiguator":[14874674400945455761,5745293714490903849]}}],"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":0,"byte_end":6531,"line_start":1,"line_end":184,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":12},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":29251,"byte_end":29266,"line_start":356,"line_end":356,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198032,"byte_end":198033,"line_start":38,"line_end":38,"column_start":11,"column_end":12},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":812}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198052,"byte_end":198053,"line_start":39,"line_end":39,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":2627},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198087,"byte_end":198095,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198111,"byte_end":198120,"line_start":45,"line_end":45,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":3019},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198125,"byte_end":198129,"line_start":46,"line_end":46,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":3020},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198125,"byte_end":198129,"line_start":46,"line_end":46,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":820}},{"kind":"Use","ref_id":{"krate":0,"index":2997},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198134,"byte_end":198138,"line_start":47,"line_end":47,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":2998},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198134,"byte_end":198138,"line_start":47,"line_end":47,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":821}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198154,"byte_end":198162,"line_start":49,"line_end":49,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":1745},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198223,"byte_end":198229,"line_start":54,"line_end":54,"column_start":10,"column_end":16},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":2049},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198238,"byte_end":198244,"line_start":55,"line_end":55,"column_start":8,"column_end":14},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":812}},{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198331,"byte_end":198337,"line_start":62,"line_end":62,"column_start":3,"column_end":9},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":826}},{"kind":"Use","ref_id":{"krate":0,"index":15},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198341,"byte_end":198345,"line_start":63,"line_end":63,"column_start":3,"column_end":7},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":826}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198399,"byte_end":198405,"line_start":68,"line_end":68,"column_start":3,"column_end":9},"alias_span":null,"name":"bitbox","value":"","parent":{"krate":0,"index":826}},{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198409,"byte_end":198415,"line_start":69,"line_end":69,"column_start":3,"column_end":9},"alias_span":null,"name":"bitvec","value":"","parent":{"krate":0,"index":826}},{"kind":"Use","ref_id":{"krate":0,"index":383},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198509,"byte_end":198517,"line_start":76,"line_end":76,"column_start":10,"column_end":18},"alias_span":null,"name":"BitField","value":"","parent":{"krate":0,"index":833}},{"kind":"Use","ref_id":{"krate":0,"index":633},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198526,"byte_end":198535,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"alias_span":null,"name":"BitMemory","value":"","parent":{"krate":0,"index":833}},{"kind":"Use","ref_id":{"krate":0,"index":657},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198546,"byte_end":198554,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":833}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198565,"byte_end":198573,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":833}},{"kind":"Use","ref_id":{"krate":0,"index":1669},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198583,"byte_end":198590,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"alias_span":null,"name":"BitView","value":"","parent":{"krate":0,"index":833}},{"kind":"Use","ref_id":{"krate":0,"index":383},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198717,"byte_end":198725,"line_start":87,"line_end":87,"column_start":10,"column_end":18},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":840}},{"kind":"Use","ref_id":{"krate":0,"index":1669},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198740,"byte_end":198747,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":840}},{"kind":"Use","ref_id":{"krate":0,"index":2627},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198848,"byte_end":198856,"line_start":95,"line_end":95,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":2659},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198873,"byte_end":198882,"line_start":97,"line_end":97,"column_start":4,"column_end":13},"alias_span":null,"name":"BitDomain","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":2689},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198887,"byte_end":198899,"line_start":98,"line_end":98,"column_start":4,"column_end":16},"alias_span":null,"name":"BitDomainMut","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198920,"byte_end":198929,"line_start":101,"line_end":101,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":3019},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198934,"byte_end":198938,"line_start":102,"line_end":102,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":3020},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198934,"byte_end":198938,"line_start":102,"line_end":102,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":852}},{"kind":"Use","ref_id":{"krate":0,"index":2997},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198943,"byte_end":198947,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":2998},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198943,"byte_end":198947,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":853}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198963,"byte_end":198971,"line_start":105,"line_end":105,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":1745},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":199032,"byte_end":199038,"line_start":110,"line_end":110,"column_start":10,"column_end":16},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":844}},{"kind":"Use","ref_id":{"krate":0,"index":2049},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":199047,"byte_end":199053,"line_start":111,"line_end":111,"column_start":8,"column_end":14},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":844}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":199078,"byte_end":199079,"line_start":115,"line_end":115,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":811}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":199097,"byte_end":199098,"line_start":116,"line_end":116,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":811}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":199115,"byte_end":199116,"line_start":117,"line_end":117,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":811}},{"kind":"Use","ref_id":{"krate":0,"index":1125},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265281,"byte_end":265289,"line_start":2106,"line_end":2106,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1128},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265293,"byte_end":265307,"line_start":2107,"line_end":2107,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1133},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265311,"byte_end":265329,"line_start":2108,"line_end":2108,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1122},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265333,"byte_end":265341,"line_start":2109,"line_end":2109,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1138},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265345,"byte_end":265358,"line_start":2110,"line_end":2110,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3302},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265375,"byte_end":265381,"line_start":2113,"line_end":2113,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3375},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265385,"byte_end":265396,"line_start":2114,"line_end":2114,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3415},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265400,"byte_end":265414,"line_start":2115,"line_end":2115,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3341},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265418,"byte_end":265427,"line_start":2116,"line_end":2116,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3167},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265431,"byte_end":265435,"line_start":2117,"line_end":2117,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3181},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265439,"byte_end":265446,"line_start":2118,"line_end":2118,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3450},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265450,"byte_end":265457,"line_start":2119,"line_end":2119,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3523},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265461,"byte_end":265473,"line_start":2120,"line_end":2120,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3563},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265477,"byte_end":265492,"line_start":2121,"line_end":2121,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3489},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265496,"byte_end":265506,"line_start":2122,"line_end":2122,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3713},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265510,"byte_end":265516,"line_start":2123,"line_end":2123,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1293},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265520,"byte_end":265529,"line_start":2124,"line_end":2124,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1317},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265533,"byte_end":265540,"line_start":2125,"line_end":2125,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1324},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265544,"byte_end":265554,"line_start":2126,"line_end":2126,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3623},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265558,"byte_end":265563,"line_start":2127,"line_end":2127,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1285},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265567,"byte_end":265575,"line_start":2128,"line_end":2128,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1303},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265579,"byte_end":265585,"line_start":2129,"line_end":2129,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1310},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265589,"byte_end":265598,"line_start":2130,"line_end":2130,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":3263},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265602,"byte_end":265609,"line_start":2131,"line_end":2131,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":1405},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":265623,"byte_end":265629,"line_start":2133,"line_end":2133,"column_start":9,"column_end":15},"alias_span":null,"name":"BitMut","value":"","parent":{"krate":0,"index":861}},{"kind":"Use","ref_id":{"krate":0,"index":2247},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":512177,"byte_end":512182,"line_start":693,"line_end":693,"column_start":2,"column_end":7},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":2029}},{"kind":"Use","ref_id":{"krate":0,"index":4710},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":512185,"byte_end":512193,"line_start":694,"line_end":694,"column_start":2,"column_end":10},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":2029}},{"kind":"Use","ref_id":{"krate":0,"index":4745},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":512196,"byte_end":512202,"line_start":695,"line_end":695,"column_start":2,"column_end":8},"alias_span":null,"name":"Splice","value":"","parent":{"krate":0,"index":2029}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":0,"byte_end":6531,"line_start":1,"line_end":184,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":19},{"krate":0,"index":51},{"krate":0,"index":298},{"krate":0,"index":356},{"krate":0,"index":494},{"krate":0,"index":630},{"krate":0,"index":649},{"krate":0,"index":685},{"krate":0,"index":811},{"krate":0,"index":861},{"krate":0,"index":1617},{"krate":0,"index":1659},{"krate":0,"index":1729},{"krate":0,"index":2029},{"krate":0,"index":2590}],"decl_id":null,"docs":" # Addressable Bits","sig":null,"attributes":[{"value":"* # Addressable Bits\n\n`bitvec` is a foundation library for memory compaction techniques that rely on\nviewing memory as bit-addressed rather than byte-addressed.\n\nThe `bitvec` project is designed to provide a comprehensive set of tools for\nusers who need memory compaction, with as low a cost as possible.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard library:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet mut stats: Vec<bool> = Vec::new();\nstats.extend(&[true, false, true, true, false, false, true, false]);\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf = bitvec![Msb0, u8; 0; 16];\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet mut stats: BitVec = BitVec::new();\nstats.extend(&[true, false, true, true, false, false, true, false]);\n# }\n```\n\n# Capabilities\n\n`bitvec` stands out from other bit-vector libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its information in pointers to\nmemory regions, rather than in the region directly. By using its own pointer\nencoding scheme, it can use references `&BitSlice` and `&mut BitSlice` to manage\nmemory and fit seamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify the\nregister element type used to store data, and the ordering of bits within those\nelements. This sidesteps the problems found in C [bitfields], C++\n[`std::bitset`], Python [`bitstring`], Erlang [`bitstream`], and Rust libraries\nsuch as [`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nwithin the library, users are able to have the behavior characteristics they\nwant without effort or workarounds.\n\nThis works by suppling two type parameters: `O: BitOrder` specifies the ordering\nof bits within a register element, and `T: BitStore` specifies which register\nelement is used to store bits. `T` is restricted to be only the unsigned\nintegers, and `Cell` or `Atomic` variants of them.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to concurrency and either force the use of\natomic memory accesses or forbid simultaneous multiprocessing. You will never\nneed to insert your own guards to prevent race conditions, and [`BitSlice`]\nprovides APIs to separate any slice into its aliased and unaliased sub-regions.\n\n# Library Structure\n\nYou should generally import the library prelude, with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains all the symbols you will need to make use of the crate.\nAlmost all begin with the prefix `Bit`; only the orderings `Lsb0` and `Msb0` do\nnot. This will reduce the likelihood of name collisions. See the prelude module\ndocumentation for more detail on which symbols are imported, and how you can\nmore precisely control this.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` operator overrides, and `traits` all\nother trait implementations.The data structure’s own module only contains its\nown definition and its inherent methods that are not ports of the standard\nlibraries.\n\n# Usage\n\nAs a replacement for `bool` data structures, you should be able to replace old\ntype definition and value construction sites with their corresponding items from\nthis crate, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for bitfields, use [`BitArray`] or [`BitVec`] to manage your data\nbuffers (compile-time static and run-time dynamic, respectively), and the\n[`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the methods and trait implementations used\nto interact with the *contents* of a memory buffer. [`BitVec`] adds methods for\noperating on allocations, and specializes [`BitSlice`] methods that can take\nadvantage of owned buffers.\n\nThe `domain` module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory on aliasing\nboundaries, removing synchronization where provably safe.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n`BitBox`, and [`BitVec`] types are all owning types that contain a buffer of\nmemory and dereference to [`BitSlice`] in order to view it. In addition, you can\nborrow any piece of ordinary Rust memory as a [`BitSlice`] view using its\nborrowing constructor functions, and the [`BitView`] trait methods.\n\n# Examples\n\nSee the `examples/` directory of the project repository for detailed examples,\nor the type documentation for introductory samples.\n\n[`BitArray`]: array/struct.BitArray.html\n[`BitBox`]: boxed/struct.BitBox.html\n[`BitField`]: field/trait.BitField.html\n[`BitSlice`]: slice/struct.BitSlice.html\n[`BitVec`]: vec/struct.BitVec.html\n[`BitView`]: view/trait.BitView.html\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":0,"byte_end":5887,"line_start":1,"line_end":145,"column_start":1,"column_end":4}},{"value":"warn(missing_docs)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":5962,"byte_end":5980,"line_start":148,"line_end":148,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6039,"byte_end":6072,"line_start":150,"line_end":150,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros.rs","parent":null,"children":[{"krate":0,"index":5}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6121,"byte_end":6133,"line_start":155,"line_end":155,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros.rs","byte_start":6533,"byte_end":6591,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros.rs","byte_start":6593,"byte_end":6605,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":19121,"byte_end":19597,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28508,"byte_end":28523,"line_start":309,"line_end":309,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28363,"byte_end":28416,"line_start":306,"line_end":306,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28417,"byte_end":28457,"line_start":307,"line_end":307,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28458,"byte_end":28494,"line_start":308,"line_end":308,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28921,"byte_end":28936,"line_start":333,"line_end":333,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28776,"byte_end":28829,"line_start":330,"line_end":330,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28830,"byte_end":28870,"line_start":331,"line_end":331,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros/internal.rs","byte_start":28871,"byte_end":28907,"line_start":332,"line_end":332,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":4776},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":4782},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":2627},{"krate":0,"index":2635},{"krate":0,"index":2632},{"krate":0,"index":62},{"krate":0,"index":74},{"krate":0,"index":150}],"decl_id":null,"docs":" A fixed-size region viewed as individual bits, corresponding to `[bool]`.","sig":null,"attributes":[{"value":"* A fixed-size region viewed as individual bits, corresponding to `[bool]`.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n`BitArray` has little behavior or properties in its own right. It serves solely\nas a type capable of being used in immediate value position, and delegates to\n`BitSlice` for all actual work.\n\n[`BitArray`]: struct.BitArray.html\n[std]: https://doc.rust-lang.org/std/primitive.array.html\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":40807,"byte_end":41336,"line_start":1,"line_end":14,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2627},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44816,"byte_end":44824,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":2630},{"krate":0,"index":2631}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all `Sized` implementors of the `BitView` trait. Due\nto limitations in the Rust language’s const-generics implementation (it is both\nunstable and incomplete), this must take an array type parameter, rather than a\nbit-count integer parameter, making it inconvenient to use. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements `Deref`/`Mut` to\n`BitSlice`, as well as implementing all of `BitSlice`’s traits by forwarding to\nthe bit-slice view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit `.as_bitslice()` calls in user\ncode.\n\n> Note: Not all traits may be implemented for forwarding, as a matter of effort\n> and perceived need. Please file an issue for any additional traits that you\n> need to be forwarded.\n\n# Limitations\n\nThis always produces a bit-slice that fully spans its data; you cannot produce,\nfor example, an array of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory elements.\n- `V`: Some amount of memory which can be used as the basis for a `BitSlice`\n  view. This will usually be an array `[T: BitStore; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\nbit-slice.\n\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":42169,"byte_end":43631,"line_start":61,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43632,"byte_end":43643,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43644,"byte_end":43671,"line_start":98,"line_end":98,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43672,"byte_end":43675,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43676,"byte_end":43701,"line_start":100,"line_end":100,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43702,"byte_end":43720,"line_start":101,"line_end":101,"column_start":1,"column_end":19}},{"value":"/   //  creates a type declaration","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43721,"byte_end":43757,"line_start":102,"line_end":102,"column_start":1,"column_end":37}},{"value":"/   fields: bitarr!(for 20, in Msb0, u8),","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43758,"byte_end":43801,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43802,"byte_end":43807,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43808,"byte_end":43811,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43812,"byte_end":43835,"line_start":106,"line_end":106,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43836,"byte_end":43864,"line_start":107,"line_end":107,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43865,"byte_end":43879,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43880,"byte_end":43900,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/       //  creates a value object. the type paramaters must be repeated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43901,"byte_end":43976,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":43977,"byte_end":44020,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44021,"byte_end":44030,"line_start":112,"line_end":112,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44031,"byte_end":44038,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44039,"byte_end":44042,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44043,"byte_end":44081,"line_start":115,"line_end":115,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44082,"byte_end":44139,"line_start":116,"line_end":116,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44140,"byte_end":44166,"line_start":117,"line_end":117,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44167,"byte_end":44174,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44175,"byte_end":44178,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44179,"byte_end":44224,"line_start":120,"line_end":120,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44225,"byte_end":44264,"line_start":121,"line_end":121,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44265,"byte_end":44300,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44301,"byte_end":44308,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44309,"byte_end":44312,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44313,"byte_end":44357,"line_start":125,"line_end":125,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44358,"byte_end":44405,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44406,"byte_end":44448,"line_start":127,"line_end":127,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44449,"byte_end":44456,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44457,"byte_end":44462,"line_start":129,"line_end":129,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44463,"byte_end":44470,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T: BitStore, const N: usize>([T; elts::<T>(N)]);`, to mirror\nthe behavior of ordinary arrays `[T; N]` as they stand today.\n\n[`bitarr!`]: ../../macro.bitarr.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44471,"byte_end":44760,"line_start":131,"line_end":139,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":44761,"byte_end":44781,"line_start":140,"line_end":140,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45180,"byte_end":45186,"line_start":161,"line_end":161,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with zeroed memory.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with zeroed memory.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45069,"byte_end":45120,"line_start":158,"line_end":158,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45122,"byte_end":45139,"line_start":159,"line_end":159,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45141,"byte_end":45171,"line_start":160,"line_end":160,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45483,"byte_end":45486,"line_start":177,"line_end":177,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` from a data store.","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` from a data store.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45296,"byte_end":45346,"line_start":168,"line_end":168,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45348,"byte_end":45351,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45353,"byte_end":45367,"line_start":170,"line_end":170,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45369,"byte_end":45372,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45374,"byte_end":45385,"line_start":172,"line_end":172,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45387,"byte_end":45414,"line_start":173,"line_end":173,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45416,"byte_end":45423,"line_start":174,"line_end":174,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45425,"byte_end":45442,"line_start":175,"line_end":175,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45444,"byte_end":45474,"line_start":176,"line_end":176,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45875,"byte_end":45881,"line_start":196,"line_end":196,"column_start":9,"column_end":15},"name":"unwrap","qualname":"<BitArray<O, V>>::unwrap","value":"pub fn unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the bit-array wrapper, returning the contained data.","sig":null,"attributes":[{"value":"/ Removes the bit-array wrapper, returning the contained data.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45555,"byte_end":45619,"line_start":184,"line_end":184,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45621,"byte_end":45624,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45626,"byte_end":45640,"line_start":186,"line_end":186,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45642,"byte_end":45645,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45647,"byte_end":45658,"line_start":188,"line_end":188,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45660,"byte_end":45687,"line_start":189,"line_end":189,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45689,"byte_end":45692,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ let bitarr: BitArray<LocalBits, [usize; 1]> = bitarr![0; 30];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45694,"byte_end":45759,"line_start":191,"line_end":191,"column_start":2,"column_end":67}},{"value":"/ let native: [usize; 1] = bitarr.unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45761,"byte_end":45806,"line_start":192,"line_end":192,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45808,"byte_end":45815,"line_start":193,"line_end":193,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45817,"byte_end":45834,"line_start":194,"line_end":194,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45836,"byte_end":45866,"line_start":195,"line_end":195,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46007,"byte_end":46018,"line_start":203,"line_end":203,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a bit-slice.\n","sig":null,"attributes":[{"value":"/ Views the array as a bit-slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45912,"byte_end":45947,"line_start":200,"line_end":200,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45949,"byte_end":45966,"line_start":201,"line_end":201,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45968,"byte_end":45998,"line_start":202,"line_end":202,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46191,"byte_end":46206,"line_start":210,"line_end":210,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable bit-slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46088,"byte_end":46131,"line_start":207,"line_end":207,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46133,"byte_end":46150,"line_start":208,"line_end":208,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46152,"byte_end":46182,"line_start":209,"line_end":209,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46406,"byte_end":46414,"line_start":217,"line_end":217,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying elements.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46288,"byte_end":46346,"line_start":214,"line_end":214,"column_start":2,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46348,"byte_end":46365,"line_start":215,"line_end":215,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46367,"byte_end":46397,"line_start":216,"line_end":216,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46684,"byte_end":46696,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying elements.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46558,"byte_end":46624,"line_start":226,"line_end":226,"column_start":2,"column_end":68}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46626,"byte_end":46643,"line_start":227,"line_end":227,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46645,"byte_end":46675,"line_start":228,"line_end":228,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46977,"byte_end":46989,"line_start":241,"line_end":241,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its raw underlying memory type.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its raw underlying memory type.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46852,"byte_end":46917,"line_start":238,"line_end":238,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46919,"byte_end":46936,"line_start":239,"line_end":239,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":46938,"byte_end":46968,"line_start":240,"line_end":240,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":47262,"byte_end":47278,"line_start":253,"line_end":253,"column_start":9,"column_end":25},"name":"as_raw_mut_slice","qualname":"<BitArray<O, V>>::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [V::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its raw underlying memory type.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its raw underlying memory type.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":47129,"byte_end":47202,"line_start":250,"line_end":250,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":47204,"byte_end":47221,"line_start":251,"line_end":251,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":47223,"byte_end":47253,"line_start":252,"line_end":252,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2639},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58514,"byte_end":58534,"line_start":371,"line_end":371,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from a bitslice to a bitarray\n fails.\n","sig":null,"attributes":[{"value":"/ The error type returned when a conversion from a bitslice to a bitarray","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58386,"byte_end":58461,"line_start":368,"line_end":368,"column_start":1,"column_end":76}},{"value":"/ fails.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58462,"byte_end":58472,"line_start":369,"line_end":369,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":298},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":4874},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":2659},{"krate":0,"index":2671},{"krate":0,"index":2646},{"krate":0,"index":2689},{"krate":0,"index":2701},{"krate":0,"index":2676},{"krate":0,"index":322},{"krate":0,"index":326},{"krate":0,"index":2719},{"krate":0,"index":2730},{"krate":0,"index":2706},{"krate":0,"index":2747},{"krate":0,"index":2758},{"krate":0,"index":2734},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":341},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":2762},{"krate":0,"index":2765},{"krate":0,"index":2768},{"krate":0,"index":2771}],"decl_id":null,"docs":" Representation of the `BitSlice` region memory model","sig":null,"attributes":[{"value":"* Representation of the `BitSlice` region memory model\n\nThis module allows any `BitSlice` region to be decomposed into domains with\nmore detailed aliasing information.\n\nSpecifically, any particular `BitSlice` region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the slice handle are\nknown to not have any other write-capable views to them, and in the case of an\n`&mut BitSlice` handle specifically, no other views at all. As such, the domain\nview of this memory is able to remove the aliasing marker type and permit direct\nmemory access for the duration of its existence.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":60086,"byte_end":60811,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":2659},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69434,"byte_end":69443,"line_start":338,"line_end":338,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: 'a + BitStore {\n\n    /// Indicates that a `BitSlice` is contained entirely in the\n    /// interior indices of a single memory element.\n    Enclave {\n        /// The start index of the `BitSlice`.\n        ///\n        /// This is not likely to be useful information, but is retained\n        /// for structural similarity with the rest of the module.\n        head: BitIdx<T::Mem>,\n        /// The original `BitSlice` used to create this bit-domain view.\n        body: &'a BitSlice<O, T>,\n        /// The end index of the `BitSlice`.\n        ///\n        /// This is not likely to be useful information, but is retained\n        /// for structural similarity with the rest of the module.\n        tail: BitTail<T::Mem>,\n    },\n\n    /// Indicates that a `BitSlice` region touches at least one edge\n    /// index of any number of elements.\n    ///\n    /// This contains two bitslices representing the partially-occupied\n    /// edge elements, with their original aliasing marker, and one\n    /// bitslice representing the fully-occupied interior elements,\n    /// marked as unaliased.\n    Region {\n        /// Any bits that partially-fill the base element of the slice\n        /// region.\n        ///\n        /// This does not modify its aliasing status, as it will already\n        /// be appropriately marked before constructing this view.\n        head: &'a BitSlice<O, T>,\n        /// Any bits inside elements that the source bitslice completely\n        /// covers.\n        ///\n        /// This is marked as unaliased, because it is statically\n        /// impossible for any other handle to have write access to the\n        /// region it covers. As such, a bitslice that was marked as\n        /// entirely aliased, but contains interior unaliased elements,\n        /// can safely remove its aliasing protections.\n        body: &'a BitSlice<O, T::Mem>,\n        /// Any bits that partially fill the last element of the slice\n        /// region.\n        ///\n        /// This does not modify its aliasing status, as it will already\n        /// be appropriately marked before constructing this view.\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2663},{"krate":0,"index":2667}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61187,"byte_end":61248,"line_start":51,"line_end":51,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61251,"byte_end":61266,"line_start":52,"line_end":52,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61269,"byte_end":61272,"line_start":53,"line_end":53,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61275,"byte_end":61342,"line_start":54,"line_end":54,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61345,"byte_end":61416,"line_start":55,"line_end":55,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61419,"byte_end":61488,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61491,"byte_end":61559,"line_start":57,"line_end":57,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61562,"byte_end":61633,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61636,"byte_end":61704,"line_start":59,"line_end":59,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61707,"byte_end":61751,"line_start":60,"line_end":60,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61754,"byte_end":61757,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61760,"byte_end":61832,"line_start":62,"line_end":62,"column_start":3,"column_end":75}},{"value":"/ the source `BitSlice` into smaller `BitSlices`, and makes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61835,"byte_end":61896,"line_start":63,"line_end":63,"column_start":3,"column_end":64}},{"value":"/ appropriate modifications to the aliasing markers. It does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61899,"byte_end":61965,"line_start":64,"line_end":64,"column_start":3,"column_end":69}},{"value":"/ provide references to the underlying memory elements. If you need","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61968,"byte_end":62037,"line_start":65,"line_end":65,"column_start":3,"column_end":72}},{"value":"/ such access directly, use the [`Domain`] or [`DomainMut`] enums.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62040,"byte_end":62108,"line_start":66,"line_end":66,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62111,"byte_end":62114,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62117,"byte_end":62132,"line_start":68,"line_end":68,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62135,"byte_end":62138,"line_start":69,"line_end":69,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62141,"byte_end":62197,"line_start":70,"line_end":70,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62200,"byte_end":62203,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62206,"byte_end":62227,"line_start":72,"line_end":72,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62230,"byte_end":62233,"line_start":73,"line_end":73,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source `BitSlice` handle.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62236,"byte_end":62297,"line_start":74,"line_end":74,"column_start":3,"column_end":64}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62300,"byte_end":62370,"line_start":75,"line_end":75,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62373,"byte_end":62396,"line_start":76,"line_end":76,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62399,"byte_end":62402,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62405,"byte_end":62429,"line_start":78,"line_end":78,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62432,"byte_end":62435,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62438,"byte_end":62508,"line_start":80,"line_end":80,"column_start":3,"column_end":73}},{"value":"/ original `&BitSlice` handle, and so does not need to modfiy any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62511,"byte_end":62578,"line_start":81,"line_end":81,"column_start":3,"column_end":70}},{"value":"/ aliasing conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62581,"byte_end":62605,"line_start":82,"line_end":82,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62608,"byte_end":62611,"line_start":83,"line_end":83,"column_start":3,"column_end":6}},{"value":"/ [`Domain`]: enum.Domain.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62614,"byte_end":62646,"line_start":84,"line_end":84,"column_start":3,"column_end":35}},{"value":"/ [`DomainMut`]: enum.DomainMut.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62649,"byte_end":62687,"line_start":85,"line_end":85,"column_start":3,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2689},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69458,"byte_end":69470,"line_start":339,"line_end":339,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: 'a + BitStore {\n\n    /// Indicates that a `BitSlice` is contained entirely in the\n    /// interior indices of a single memory element.\n    Enclave {\n        /// The start index of the `BitSlice`.\n        ///\n        /// This is not likely to be useful information, but is retained\n        /// for structural similarity with the rest of the module.\n        head: BitIdx<T::Mem>,\n        /// The original `BitSlice` used to create this bit-domain view.\n        body: &'a mut BitSlice<O, T>,\n        /// The end index of the `BitSlice`.\n        ///\n        /// This is not likely to be useful information, but is retained\n        /// for structural similarity with the rest of the module.\n        tail: BitTail<T::Mem>,\n    },\n\n    /// Indicates that a `BitSlice` region touches at least one edge\n    /// index of any number of elements.\n    ///\n    /// This contains two bitslices representing the partially-occupied\n    /// edge elements, with their original aliasing marker, and one\n    /// bitslice representing the fully-occupied interior elements,\n    /// marked as unaliased.\n    Region {\n        /// Any bits that partially-fill the base element of the slice\n        /// region.\n        ///\n        /// This does not modify its aliasing status, as it will already\n        /// be appropriately marked before constructing this view.\n        head: &'a mut BitSlice<O, T>,\n        /// Any bits inside elements that the source bitslice completely\n        /// covers.\n        ///\n        /// This is marked as unaliased, because it is statically\n        /// impossible for any other handle to have write access to the\n        /// region it covers. As such, a bitslice that was marked as\n        /// entirely aliased, but contains interior unaliased elements,\n        /// can safely remove its aliasing protections.\n        body: &'a mut BitSlice<O, T::Mem>,\n        /// Any bits that partially fill the last element of the slice\n        /// region.\n        ///\n        /// This does not modify its aliasing status, as it will already\n        /// be appropriately marked before constructing this view.\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2693},{"krate":0,"index":2697}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61187,"byte_end":61248,"line_start":51,"line_end":51,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61251,"byte_end":61266,"line_start":52,"line_end":52,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61269,"byte_end":61272,"line_start":53,"line_end":53,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61275,"byte_end":61342,"line_start":54,"line_end":54,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61345,"byte_end":61416,"line_start":55,"line_end":55,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61419,"byte_end":61488,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61491,"byte_end":61559,"line_start":57,"line_end":57,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61562,"byte_end":61633,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61636,"byte_end":61704,"line_start":59,"line_end":59,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61707,"byte_end":61751,"line_start":60,"line_end":60,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61754,"byte_end":61757,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61760,"byte_end":61832,"line_start":62,"line_end":62,"column_start":3,"column_end":75}},{"value":"/ the source `BitSlice` into smaller `BitSlices`, and makes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61835,"byte_end":61896,"line_start":63,"line_end":63,"column_start":3,"column_end":64}},{"value":"/ appropriate modifications to the aliasing markers. It does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61899,"byte_end":61965,"line_start":64,"line_end":64,"column_start":3,"column_end":69}},{"value":"/ provide references to the underlying memory elements. If you need","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":61968,"byte_end":62037,"line_start":65,"line_end":65,"column_start":3,"column_end":72}},{"value":"/ such access directly, use the [`Domain`] or [`DomainMut`] enums.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62040,"byte_end":62108,"line_start":66,"line_end":66,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62111,"byte_end":62114,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62117,"byte_end":62132,"line_start":68,"line_end":68,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62135,"byte_end":62138,"line_start":69,"line_end":69,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62141,"byte_end":62197,"line_start":70,"line_end":70,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62200,"byte_end":62203,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62206,"byte_end":62227,"line_start":72,"line_end":72,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62230,"byte_end":62233,"line_start":73,"line_end":73,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source `BitSlice` handle.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62236,"byte_end":62297,"line_start":74,"line_end":74,"column_start":3,"column_end":64}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62300,"byte_end":62370,"line_start":75,"line_end":75,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62373,"byte_end":62396,"line_start":76,"line_end":76,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62399,"byte_end":62402,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62405,"byte_end":62429,"line_start":78,"line_end":78,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62432,"byte_end":62435,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62438,"byte_end":62508,"line_start":80,"line_end":80,"column_start":3,"column_end":73}},{"value":"/ original `&BitSlice` handle, and so does not need to modfiy any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62511,"byte_end":62578,"line_start":81,"line_end":81,"column_start":3,"column_end":70}},{"value":"/ aliasing conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62581,"byte_end":62605,"line_start":82,"line_end":82,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62608,"byte_end":62611,"line_start":83,"line_end":83,"column_start":3,"column_end":6}},{"value":"/ [`Domain`]: enum.Domain.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62614,"byte_end":62646,"line_start":84,"line_end":84,"column_start":3,"column_end":35}},{"value":"/ [`DomainMut`]: enum.DomainMut.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":62649,"byte_end":62687,"line_start":85,"line_end":85,"column_start":3,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2719},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":76995,"byte_end":77001,"line_start":610,"line_end":610,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: 'a + BitStore {\n\n    /// Indicates that a `BitSlice` is contained entirely in the\n    /// interior indices of a single memory element.\n    Enclave {\n        /// The start index of the `BitSlice`.\n        head: BitIdx<T::Mem>,\n        /// An aliased view of the element containing the `BitSlice`.\n        ///\n        /// This is necessary even on immutable views, because other\n        /// views to the referent element may be permitted to modify it.\n        elem: &'a T,\n        /// The end index of the `BitSlice`.\n        tail: BitTail<T::Mem>,\n    },\n\n    /// Indicates that a `BitSlice` region touches at least one edge\n    /// index of any number of elements.\n    ///\n    /// This contains two optional references to the aliased edges, and\n    /// one reference to the unaliased middle. Each can be queried and\n    /// used individually.\n    Region {\n        /// If the `BitSlice` started in the interior of its first\n        /// element, this contains the starting index and the base\n        /// address.\n        head: Option<(BitIdx<T::Mem>, &'a T)>,\n        /// All fully-spanned, unaliased, elements.\n        ///\n        /// This is marked as bare memory without any access\n        /// protections, because it is statically impossible for any\n        /// other handle to have write access to the region it covers.\n        /// As such, a bitslice that was marked as entirely aliased, but\n        /// contains interior unaliased elements, can safely remove its\n        /// aliasing protections.\n        ///\n        /// # Safety Exception\n        ///\n        /// `&BitSlice<O, T::Alias>` references have access to a\n        /// `.set_aliased` method, which represents the only means in\n        /// `bitvec` of writing to memory without an exclusive `&mut `\n        /// reference.\n        ///\n        /// Construction of two such shared, aliasing, references over\n        /// the same data, then construction of a domain view over one\n        /// of them and simultaneous writing through the other to\n        /// interior elements marked as unaliased, will cause the domain\n        /// view to be undefined behavior. Do not combine domain views\n        /// and `.set_aliased` calls.\n        body: &'a [T::Mem],\n        /// If the `BitSlice` ended in the interior of its last element,\n        /// this contains the ending index and the last address.\n        tail: Option<(&'a T, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2722},{"krate":0,"index":2726}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69804,"byte_end":69865,"line_start":362,"line_end":362,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69868,"byte_end":69883,"line_start":363,"line_end":363,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69886,"byte_end":69889,"line_start":364,"line_end":364,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69892,"byte_end":69959,"line_start":365,"line_end":365,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69962,"byte_end":70033,"line_start":366,"line_end":366,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70036,"byte_end":70105,"line_start":367,"line_end":367,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70108,"byte_end":70176,"line_start":368,"line_end":368,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70179,"byte_end":70250,"line_start":369,"line_end":369,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70253,"byte_end":70321,"line_start":370,"line_end":370,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70324,"byte_end":70368,"line_start":371,"line_end":371,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70371,"byte_end":70374,"line_start":372,"line_end":372,"column_start":3,"column_end":6}},{"value":"/ This enum splits the element region backing a `BitSlice` into","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70377,"byte_end":70442,"line_start":373,"line_end":373,"column_start":3,"column_end":68}},{"value":"/ maybe-aliased and known-unaliased subslices. If you do not need to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70445,"byte_end":70515,"line_start":374,"line_end":374,"column_start":3,"column_end":73}},{"value":"/ work directly with the memory elements, and only need to firmly","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70518,"byte_end":70585,"line_start":375,"line_end":375,"column_start":3,"column_end":70}},{"value":"/ specify the aliasing status of a `BitSlice`, see the [`BitDomain`]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70588,"byte_end":70658,"line_start":376,"line_end":376,"column_start":3,"column_end":73}},{"value":"/ and [`BitDomainMut`] enums.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70661,"byte_end":70692,"line_start":377,"line_end":377,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70695,"byte_end":70698,"line_start":378,"line_end":378,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70701,"byte_end":70716,"line_start":379,"line_end":379,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70719,"byte_end":70722,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70725,"byte_end":70781,"line_start":381,"line_end":381,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70784,"byte_end":70787,"line_start":382,"line_end":382,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70790,"byte_end":70811,"line_start":383,"line_end":383,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70814,"byte_end":70817,"line_start":384,"line_end":384,"column_start":3,"column_end":6}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70820,"byte_end":70890,"line_start":385,"line_end":385,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70893,"byte_end":70916,"line_start":386,"line_end":386,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70919,"byte_end":70922,"line_start":387,"line_end":387,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: enum.BitDomain.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70925,"byte_end":70963,"line_start":388,"line_end":388,"column_start":3,"column_end":41}},{"value":"/ [`BitDomainMut`]: enum.BitDomainMut.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70966,"byte_end":71010,"line_start":389,"line_end":389,"column_start":3,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":2747},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77012,"byte_end":77021,"line_start":611,"line_end":611,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: 'a + BitStore {\n\n    /// Indicates that a `BitSlice` is contained entirely in the\n    /// interior indices of a single memory element.\n    Enclave {\n        /// The start index of the `BitSlice`.\n        head: BitIdx<T::Mem>,\n        /// An aliased view of the element containing the `BitSlice`.\n        ///\n        /// This is necessary even on immutable views, because other\n        /// views to the referent element may be permitted to modify it.\n        elem: &'a T::Alias,\n        /// The end index of the `BitSlice`.\n        tail: BitTail<T::Mem>,\n    },\n\n    /// Indicates that a `BitSlice` region touches at least one edge\n    /// index of any number of elements.\n    ///\n    /// This contains two optional references to the aliased edges, and\n    /// one reference to the unaliased middle. Each can be queried and\n    /// used individually.\n    Region {\n        /// If the `BitSlice` started in the interior of its first\n        /// element, this contains the starting index and the base\n        /// address.\n        head: Option<(BitIdx<T::Mem>, &'a T::Alias)>,\n        /// All fully-spanned, unaliased, elements.\n        ///\n        /// This is marked as bare memory without any access\n        /// protections, because it is statically impossible for any\n        /// other handle to have write access to the region it covers.\n        /// As such, a bitslice that was marked as entirely aliased, but\n        /// contains interior unaliased elements, can safely remove its\n        /// aliasing protections.\n        ///\n        /// # Safety Exception\n        ///\n        /// `&BitSlice<O, T::Alias>` references have access to a\n        /// `.set_aliased` method, which represents the only means in\n        /// `bitvec` of writing to memory without an exclusive `&mut `\n        /// reference.\n        ///\n        /// Construction of two such shared, aliasing, references over\n        /// the same data, then construction of a domain view over one\n        /// of them and simultaneous writing through the other to\n        /// interior elements marked as unaliased, will cause the domain\n        /// view to be undefined behavior. Do not combine domain views\n        /// and `.set_aliased` calls.\n        body: &'a mut [T::Mem],\n        /// If the `BitSlice` ended in the interior of its last element,\n        /// this contains the ending index and the last address.\n        tail: Option<(&'a T::Alias, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2750},{"krate":0,"index":2754}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69804,"byte_end":69865,"line_start":362,"line_end":362,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69868,"byte_end":69883,"line_start":363,"line_end":363,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69886,"byte_end":69889,"line_start":364,"line_end":364,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69892,"byte_end":69959,"line_start":365,"line_end":365,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69962,"byte_end":70033,"line_start":366,"line_end":366,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70036,"byte_end":70105,"line_start":367,"line_end":367,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70108,"byte_end":70176,"line_start":368,"line_end":368,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70179,"byte_end":70250,"line_start":369,"line_end":369,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70253,"byte_end":70321,"line_start":370,"line_end":370,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70324,"byte_end":70368,"line_start":371,"line_end":371,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70371,"byte_end":70374,"line_start":372,"line_end":372,"column_start":3,"column_end":6}},{"value":"/ This enum splits the element region backing a `BitSlice` into","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70377,"byte_end":70442,"line_start":373,"line_end":373,"column_start":3,"column_end":68}},{"value":"/ maybe-aliased and known-unaliased subslices. If you do not need to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70445,"byte_end":70515,"line_start":374,"line_end":374,"column_start":3,"column_end":73}},{"value":"/ work directly with the memory elements, and only need to firmly","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70518,"byte_end":70585,"line_start":375,"line_end":375,"column_start":3,"column_end":70}},{"value":"/ specify the aliasing status of a `BitSlice`, see the [`BitDomain`]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70588,"byte_end":70658,"line_start":376,"line_end":376,"column_start":3,"column_end":73}},{"value":"/ and [`BitDomainMut`] enums.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70661,"byte_end":70692,"line_start":377,"line_end":377,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70695,"byte_end":70698,"line_start":378,"line_end":378,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70701,"byte_end":70716,"line_start":379,"line_end":379,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70719,"byte_end":70722,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70725,"byte_end":70781,"line_start":381,"line_end":381,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70784,"byte_end":70787,"line_start":382,"line_end":382,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70790,"byte_end":70811,"line_start":383,"line_end":383,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70814,"byte_end":70817,"line_start":384,"line_end":384,"column_start":3,"column_end":6}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70820,"byte_end":70890,"line_start":385,"line_end":385,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70893,"byte_end":70916,"line_start":386,"line_end":386,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70919,"byte_end":70922,"line_start":387,"line_end":387,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: enum.BitDomain.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70925,"byte_end":70963,"line_start":388,"line_end":388,"column_start":3,"column_end":41}},{"value":"/ [`BitDomainMut`]: enum.BitDomainMut.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":70966,"byte_end":71010,"line_start":389,"line_end":389,"column_start":3,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":356},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":4908},{"krate":0,"index":369},{"krate":0,"index":4910},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":396},{"krate":0,"index":406},{"krate":0,"index":416},{"krate":0,"index":427},{"krate":0,"index":438},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":455},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466}],"decl_id":null,"docs":" Parallel bitfield access.","sig":null,"attributes":[{"value":"* Parallel bitfield access.\n\nThis module provides parallel, multiple-bit, access to a `BitSlice`. This\nfunctionality permits the use of `BitSlice` as a library-level implementation of\nthe bitfield language feature found in C and C++.\n\nThe `BitField` trait is not sealed against client implementation, as there is no\nuseful way to automatically use a `BitOrder` implementation to provide a\nuniversal behavior. As such, the trait has some requirements that the compiler\ncannot enforce for client implementations.\n\n# Batch Behavior\n\nThe purpose of this trait is to provide access to arbitrary bit regions as if\nthey were an ordinary memory location. As such, it is important for\nimplementations of this trait to provide shift/mask register transfer behavior\nwhere possible, for as wide a span as possible in each action. Implementations\nof this trait should *not* use bit-by-bit iteration.\n\n# Register Bit Order Preservation\n\nAs a default assumption – user orderings *may* violate this, but *should* not –\neach element of slice memory used to store part of a value should not reorder\nthe value bits. Transfer between slice memory and a CPU register should solely\nbe an ordinary value load or store between memory and the register, and a\nshift/mask operation to select the part of the value that is live.\n\n# Endianness\n\nThe `_le` and `_be` methods of `BitField` refer to the order in which\n`T: BitStore` elements of the slice are assigned significance when containing\nfragments of a stored data value. Within any `T` element, the order of its\nconstituent bytes is *not* governed by the `BitField` trait method.\n\nThe provided `BitOrder` implementors `Lsb0` and `Msb0` use the local machine’s\nbyte ordering. Other cursors *may* implement ordering of bytes within `T`\nelements differently, for instance by calling `.to_be_bytes` before store and\n`from_be_bytes` after load.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":79542,"byte_end":81420,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":383},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82772,"byte_end":82780,"line_start":98,"line_end":98,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394}],"decl_id":null,"docs":" Performs C-style bitfield access through a `BitSlice`.","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a `BitSlice`.\n\nBit orderings that permit batched access to regions of memory are enabled to\nload data from, and store data to, a `BitStore` with faster behavior than the\ndefault bit-by-bit traversal.\n\nThis trait transfers data between a `BitSlice` and a local element. The trait\nfunctions always place the live bit region of the slice against the least\nsignificant bit edge of the local element (return value of `load`, argument of\n`store`).\n\nImplementations are encouraged to preserve in-memory bit ordering within a\nmemory element, so that call sites can provide a value pattern that the user can\nclearly see matches what they expect for memory ordering. These methods should\nonly move data between locations, without modifying the data itself.\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no mor than the `M::BITS` element width being\ntransferred.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":81807,"byte_end":82761,"line_start":78,"line_end":97,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83810,"byte_end":83814,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82784,"byte_end":82843,"line_start":99,"line_end":99,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82845,"byte_end":82848,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82850,"byte_end":82917,"line_start":101,"line_end":101,"column_start":2,"column_end":69}},{"value":"/ `BitMemory`. Any further transformation must be done by the user.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82919,"byte_end":82988,"line_start":102,"line_end":102,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82990,"byte_end":82993,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":82995,"byte_end":83063,"line_start":104,"line_end":104,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83065,"byte_end":83131,"line_start":105,"line_end":105,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83133,"byte_end":83155,"line_start":106,"line_end":106,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83157,"byte_end":83160,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83162,"byte_end":83178,"line_start":108,"line_end":108,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83180,"byte_end":83183,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83185,"byte_end":83259,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83261,"byte_end":83335,"line_start":111,"line_end":111,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83337,"byte_end":83413,"line_start":112,"line_end":112,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83415,"byte_end":83427,"line_start":113,"line_end":113,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83429,"byte_end":83432,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83434,"byte_end":83447,"line_start":115,"line_end":115,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83449,"byte_end":83452,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83454,"byte_end":83527,"line_start":117,"line_end":117,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83529,"byte_end":83552,"line_start":118,"line_end":118,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83554,"byte_end":83557,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83559,"byte_end":83571,"line_start":120,"line_end":120,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83573,"byte_end":83576,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83578,"byte_end":83652,"line_start":122,"line_end":122,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83654,"byte_end":83677,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83679,"byte_end":83682,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ [`load_be`]: #tymethod.load_be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83684,"byte_end":83718,"line_start":125,"line_end":125,"column_start":2,"column_end":36}},{"value":"/ [`load_le`]: #tymethod.load_le","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83720,"byte_end":83754,"line_start":126,"line_end":126,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83756,"byte_end":83773,"line_start":127,"line_end":127,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83775,"byte_end":83805,"line_start":128,"line_end":128,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85134,"byte_end":85139,"line_start":170,"line_end":170,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":83985,"byte_end":84055,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84057,"byte_end":84060,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84062,"byte_end":84125,"line_start":140,"line_end":140,"column_start":2,"column_end":65}},{"value":"/ `BitMemory`. Any other types must first be transformed by the user.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84127,"byte_end":84198,"line_start":141,"line_end":141,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84200,"byte_end":84203,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84205,"byte_end":84274,"line_start":143,"line_end":143,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84276,"byte_end":84343,"line_start":144,"line_end":144,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84345,"byte_end":84367,"line_start":145,"line_end":145,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84369,"byte_end":84372,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84374,"byte_end":84390,"line_start":147,"line_end":147,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84392,"byte_end":84395,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84397,"byte_end":84473,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84475,"byte_end":84547,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84549,"byte_end":84623,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84625,"byte_end":84644,"line_start":152,"line_end":152,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84646,"byte_end":84719,"line_start":153,"line_end":153,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84721,"byte_end":84746,"line_start":154,"line_end":154,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84748,"byte_end":84751,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84753,"byte_end":84767,"line_start":156,"line_end":156,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84769,"byte_end":84772,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84774,"byte_end":84849,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ domain of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84851,"byte_end":84872,"line_start":159,"line_end":159,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84874,"byte_end":84877,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84879,"byte_end":84891,"line_start":161,"line_end":161,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84893,"byte_end":84896,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84898,"byte_end":84972,"line_start":163,"line_end":163,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84974,"byte_end":84997,"line_start":164,"line_end":164,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":84999,"byte_end":85002,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ [`store_be`]: #tymethod.store_be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85004,"byte_end":85040,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"/ [`store_le`]: #tymethod.store_le","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85042,"byte_end":85078,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85080,"byte_end":85097,"line_start":168,"line_end":168,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85099,"byte_end":85129,"line_start":169,"line_end":169,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86438,"byte_end":86445,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85307,"byte_end":85371,"line_start":179,"line_end":179,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85373,"byte_end":85376,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85378,"byte_end":85448,"line_start":181,"line_end":181,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85450,"byte_end":85523,"line_start":182,"line_end":182,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85525,"byte_end":85600,"line_start":183,"line_end":183,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85602,"byte_end":85664,"line_start":184,"line_end":184,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85666,"byte_end":85669,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85671,"byte_end":85687,"line_start":186,"line_end":186,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85689,"byte_end":85692,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85694,"byte_end":85768,"line_start":188,"line_end":188,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85770,"byte_end":85844,"line_start":189,"line_end":189,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85846,"byte_end":85922,"line_start":190,"line_end":190,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85924,"byte_end":85936,"line_start":191,"line_end":191,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85938,"byte_end":85941,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85943,"byte_end":85956,"line_start":193,"line_end":193,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85958,"byte_end":85961,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":85963,"byte_end":86036,"line_start":195,"line_end":195,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86038,"byte_end":86109,"line_start":196,"line_end":196,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86111,"byte_end":86184,"line_start":197,"line_end":197,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86186,"byte_end":86262,"line_start":198,"line_end":198,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86264,"byte_end":86308,"line_start":199,"line_end":199,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86310,"byte_end":86313,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86315,"byte_end":86327,"line_start":201,"line_end":201,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86329,"byte_end":86332,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86334,"byte_end":86408,"line_start":203,"line_end":203,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86410,"byte_end":86433,"line_start":204,"line_end":204,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87612,"byte_end":87619,"line_start":234,"line_end":234,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86484,"byte_end":86545,"line_start":208,"line_end":208,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86547,"byte_end":86550,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86552,"byte_end":86621,"line_start":210,"line_end":210,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86623,"byte_end":86697,"line_start":211,"line_end":211,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86699,"byte_end":86774,"line_start":212,"line_end":212,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86776,"byte_end":86838,"line_start":213,"line_end":213,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86840,"byte_end":86843,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86845,"byte_end":86861,"line_start":215,"line_end":215,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86863,"byte_end":86866,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86868,"byte_end":86942,"line_start":217,"line_end":217,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":86944,"byte_end":87018,"line_start":218,"line_end":218,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87020,"byte_end":87096,"line_start":219,"line_end":219,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87098,"byte_end":87110,"line_start":220,"line_end":220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87112,"byte_end":87115,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87117,"byte_end":87130,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87132,"byte_end":87135,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87137,"byte_end":87210,"line_start":224,"line_end":224,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87212,"byte_end":87283,"line_start":225,"line_end":225,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87285,"byte_end":87357,"line_start":226,"line_end":226,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87359,"byte_end":87435,"line_start":227,"line_end":227,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87437,"byte_end":87482,"line_start":228,"line_end":228,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87484,"byte_end":87487,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87489,"byte_end":87501,"line_start":230,"line_end":230,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87503,"byte_end":87506,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87508,"byte_end":87582,"line_start":232,"line_end":232,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87584,"byte_end":87607,"line_start":233,"line_end":233,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88894,"byte_end":88902,"line_start":265,"line_end":265,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87658,"byte_end":87719,"line_start":237,"line_end":237,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87721,"byte_end":87724,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87726,"byte_end":87796,"line_start":239,"line_end":239,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87798,"byte_end":87871,"line_start":240,"line_end":240,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87873,"byte_end":87948,"line_start":241,"line_end":241,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":87950,"byte_end":88012,"line_start":242,"line_end":242,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88014,"byte_end":88017,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88019,"byte_end":88035,"line_start":244,"line_end":244,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88037,"byte_end":88040,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88042,"byte_end":88118,"line_start":246,"line_end":246,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88120,"byte_end":88192,"line_start":247,"line_end":247,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88194,"byte_end":88268,"line_start":248,"line_end":248,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88270,"byte_end":88289,"line_start":249,"line_end":249,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88291,"byte_end":88364,"line_start":250,"line_end":250,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88366,"byte_end":88391,"line_start":251,"line_end":251,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88393,"byte_end":88396,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88398,"byte_end":88412,"line_start":253,"line_end":253,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88414,"byte_end":88417,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88419,"byte_end":88494,"line_start":255,"line_end":255,"column_start":2,"column_end":77}},{"value":"/ domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88496,"byte_end":88565,"line_start":256,"line_end":256,"column_start":2,"column_end":71}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88567,"byte_end":88640,"line_start":257,"line_end":257,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88642,"byte_end":88718,"line_start":258,"line_end":258,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88720,"byte_end":88764,"line_start":259,"line_end":259,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88766,"byte_end":88769,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88771,"byte_end":88783,"line_start":261,"line_end":261,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88785,"byte_end":88788,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88790,"byte_end":88864,"line_start":263,"line_end":263,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88866,"byte_end":88889,"line_start":264,"line_end":264,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90183,"byte_end":90191,"line_start":296,"line_end":296,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":88950,"byte_end":89008,"line_start":268,"line_end":268,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89010,"byte_end":89013,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89015,"byte_end":89084,"line_start":270,"line_end":270,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89086,"byte_end":89160,"line_start":271,"line_end":271,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89162,"byte_end":89237,"line_start":272,"line_end":272,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89239,"byte_end":89301,"line_start":273,"line_end":273,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89303,"byte_end":89306,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89308,"byte_end":89324,"line_start":275,"line_end":275,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89326,"byte_end":89329,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89331,"byte_end":89407,"line_start":277,"line_end":277,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89409,"byte_end":89481,"line_start":278,"line_end":278,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89483,"byte_end":89557,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89559,"byte_end":89578,"line_start":280,"line_end":280,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89580,"byte_end":89653,"line_start":281,"line_end":281,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89655,"byte_end":89680,"line_start":282,"line_end":282,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89682,"byte_end":89685,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89687,"byte_end":89701,"line_start":284,"line_end":284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89703,"byte_end":89706,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89708,"byte_end":89783,"line_start":286,"line_end":286,"column_start":2,"column_end":77}},{"value":"/ domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89785,"byte_end":89854,"line_start":287,"line_end":287,"column_start":2,"column_end":71}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89856,"byte_end":89928,"line_start":288,"line_end":288,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":89930,"byte_end":90006,"line_start":289,"line_end":289,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90008,"byte_end":90053,"line_start":290,"line_end":290,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90055,"byte_end":90058,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90060,"byte_end":90072,"line_start":292,"line_end":292,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90074,"byte_end":90077,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90079,"byte_end":90153,"line_start":294,"line_end":294,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90155,"byte_end":90178,"line_start":295,"line_end":295,"column_start":2,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":494},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":4962},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":4972},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":519},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2816},{"krate":0,"index":2814},{"krate":0,"index":2811},{"krate":0,"index":2806},{"krate":0,"index":2808},{"krate":0,"index":2802},{"krate":0,"index":2799},{"krate":0,"index":2793},{"krate":0,"index":2795},{"krate":0,"index":2782},{"krate":0,"index":520},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":2819},{"krate":0,"index":2857},{"krate":0,"index":2855},{"krate":0,"index":2852},{"krate":0,"index":2847},{"krate":0,"index":2849},{"krate":0,"index":2843},{"krate":0,"index":2840},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2823},{"krate":0,"index":552},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":2860},{"krate":0,"index":2898},{"krate":0,"index":2896},{"krate":0,"index":2893},{"krate":0,"index":2888},{"krate":0,"index":2890},{"krate":0,"index":2884},{"krate":0,"index":2881},{"krate":0,"index":2875},{"krate":0,"index":2877},{"krate":0,"index":2864},{"krate":0,"index":565},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":2901},{"krate":0,"index":2934},{"krate":0,"index":2932},{"krate":0,"index":2929},{"krate":0,"index":2924},{"krate":0,"index":2926},{"krate":0,"index":2920},{"krate":0,"index":2917},{"krate":0,"index":2911},{"krate":0,"index":2913},{"krate":0,"index":2904},{"krate":0,"index":578},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":2937},{"krate":0,"index":2970},{"krate":0,"index":2968},{"krate":0,"index":2965},{"krate":0,"index":2960},{"krate":0,"index":2962},{"krate":0,"index":2956},{"krate":0,"index":2953},{"krate":0,"index":2947},{"krate":0,"index":2949},{"krate":0,"index":2940},{"krate":0,"index":596},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":618},{"krate":0,"index":622},{"krate":0,"index":626}],"decl_id":null,"docs":" Typed metadata of registers.","sig":null,"attributes":[{"value":"* Typed metadata of registers.\n\nThis module provides types which guarantee certain properties about working with\nindividual bits of registers.\n\nThe main advantage of the types in this module is that they provide\ntype-dependent range constrictions for index values, making it impossible to\nhave an index out of bounds for a register, and creating a sequence of type\ntransformations that give assurance about the continued validity of each value\nin its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, `bitvec` can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nit requires. This chain of assurance means that operations that interact with\nmemory can be confident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces `BitIdx` values from region computation. These types cannot\nbe publicly constructed, and are only ever the result of pointer analysis. As\nsuch, they rely on correctness of the memory regions provided to library entry\npoints, and those entry points can leverage the Rust type system to ensure\nsafety there.\n\n`BitIdx` is transformed to `BitPos` through the `BitOrder` trait, which has an\nassociated verification function to prove that implementations are correct.\n`BitPos` is the only type that can describe memory operations, and is used to\ncreate selection masks of `BitSel` and `BitMask`.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":110432,"byte_end":111922,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":517},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":112681,"byte_end":112692,"line_start":92,"line_end":92,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::index::BitRegister","value":"BitRegister: BitMemory + BitOps + BitStore","parent":null,"children":[],"decl_id":null,"docs":" Marks that an integer can be used in a processor register.\n","sig":null,"attributes":[{"value":"/ Marks that an integer can be used in a processor register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":112608,"byte_end":112670,"line_start":91,"line_end":91,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2778},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":114241,"byte_end":114247,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":2780},{"krate":0,"index":2781}],"decl_id":null,"docs":" A semantic index of a single bit within a register `R`.","sig":null,"attributes":[{"value":"* A semantic index of a single bit within a register `R`.\n\nThis type is a counter in the range `0 .. R::BITS`, and marks the semantic\nposition of a bit according to some [`BitOrder`] implementation. As an abstract\ncounter, it can be used in arithmetic without having to go through `BitOrder`\ntranslation to an electrical position.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 .. R::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value.\n\n# Construction\n\nThis type cannot be constructed outside the `bitvec` crate. `bitvec` will\nconstruct safe values of this type, and allows users to view them and use them\nto construct other index types from them. All values of this type constructed by\n`bitvec` are known to be correct based on user input to the crate.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":113105,"byte_end":114087,"line_start":114,"line_end":138,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":114139,"byte_end":114159,"line_start":140,"line_end":140,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115541,"byte_end":115554,"line_start":195,"line_end":195,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115087,"byte_end":115159,"line_start":178,"line_end":178,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115161,"byte_end":115164,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115166,"byte_end":115182,"line_start":180,"line_end":180,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115184,"byte_end":115187,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ - `idx`: A semantic index of a bit within an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115189,"byte_end":115251,"line_start":182,"line_end":182,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115253,"byte_end":115256,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115258,"byte_end":115271,"line_start":184,"line_end":184,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115273,"byte_end":115276,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ `idx` wrapped in a `BitIdx`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115278,"byte_end":115310,"line_start":186,"line_end":186,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115312,"byte_end":115315,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115317,"byte_end":115329,"line_start":188,"line_end":188,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115331,"byte_end":115334,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ `idx` **must** be within the valid range `0 .. R::BITS`. In debug","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115336,"byte_end":115405,"line_start":190,"line_end":190,"column_start":2,"column_end":71}},{"value":"/ builds, invalid `idx` values cause a panic; release builds do not check","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115407,"byte_end":115482,"line_start":191,"line_end":191,"column_start":2,"column_end":77}},{"value":"/ the input.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115484,"byte_end":115498,"line_start":192,"line_end":192,"column_start":2,"column_end":16}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":115500,"byte_end":115509,"line_start":193,"line_end":193,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116758,"byte_end":116766,"line_start":242,"line_end":242,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116544,"byte_end":116618,"line_start":237,"line_end":237,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116620,"byte_end":116623,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ This forwards to `O::at::<R>`, and is the only public, safe, constructor","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116625,"byte_end":116701,"line_start":239,"line_end":239,"column_start":2,"column_end":78}},{"value":"/ for a position counter.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116703,"byte_end":116730,"line_start":240,"line_end":240,"column_start":2,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116732,"byte_end":116749,"line_start":241,"line_end":241,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117046,"byte_end":117052,"line_start":252,"line_end":252,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116834,"byte_end":116906,"line_start":247,"line_end":247,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116908,"byte_end":116911,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ This forwards to `O::select::<R>`, and is the only public, safe,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116913,"byte_end":116981,"line_start":249,"line_end":249,"column_start":2,"column_end":70}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":116983,"byte_end":117018,"line_start":250,"line_end":250,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117020,"byte_end":117037,"line_start":251,"line_end":251,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117330,"byte_end":117334,"line_start":262,"line_end":262,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117124,"byte_end":117185,"line_start":257,"line_end":257,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117187,"byte_end":117190,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over `Self::select`. It is one of the few public,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117192,"byte_end":117265,"line_start":259,"line_end":259,"column_start":2,"column_end":75}},{"value":"/ safe, constructors of a multi-bit mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117267,"byte_end":117310,"line_start":260,"line_end":260,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117312,"byte_end":117321,"line_start":261,"line_end":261,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117507,"byte_end":117512,"line_start":270,"line_end":270,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdx<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal index value.\n","sig":null,"attributes":[{"value":"/ Views the internal index value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117412,"byte_end":117447,"line_start":267,"line_end":267,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117449,"byte_end":117466,"line_start":268,"line_end":268,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117468,"byte_end":117498,"line_start":269,"line_end":269,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118526,"byte_end":118531,"line_start":304,"line_end":304,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitTail<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Constructs a range over all indices between a start and end point.","sig":null,"attributes":[{"value":"/ Constructs a range over all indices between a start and end point.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117786,"byte_end":117856,"line_start":283,"line_end":283,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117858,"byte_end":117861,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the `RangeOps` family are not yet","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117863,"byte_end":117934,"line_start":285,"line_end":285,"column_start":2,"column_end":73}},{"value":"/ stable, and heterogenous ranges are not supported, this must be an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":117936,"byte_end":118006,"line_start":286,"line_end":286,"column_start":2,"column_end":72}},{"value":"/ opaque iterator rather than a direct `Range<BitIdx<R>>`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118008,"byte_end":118068,"line_start":287,"line_end":287,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118070,"byte_end":118073,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118075,"byte_end":118091,"line_start":289,"line_end":289,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118093,"byte_end":118096,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118098,"byte_end":118172,"line_start":291,"line_end":291,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118174,"byte_end":118211,"line_start":292,"line_end":292,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118213,"byte_end":118288,"line_start":293,"line_end":293,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118290,"byte_end":118335,"line_start":294,"line_end":294,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118337,"byte_end":118340,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118342,"byte_end":118355,"line_start":296,"line_end":296,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118357,"byte_end":118360,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118362,"byte_end":118432,"line_start":298,"line_end":298,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118434,"byte_end":118437,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118439,"byte_end":118457,"line_start":300,"line_end":300,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118459,"byte_end":118462,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118464,"byte_end":118506,"line_start":302,"line_end":302,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":118508,"byte_end":118517,"line_start":303,"line_end":303,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2819},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":125757,"byte_end":125764,"line_start":537,"line_end":537,"column_start":12,"column_end":19},"name":"BitTail","qualname":"::index::BitTail","value":"BitTail {  }","parent":null,"children":[{"krate":0,"index":2821},{"krate":0,"index":2822}],"decl_id":null,"docs":" Semantic index of a dead bit *after* a live region.","sig":null,"attributes":[{"value":"* Semantic index of a dead bit *after* a live region.\n\nLike `BitIdx<R>`, this type indicates a semantic counter within a register `R`.\nHowever, it marks the position of a *dead* bit *after* a live range. This means\nthat it is permitted to have the value of `R::BITS`, to indicate that a live\nregion touches the semantic back edge of the register `R`.\n\nInstances of this type will only contain the value `0` when the span that\ncreated them is empty. Otherwise, they will have the range `1 ..= R::BITS`.\n\nThis type cannot be used for indexing into a register `R`, and does not\ntranslate to a `BitPos<R>`. It has no behavior other than viewing its internal\ncounter for region arithmetic.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 ..= R::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value.\n\n# Construction\n\nThis type cannot be directly constructed outside the `bitvec` crate. `bitvec`\nwill construct safe values of this type, and allows users to view them and use\nthem for region computation. All values of this type constructed by `bitvec` are\nknown to be correct based on user input to the crate.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":124271,"byte_end":125599,"line_start":502,"line_end":533,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":125655,"byte_end":125675,"line_start":535,"line_end":535,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":126837,"byte_end":126842,"line_start":583,"line_end":583,"column_start":9,"column_end":14},"name":"value","qualname":"<BitTail<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal tail value.\n","sig":null,"attributes":[{"value":"/ Views the internal tail value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":126751,"byte_end":126785,"line_start":580,"line_end":580,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":126787,"byte_end":126796,"line_start":581,"line_end":581,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":126798,"byte_end":126828,"line_start":582,"line_end":582,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2860},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130340,"byte_end":130346,"line_start":699,"line_end":699,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":2862},{"krate":0,"index":2863}],"decl_id":null,"docs":" An electrical position of a single bit within a register `R`.","sig":null,"attributes":[{"value":"* An electrical position of a single bit within a register `R`.\n\nThis type is used as the shift distance in the expression `1 << shamt`. It is\nonly produced by the translation of a semantic `BitIdx<R>` according to some\n[`BitOrder`] implementation using `BitOrder::at`. It can only be used for the\nconstruction of bit masks used to manipulate a register value during memory\naccess, and serves no other purpose.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 .. R::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value, and users are required to do the same.\n\n# Construction\n\nThis type offers public unsafe constructors. `bitvec` does not offer any public\nAPIs that take values of this type directly; it always routes through `BitOrder`\nimplementations. As `BitIdx` will only be constructed from safe, correct,\nvalues, and `BitOrder::at` is the only `BitIdx -> BitPos` transform function,\nall constructed `BitPos` values are known to be memory-correct.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":129009,"byte_end":130186,"line_start":669,"line_end":695,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130238,"byte_end":130258,"line_start":697,"line_end":697,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131060,"byte_end":131063,"line_start":727,"line_end":727,"column_start":16,"column_end":19},"name":"new","qualname":"<BitPos<R>>::new","value":"pub unsafe fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a value as a known-good position within an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130562,"byte_end":130628,"line_start":711,"line_end":711,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130630,"byte_end":130633,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130635,"byte_end":130651,"line_start":713,"line_end":713,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130653,"byte_end":130656,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ - `pos`: An electrical position of a bit within an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130658,"byte_end":130726,"line_start":715,"line_end":715,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130728,"byte_end":130731,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130733,"byte_end":130746,"line_start":717,"line_end":717,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130748,"byte_end":130751,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ If `pos` is outside the valid range `0 .. R::BITS`, this returns `None`;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130753,"byte_end":130829,"line_start":719,"line_end":719,"column_start":2,"column_end":78}},{"value":"/ otherwise, it returns a `BitPos` wrapping the `pos` value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130831,"byte_end":130893,"line_start":720,"line_end":720,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130895,"byte_end":130898,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130900,"byte_end":130912,"line_start":722,"line_end":722,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130914,"byte_end":130917,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::at` implementation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130919,"byte_end":130995,"line_start":724,"line_end":724,"column_start":2,"column_end":78}},{"value":"/ which is verified to be correct.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130997,"byte_end":131033,"line_start":725,"line_end":725,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131035,"byte_end":131044,"line_start":726,"line_end":726,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131761,"byte_end":131774,"line_start":754,"line_end":754,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a value as an assumed-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a value as an assumed-good position within an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131236,"byte_end":131305,"line_start":735,"line_end":735,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131307,"byte_end":131310,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131312,"byte_end":131328,"line_start":737,"line_end":737,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131330,"byte_end":131333,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ - `pos`: An electrical position within an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131335,"byte_end":131394,"line_start":739,"line_end":739,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131396,"byte_end":131399,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131401,"byte_end":131414,"line_start":741,"line_end":741,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131416,"byte_end":131419,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ `pos` wrapped in a `BitPos`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131421,"byte_end":131453,"line_start":743,"line_end":743,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131455,"byte_end":131458,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131460,"byte_end":131472,"line_start":745,"line_end":745,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131474,"byte_end":131477,"line_start":746,"line_end":746,"column_start":2,"column_end":5}},{"value":"/ `pos` **must** be within the valid range `0 .. R::BITS`. In debug","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131479,"byte_end":131548,"line_start":747,"line_end":747,"column_start":2,"column_end":71}},{"value":"/ builds, invalid `pos` values cause a panic; release builds do not check","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131550,"byte_end":131625,"line_start":748,"line_end":748,"column_start":2,"column_end":77}},{"value":"/ the input.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131627,"byte_end":131641,"line_start":749,"line_end":749,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131643,"byte_end":131646,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a correct `BitOrder::at`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131648,"byte_end":131713,"line_start":751,"line_end":751,"column_start":2,"column_end":67}},{"value":"/ implementation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131715,"byte_end":131734,"line_start":752,"line_end":752,"column_start":2,"column_end":21}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131736,"byte_end":131745,"line_start":753,"line_end":753,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132188,"byte_end":132194,"line_start":776,"line_end":776,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a one-hot selection mask from the position counter.","sig":null,"attributes":[{"value":"/ Constructs a one-hot selection mask from the position counter.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131925,"byte_end":131991,"line_start":764,"line_end":764,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131993,"byte_end":131996,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ This is a well-typed `1 << pos`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":131998,"byte_end":132034,"line_start":766,"line_end":766,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132036,"byte_end":132039,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132041,"byte_end":132057,"line_start":768,"line_end":768,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132059,"byte_end":132062,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132064,"byte_end":132076,"line_start":770,"line_end":770,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132078,"byte_end":132081,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132083,"byte_end":132096,"line_start":772,"line_end":772,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132098,"byte_end":132101,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ A one-hot mask for `R` selecting the bit specified by `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132103,"byte_end":132168,"line_start":774,"line_end":774,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132170,"byte_end":132179,"line_start":775,"line_end":775,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132536,"byte_end":132540,"line_start":792,"line_end":792,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an untyped bitmask from the position counter.","sig":null,"attributes":[{"value":"/ Constructs an untyped bitmask from the position counter.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132253,"byte_end":132313,"line_start":780,"line_end":780,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132315,"byte_end":132318,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ This removes the one-hot requirement from the selection mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132320,"byte_end":132385,"line_start":782,"line_end":782,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132387,"byte_end":132390,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132392,"byte_end":132408,"line_start":784,"line_end":784,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132410,"byte_end":132413,"line_start":785,"line_end":785,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132415,"byte_end":132427,"line_start":786,"line_end":786,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132429,"byte_end":132432,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132434,"byte_end":132447,"line_start":788,"line_end":788,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132449,"byte_end":132452,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ A mask for `R` selecting only the bit specified by `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132454,"byte_end":132516,"line_start":790,"line_end":790,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132518,"byte_end":132527,"line_start":791,"line_end":791,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132658,"byte_end":132663,"line_start":798,"line_end":798,"column_start":9,"column_end":14},"name":"value","qualname":"<BitPos<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal position value.\n","sig":null,"attributes":[{"value":"/ Views the internal position value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132600,"byte_end":132638,"line_start":796,"line_end":796,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132640,"byte_end":132649,"line_start":797,"line_end":797,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2901},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134101,"byte_end":134107,"line_start":850,"line_end":850,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":2903}],"decl_id":null,"docs":" A one-hot selection mask, to be applied to a register `R`.","sig":null,"attributes":[{"value":"* A one-hot selection mask, to be applied to a register `R`.\n\nThis type selects exactly one bit, and is produced by the conversion of a\nsemantic [`BitIdx`] to a [`BitPos`] through a [`BitOrder`] implementation, and\nthen applying `1 << pos`. Values of this type are used to select only the bit\nspecified by a `BitIdx` when performing memory operations.\n\n# Type Parameters\n\n- `R`: The register type that these values govern.\n\n# Validity\n\nValues of this type are required to have exactly one bit set to `1` and all\nother bits set to `0`.\n\n# Construction\n\nThis type is only constructed from `BitPos` values, which are themselves only\nconstructed by a chain of known-good `BitIdx` values passed into known-correct\n`BitOrder` implementations. As such, `bitvec` can use `BitSel` values with full\nconfidence that they are correct in the surrounding context.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":133143,"byte_end":133998,"line_start":825,"line_end":847,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":133999,"byte_end":134019,"line_start":848,"line_end":848,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134717,"byte_end":134720,"line_start":876,"line_end":876,"column_start":16,"column_end":19},"name":"new","qualname":"<BitSel<R>>::new","value":"pub unsafe fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as a known-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a selector value as a known-good selection of an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134220,"byte_end":134292,"line_start":860,"line_end":860,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134294,"byte_end":134297,"line_start":861,"line_end":861,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134299,"byte_end":134315,"line_start":862,"line_end":862,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134317,"byte_end":134320,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134322,"byte_end":134388,"line_start":864,"line_end":864,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134390,"byte_end":134393,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134395,"byte_end":134408,"line_start":866,"line_end":866,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134410,"byte_end":134413,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ If `sel` does not have exactly one bit set, this returns `None`;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134415,"byte_end":134483,"line_start":868,"line_end":868,"column_start":2,"column_end":70}},{"value":"/ otherwise, it returns a `BitSel` wrapping the `sel` value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134485,"byte_end":134547,"line_start":869,"line_end":869,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134549,"byte_end":134552,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134554,"byte_end":134566,"line_start":871,"line_end":871,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134568,"byte_end":134571,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::select`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134573,"byte_end":134638,"line_start":873,"line_end":873,"column_start":2,"column_end":67}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134640,"byte_end":134690,"line_start":874,"line_end":874,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134692,"byte_end":134701,"line_start":875,"line_end":875,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135374,"byte_end":135387,"line_start":902,"line_end":902,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as an assumed-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a selector value as an assumed-good selection of an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134824,"byte_end":134899,"line_start":883,"line_end":883,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134901,"byte_end":134904,"line_start":884,"line_end":884,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134906,"byte_end":134922,"line_start":885,"line_end":885,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134924,"byte_end":134927,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134929,"byte_end":134995,"line_start":887,"line_end":887,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134997,"byte_end":135000,"line_start":888,"line_end":888,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135002,"byte_end":135015,"line_start":889,"line_end":889,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135017,"byte_end":135020,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ `sel` wrapped in a `BitSel`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135022,"byte_end":135054,"line_start":891,"line_end":891,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135056,"byte_end":135059,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135061,"byte_end":135073,"line_start":893,"line_end":893,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135075,"byte_end":135078,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ `sel` **must** have exactly one bit set high and all others low. In","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135080,"byte_end":135151,"line_start":895,"line_end":895,"column_start":2,"column_end":73}},{"value":"/ debug builds, invalid `sel` values cause a panic; release builds do not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135153,"byte_end":135228,"line_start":896,"line_end":896,"column_start":2,"column_end":77}},{"value":"/ check the input.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135230,"byte_end":135250,"line_start":897,"line_end":897,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135252,"byte_end":135255,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a correct `BitOrder::select`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135257,"byte_end":135326,"line_start":899,"line_end":899,"column_start":2,"column_end":71}},{"value":"/ implementation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135328,"byte_end":135347,"line_start":900,"line_end":900,"column_start":2,"column_end":21}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135349,"byte_end":135358,"line_start":901,"line_end":901,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135665,"byte_end":135669,"line_start":916,"line_end":916,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R> where R: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Converts the selector into a bit mask.","sig":null,"attributes":[{"value":"/ Converts the selector into a bit mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135572,"byte_end":135614,"line_start":912,"line_end":912,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135616,"byte_end":135619,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135621,"byte_end":135645,"line_start":914,"line_end":914,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135647,"byte_end":135656,"line_start":915,"line_end":915,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135800,"byte_end":135805,"line_start":923,"line_end":923,"column_start":9,"column_end":14},"name":"value","qualname":"<BitSel<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Views the internal selector value.\n","sig":null,"attributes":[{"value":"/ Views the internal selector value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135742,"byte_end":135780,"line_start":921,"line_end":921,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135782,"byte_end":135791,"line_start":922,"line_end":922,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135889,"byte_end":135898,"line_start":928,"line_end":928,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Ranges over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Ranges over all possible selector values.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":135835,"byte_end":135880,"line_start":927,"line_end":927,"column_start":2,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2937},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137304,"byte_end":137311,"line_start":982,"line_end":982,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":2939}],"decl_id":null,"docs":" A multi-bit selection mask.","sig":null,"attributes":[{"value":"* A multi-bit selection mask.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batch operation on a register.\n\n# Construction\n\nIt is only constructed by accumulating `BitSel` values. The chain of custody for\nsafe construction in this module and in `order` ensures that all masks that are\napplied to register values can be trusted to not cause memory unsafety.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136712,"byte_end":137201,"line_start":968,"line_end":979,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137202,"byte_end":137222,"line_start":980,"line_end":980,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":598},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137467,"byte_end":137470,"line_start":993,"line_end":993,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":596},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137439,"byte_end":137455,"line_start":992,"line_end":992,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":599},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137530,"byte_end":137534,"line_start":995,"line_end":995,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":596},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137500,"byte_end":137518,"line_start":994,"line_end":994,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138179,"byte_end":138182,"line_start":1018,"line_end":1018,"column_start":16,"column_end":19},"name":"new","qualname":"<BitMask<R>>::new","value":"pub unsafe fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137566,"byte_end":137604,"line_start":997,"line_end":997,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137606,"byte_end":137609,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137611,"byte_end":137686,"line_start":999,"line_end":999,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and reading it only as a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137688,"byte_end":137759,"line_start":1000,"line_end":1000,"column_start":2,"column_end":73}},{"value":"/ bit-mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137761,"byte_end":137774,"line_start":1001,"line_end":1001,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137776,"byte_end":137779,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137781,"byte_end":137797,"line_start":1003,"line_end":1003,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137799,"byte_end":137802,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ - `mask`: Some integer value","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137804,"byte_end":137836,"line_start":1005,"line_end":1005,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137838,"byte_end":137841,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137843,"byte_end":137856,"line_start":1007,"line_end":1007,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137858,"byte_end":137861,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ `mask` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137863,"byte_end":137932,"line_start":1009,"line_end":1009,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137934,"byte_end":137937,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137939,"byte_end":137951,"line_start":1011,"line_end":1011,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137953,"byte_end":137956,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::mask`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137958,"byte_end":138021,"line_start":1013,"line_end":1013,"column_start":2,"column_end":65}},{"value":"/ implementation which is verified to be correct.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138023,"byte_end":138074,"line_start":1014,"line_end":1014,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138076,"byte_end":138079,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating `BitSel` values using the `Sum` implementation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138081,"byte_end":138152,"line_start":1016,"line_end":1016,"column_start":2,"column_end":73}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138154,"byte_end":138163,"line_start":1017,"line_end":1017,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138487,"byte_end":138494,"line_start":1033,"line_end":1033,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138226,"byte_end":138279,"line_start":1022,"line_end":1022,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138281,"byte_end":138284,"line_start":1023,"line_end":1023,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138286,"byte_end":138302,"line_start":1024,"line_end":1024,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138304,"byte_end":138307,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138309,"byte_end":138321,"line_start":1026,"line_end":1026,"column_start":2,"column_end":14}},{"value":"/ - `sel`: The selector bit to activate in the new mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138323,"byte_end":138381,"line_start":1027,"line_end":1027,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138383,"byte_end":138386,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138388,"byte_end":138401,"line_start":1029,"line_end":1029,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138403,"byte_end":138406,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with the selector at `sel` activated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138408,"byte_end":138467,"line_start":1031,"line_end":1031,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138469,"byte_end":138478,"line_start":1032,"line_end":1032,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138815,"byte_end":138821,"line_start":1049,"line_end":1049,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector into an existing mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138563,"byte_end":138608,"line_start":1038,"line_end":1038,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138610,"byte_end":138613,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138615,"byte_end":138631,"line_start":1040,"line_end":1040,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138633,"byte_end":138636,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138638,"byte_end":138655,"line_start":1042,"line_end":1042,"column_start":2,"column_end":19}},{"value":"/ - `sel`: The selector bit to insert into the mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138657,"byte_end":138711,"line_start":1043,"line_end":1043,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138713,"byte_end":138716,"line_start":1044,"line_end":1044,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138718,"byte_end":138731,"line_start":1045,"line_end":1045,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138733,"byte_end":138736,"line_start":1046,"line_end":1046,"column_start":2,"column_end":5}},{"value":"/ The selector’s bit in the `self` mask is activated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138738,"byte_end":138795,"line_start":1047,"line_end":1047,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138797,"byte_end":138806,"line_start":1048,"line_end":1048,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139126,"byte_end":139130,"line_start":1064,"line_end":1064,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether a mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether a mask contains a given selector bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138880,"byte_end":138935,"line_start":1053,"line_end":1053,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138937,"byte_end":138940,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ # Paramters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138942,"byte_end":138957,"line_start":1055,"line_end":1055,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138959,"byte_end":138962,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138964,"byte_end":138976,"line_start":1057,"line_end":1057,"column_start":2,"column_end":14}},{"value":"/ - `sel`: The selector bit to test in the `self` mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":138978,"byte_end":139035,"line_start":1058,"line_end":1058,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139037,"byte_end":139040,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139042,"byte_end":139055,"line_start":1060,"line_end":1060,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139057,"byte_end":139060,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ Whether `self` has set the bit at `sel`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139062,"byte_end":139106,"line_start":1062,"line_end":1062,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139108,"byte_end":139117,"line_start":1063,"line_end":1063,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139255,"byte_end":139260,"line_start":1070,"line_end":1070,"column_start":9,"column_end":14},"name":"value","qualname":"<BitMask<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Views the internal mask value.\n","sig":null,"attributes":[{"value":"/ Views the internal mask value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139201,"byte_end":139235,"line_start":1068,"line_end":1068,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139237,"byte_end":139246,"line_start":1069,"line_end":1069,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":630},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":2973},{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2980},{"krate":0,"index":2981},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2996},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":647}],"decl_id":null,"docs":" Descriptions of integer types","sig":null,"attributes":[{"value":"* Descriptions of integer types\n\nThis module describes the integer types used to hold bare data. This module\ngoverns the way the processor manipulates integer regions of memory, without\nconcern for interaction with specifics of register or bus behavior.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":142677,"byte_end":142936,"line_start":1,"line_end":6,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":633},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143343,"byte_end":143352,"line_start":21,"line_end":21,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638}],"decl_id":null,"docs":" Description of an integer type.","sig":null,"attributes":[{"value":"* Description of an integer type.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the crate to adequately describe the memory bus. This\ntrait has **no** bearing on the processor instructions or registers used to\ninteract with memory.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":142978,"byte_end":143332,"line_start":12,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":634},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143639,"byte_end":143643,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"BITS","qualname":"::mem::BitMemory::BITS","value":"u8","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" The bit width of the integer.","sig":null,"attributes":[{"value":"/ The bit width of the integer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143383,"byte_end":143416,"line_start":22,"line_end":22,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143418,"byte_end":143421,"line_start":23,"line_end":23,"column_start":2,"column_end":5}},{"value":"/ `mem::size_of` returns the size in bytes, and bytes are always eight","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143423,"byte_end":143495,"line_start":24,"line_end":24,"column_start":2,"column_end":74}},{"value":"/ bits on architectures Rust targets.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143497,"byte_end":143536,"line_start":25,"line_end":25,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143538,"byte_end":143541,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ Issue #76904 will place this constant on the fundamentals directly, as a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143543,"byte_end":143619,"line_start":27,"line_end":27,"column_start":2,"column_end":78}},{"value":"/ `u32`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143621,"byte_end":143631,"line_start":28,"line_end":28,"column_start":2,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":635},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143768,"byte_end":143772,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143685,"byte_end":143760,"line_start":30,"line_end":30,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":636},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143896,"byte_end":143900,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143815,"byte_end":143888,"line_start":32,"line_end":32,"column_start":2,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":637},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143994,"byte_end":143997,"line_start":36,"line_end":36,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitMemory::ONE","value":"Self","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" The value with only its least significant bit set to `1`.\n","sig":null,"attributes":[{"value":"/ The value with only its least significant bit set to `1`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143925,"byte_end":143986,"line_start":35,"line_end":35,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":638},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":144060,"byte_end":144063,"line_start":38,"line_end":38,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitMemory::ALL","value":"Self","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" The value with all of its bits set to `1`.\n","sig":null,"attributes":[{"value":"/ The value with all of its bits set to `1`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":144006,"byte_end":144052,"line_start":37,"line_end":37,"column_start":2,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":144669,"byte_end":144673,"line_start":67,"line_end":67,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":144285,"byte_end":144640,"line_start":53,"line_end":65,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":648},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":145926,"byte_end":145932,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":649},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":2997},{"krate":0,"index":3017},{"krate":0,"index":3016},{"krate":0,"index":3014},{"krate":0,"index":3012},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3006},{"krate":0,"index":3004},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":2999},{"krate":0,"index":666},{"krate":0,"index":3019},{"krate":0,"index":3039},{"krate":0,"index":3038},{"krate":0,"index":3036},{"krate":0,"index":3034},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3028},{"krate":0,"index":3026},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3021},{"krate":0,"index":675},{"krate":0,"index":684}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n`bitvec` structures are parametric over any ordering of bits within a register.\nThe `BitOrder` trait maps a cursor position (indicated by the `BitIdx` type) to an\nelectrical position (indicated by the `BitPos` type) within that element, and\nalso defines the order of traversal over a register.\n\nThe only requirement on implementors of `BitOrder` is that the transform function\nfrom cursor (`BitIdx`) to position (`BitPos`) is *total* (every integer in the\ndomain `0 .. T::BITS` is used) and *unique* (each cursor maps to one and only\none position, and each position is mapped by one and only one cursor).\nContiguity is not required.\n\n`BitOrder` is a stateless trait, and implementors should be zero-sized types.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":145939,"byte_end":146702,"line_start":1,"line_end":15,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":657},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149125,"byte_end":149133,"line_start":91,"line_end":91,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662}],"decl_id":null,"docs":" An ordering over a register.","sig":null,"attributes":[{"value":"* An ordering over a register.\n\n# Usage\n\n`bitvec` structures store and operate on semantic counts, not bit positions. The\n`BitOrder::at` function takes a semantic ordering, `BitIdx`, and produces an\nelectrical position, `BitPos`.\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect and have unspecified behavior. The best-case\nscenario is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. In the\nfuture, a verification function may be provided for your test suite; however, it\nis not yet possible to verify your implementation at compile-time.\n\nThis is an `unsafe trait` to implement, because you are responsible for\nupholding the state requirements. The types you manipulate have `unsafe fn`\nconstructors, because they require you to maintain correct and consistent\nprocesses in order for the rest of the library to use them.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nRust currently lacks Zig’s compile-time computation capability. This means that\n`bitvec` cannot fail a compile if it detects that a `BitOrder` implementation is\ninvalid and breaks the stated requirements. `bitvec` does offer a function,\n[`verify`], which ensures the correctness of an implementation. When Rust gains\nthe capability to run this function in generic `const` contexts, `bitvec` will\nuse it to prevent at compile-time the construction of data structures that use\nincorrect ordering implementations.\n\nThe verifier function panics when it detects invalid behavior, with an error\nmessage intended to clearly indicate the broken requirement.\n\n```rust\nuse bitvec::{\n  index::{BitIdx, BitPos, BitRegister},\n  order::{self, BitOrder},\n};\n# use bitvec::{index::*, order::Lsb0};\n\npub struct Custom;\nunsafe impl BitOrder for Custom {\n  fn at<R: BitRegister>(idx: BitIdx<R>) -> BitPos<R> {\n  // impl\n  # return Lsb0::at::<R>(idx);\n  }\n}\n\n#[test]\n#[cfg(test)]\nfn prove_custom() {\n  order::verify::<Custom>();\n}\n```\n\n[`verify`]: fn.verify.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":146789,"byte_end":149107,"line_start":26,"line_end":90,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151347,"byte_end":151349,"line_start":150,"line_end":150,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149137,"byte_end":149203,"line_start":92,"line_end":92,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149205,"byte_end":149208,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149210,"byte_end":149285,"line_start":94,"line_end":94,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be considered correct.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149287,"byte_end":149360,"line_start":95,"line_end":95,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149362,"byte_end":149365,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149367,"byte_end":149383,"line_start":97,"line_end":97,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149385,"byte_end":149388,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149390,"byte_end":149455,"line_start":99,"line_end":99,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149457,"byte_end":149460,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149462,"byte_end":149475,"line_start":101,"line_end":101,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149477,"byte_end":149480,"line_start":102,"line_end":102,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within a register `R`. See","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149482,"byte_end":149555,"line_start":103,"line_end":103,"column_start":2,"column_end":75}},{"value":"/ the `BitPos` documentation for what electrical positions are considered","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149557,"byte_end":149632,"line_start":104,"line_end":104,"column_start":2,"column_end":77}},{"value":"/ to mean.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149634,"byte_end":149646,"line_start":105,"line_end":105,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149648,"byte_end":149651,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149653,"byte_end":149674,"line_start":107,"line_end":107,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149676,"byte_end":149679,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type which the index and position describe.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149681,"byte_end":149748,"line_start":109,"line_end":109,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149750,"byte_end":149753,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149755,"byte_end":149773,"line_start":111,"line_end":111,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149775,"byte_end":149778,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149780,"byte_end":149854,"line_start":113,"line_end":113,"column_start":2,"column_end":76}},{"value":"/ input and output values for all possible type parameters:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149856,"byte_end":149917,"line_start":114,"line_end":114,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149919,"byte_end":149922,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149924,"byte_end":149939,"line_start":116,"line_end":116,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149941,"byte_end":149944,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the `BitIdx<R>`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":149946,"byte_end":150017,"line_start":118,"line_end":118,"column_start":2,"column_end":73}},{"value":"/ value range, and produce a corresponding `BitPos<R>`. It must not abort","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150019,"byte_end":150094,"line_start":119,"line_end":119,"column_start":2,"column_end":77}},{"value":"/ the program or return an invalid `BitPos<R>` for any input value in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150096,"byte_end":150171,"line_start":120,"line_end":120,"column_start":2,"column_end":77}},{"value":"/ `BitIdx<R>` range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150173,"byte_end":150195,"line_start":121,"line_end":121,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150197,"byte_end":150200,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150202,"byte_end":150218,"line_start":123,"line_end":123,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150220,"byte_end":150223,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150225,"byte_end":150299,"line_start":125,"line_end":125,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may select from a set of more than one","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150301,"byte_end":150376,"line_start":126,"line_end":126,"column_start":2,"column_end":77}},{"value":"/ output position, and no output position may be produced by more than one","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150378,"byte_end":150454,"line_start":127,"line_end":127,"column_start":2,"column_end":78}},{"value":"/ input index.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150456,"byte_end":150472,"line_start":128,"line_end":128,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150474,"byte_end":150477,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150479,"byte_end":150492,"line_start":130,"line_end":130,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150494,"byte_end":150497,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150499,"byte_end":150568,"line_start":132,"line_end":132,"column_start":2,"column_end":71}},{"value":"/ lifetime of the program. This function *may* refer to global state, but","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150570,"byte_end":150645,"line_start":133,"line_end":133,"column_start":2,"column_end":77}},{"value":"/ that state **must** be immutable for the program lifetime, and must not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150647,"byte_end":150722,"line_start":134,"line_end":134,"column_start":2,"column_end":77}},{"value":"/ be used to violate the totality or bijection requirements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150724,"byte_end":150786,"line_start":135,"line_end":135,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150788,"byte_end":150791,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150793,"byte_end":150815,"line_start":137,"line_end":137,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150817,"byte_end":150820,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ The produced `BitPos<R>` must be within the valid range of that type.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150822,"byte_end":150895,"line_start":139,"line_end":139,"column_start":2,"column_end":75}},{"value":"/ Call sites of this function will not take any steps to constrain the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150897,"byte_end":150969,"line_start":140,"line_end":140,"column_start":2,"column_end":74}},{"value":"/ output value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":150971,"byte_end":151035,"line_start":141,"line_end":141,"column_start":2,"column_end":66}},{"value":"/ `BitPos<R>`, the program is permanently incorrect, and will likely","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151037,"byte_end":151107,"line_start":142,"line_end":142,"column_start":2,"column_end":72}},{"value":"/ crash.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151109,"byte_end":151119,"line_start":143,"line_end":143,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151121,"byte_end":151124,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151126,"byte_end":151137,"line_start":145,"line_end":145,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151139,"byte_end":151142,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ This function will only ever be called with input values in the valid","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151144,"byte_end":151217,"line_start":147,"line_end":147,"column_start":2,"column_end":75}},{"value":"/ `BitIdx<R>` range. Implementors are not required to consider any values","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151219,"byte_end":151294,"line_start":148,"line_end":148,"column_start":2,"column_end":77}},{"value":"/ outside this range in their function body.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151296,"byte_end":151342,"line_start":149,"line_end":149,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152708,"byte_end":152714,"line_start":186,"line_end":186,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151409,"byte_end":151472,"line_start":153,"line_end":153,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151474,"byte_end":151477,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151479,"byte_end":151553,"line_start":155,"line_end":155,"column_start":2,"column_end":76}},{"value":"/ you.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151555,"byte_end":151563,"line_start":156,"line_end":156,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151565,"byte_end":151568,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls `Self::at` to produce","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151570,"byte_end":151645,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ an electrical position, then turns that into a selector mask by setting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151647,"byte_end":151722,"line_start":159,"line_end":159,"column_start":2,"column_end":77}},{"value":"/ the `n`th bit more significant than the least significant bit of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151724,"byte_end":151796,"line_start":160,"line_end":160,"column_start":2,"column_end":74}},{"value":"/ element. `BitOrder` implementations may choose to provide a faster mask","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151798,"byte_end":151873,"line_start":161,"line_end":161,"column_start":2,"column_end":77}},{"value":"/ production here, but they must satisfy the requirements listed below.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151875,"byte_end":151948,"line_start":162,"line_end":162,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151950,"byte_end":151953,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151955,"byte_end":151971,"line_start":164,"line_end":164,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151973,"byte_end":151976,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":151978,"byte_end":152043,"line_start":166,"line_end":166,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152045,"byte_end":152048,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152050,"byte_end":152063,"line_start":168,"line_end":168,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152065,"byte_end":152068,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152070,"byte_end":152139,"line_start":170,"line_end":170,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152141,"byte_end":152144,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152146,"byte_end":152167,"line_start":172,"line_end":172,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152169,"byte_end":152172,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ - `R`: The storage type for which the mask will be calculated. The mask","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152174,"byte_end":152249,"line_start":174,"line_end":174,"column_start":2,"column_end":77}},{"value":"/   must also be this type, as it will be applied to a register of `R` in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152251,"byte_end":152326,"line_start":175,"line_end":175,"column_start":2,"column_end":77}},{"value":"/   order to set, clear, or test a single bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152328,"byte_end":152376,"line_start":176,"line_end":176,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152378,"byte_end":152381,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152383,"byte_end":152401,"line_start":178,"line_end":178,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152403,"byte_end":152406,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152408,"byte_end":152477,"line_start":180,"line_end":180,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<R>(place)`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152479,"byte_end":152552,"line_start":181,"line_end":181,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152554,"byte_end":152557,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152559,"byte_end":152630,"line_start":183,"line_end":183,"column_start":2,"column_end":73}},{"value":"/ legal index in the `R` domain to a one-hot value of `R`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152632,"byte_end":152692,"line_start":184,"line_end":184,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152694,"byte_end":152703,"line_start":185,"line_end":185,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153851,"byte_end":153855,"line_start":224,"line_end":224,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\n            impl Into<Option<BitTail<R>>>: Into<Option<BitTail<R>>>>(impl Into<Option<BitIdx<R>>>,\n                                                                     impl Into<Option<BitTail<R>>>)\n-> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Constructs a multi-bit selector mask for batch operations on a single\n register `R`.","sig":null,"attributes":[{"value":"/ Constructs a multi-bit selector mask for batch operations on a single","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152810,"byte_end":152883,"line_start":191,"line_end":191,"column_start":2,"column_end":75}},{"value":"/ register `R`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152885,"byte_end":152902,"line_start":192,"line_end":192,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152904,"byte_end":152907,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152909,"byte_end":152983,"line_start":194,"line_end":194,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with `Self::select` and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":152985,"byte_end":153061,"line_start":195,"line_end":195,"column_start":2,"column_end":78}},{"value":"/ accumulating into a combined register value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153063,"byte_end":153111,"line_start":196,"line_end":196,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153113,"byte_end":153116,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153118,"byte_end":153134,"line_start":198,"line_end":198,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153136,"byte_end":153139,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153141,"byte_end":153197,"line_start":200,"line_end":200,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153199,"byte_end":153253,"line_start":201,"line_end":201,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153255,"byte_end":153258,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153260,"byte_end":153273,"line_start":203,"line_end":203,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153275,"byte_end":153278,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153280,"byte_end":153356,"line_start":205,"line_end":205,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153358,"byte_end":153385,"line_start":206,"line_end":206,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153387,"byte_end":153390,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153392,"byte_end":153413,"line_start":208,"line_end":208,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153415,"byte_end":153418,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ - `R`: The storage type for which the mask will be calculated. The mask","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153420,"byte_end":153495,"line_start":210,"line_end":210,"column_start":2,"column_end":77}},{"value":"/   must also be this type, as it will be applied to a register of `R` in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153497,"byte_end":153572,"line_start":211,"line_end":211,"column_start":2,"column_end":77}},{"value":"/   order to set, clear, or test all the selected bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153574,"byte_end":153631,"line_start":212,"line_end":212,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153633,"byte_end":153636,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153638,"byte_end":153656,"line_start":214,"line_end":214,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153658,"byte_end":153661,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153663,"byte_end":153709,"line_start":216,"line_end":216,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153711,"byte_end":153714,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153716,"byte_end":153734,"line_start":218,"line_end":218,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153736,"byte_end":153754,"line_start":219,"line_end":219,"column_start":2,"column_end":20}},{"value":"/   .map(1 << Self::at::<R>)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153756,"byte_end":153786,"line_start":220,"line_end":220,"column_start":2,"column_end":32}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153788,"byte_end":153826,"line_start":221,"line_end":221,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153828,"byte_end":153835,"line_start":222,"line_end":222,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":153837,"byte_end":153846,"line_start":223,"line_end":223,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2997},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":154438,"byte_end":154442,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from `MSbit` to `LSbit`.\n","sig":null,"attributes":[{"value":"/ Traverses a register from `MSbit` to `LSbit`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":154300,"byte_end":154349,"line_start":241,"line_end":241,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":3019},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":155922,"byte_end":155926,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from `LSbit` to `MSbit`.\n","sig":null,"attributes":[{"value":"/ Traverses a register from `LSbit` to `MSbit`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":155784,"byte_end":155833,"line_start":286,"line_end":286,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":684},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":157524,"byte_end":157533,"line_start":342,"line_end":342,"column_start":10,"column_end":19},"name":"LocalBits","qualname":"::order::LocalBits","value":"Lsb0","parent":null,"children":[],"decl_id":null,"docs":" A default bit ordering.","sig":null,"attributes":[{"value":"* A default bit ordering.\n\nTypically, your platform’s C compiler uses least-significant-bit-first ordering\nfor bitfields. The Lsb0 bit ordering and little-endian byte ordering are\notherwise completely unrelated.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":157262,"byte_end":157481,"line_start":335,"line_end":340,"column_start":1,"column_end":4}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":157482,"byte_end":157514,"line_start":341,"line_end":341,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":811},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":826},{"krate":0,"index":833},{"krate":0,"index":840},{"krate":0,"index":844},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860}],"decl_id":null,"docs":" `bitvec` symbol export","sig":null,"attributes":[{"value":"* `bitvec` symbol export\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\nThe prelude has a number of submodules, which can be used to limit the symbols\nimported.\n\nThe `base` module (`use bitvec::prelude::base::*;`) imports only the data types\nand macros needed to make direct use of the crate. It also imports trait\n*methods* from `BitField` and `BitView`, without importing those trait names.\n\nThe `macros` module imports only the constructor macros.\n\nThe `traits` module imports the names of all traits in the crate.\n\nThe `types` module imports all data types in the crate.\n\nYou may alternatively wish to import the crate root, or this prelude, under a\nshorter name, without bringing any other items into scope. The import statements\n\n```rust,ignore\nuse bitvec as bv;\n//  or\nuse bitvec::prelude as bv;\n```\n\nwill make the crate symbols available under the `bv` namespace instead of the\nlonger `bitvec`. The prelude contains all the major public symbols of the crate\ndirectly, while the crate root does not reëxport the items in its submodules.\nUse whichever path root you prefer: crate for full paths, and prelude for\nshortcuts.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":196663,"byte_end":197912,"line_start":1,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":812},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":197997,"byte_end":198001,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"name":"base","qualname":"::prelude::base","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":5038},{"krate":0,"index":821},{"krate":0,"index":5040},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"decl_id":null,"docs":" The base symbols, containing only the minimum needed to use the crate.\n","sig":null,"attributes":[{"value":"/ The base symbols, containing only the minimum needed to use the crate.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":197914,"byte_end":197988,"line_start":35,"line_end":35,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":826},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198302,"byte_end":198308,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"name":"macros","qualname":"::prelude::macros","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"decl_id":null,"docs":" Macros available for default export.\n","sig":null,"attributes":[{"value":"/ Macros available for default export.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198253,"byte_end":198293,"line_start":59,"line_end":59,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":833},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198473,"byte_end":198479,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"name":"traits","qualname":"::prelude::traits","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"decl_id":null,"docs":" Traits available for default export.\n","sig":null,"attributes":[{"value":"/ Traits available for default export.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198424,"byte_end":198464,"line_start":73,"line_end":73,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":840},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198674,"byte_end":198687,"line_start":85,"line_end":85,"column_start":9,"column_end":22},"name":"trait_methods","qualname":"::prelude::trait_methods","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"decl_id":null,"docs":" Imports trait methods without importing the traits themselves.\n","sig":null,"attributes":[{"value":"/ Imports trait methods without importing the traits themselves.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198599,"byte_end":198665,"line_start":84,"line_end":84,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":844},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198813,"byte_end":198818,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"name":"types","qualname":"::prelude::types","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":5078},{"krate":0,"index":853},{"krate":0,"index":5080},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857}],"decl_id":null,"docs":" Datatypes available for default export.\n","sig":null,"attributes":[{"value":"/ Datatypes available for default export.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/prelude.rs","byte_start":198761,"byte_end":198804,"line_start":92,"line_end":92,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":861},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":5110},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":5118},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":895},{"krate":0,"index":904},{"krate":0,"index":958},{"krate":0,"index":962},{"krate":0,"index":967},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":1177},{"krate":0,"index":1332},{"krate":0,"index":1386},{"krate":0,"index":1436},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n`BitSlice` is the primary working type of this crate. It is a wrapper type over\n`[T]` which enables you to view, manipulate, and take the address of individual\nbits in memory. It behaves in every possible respect exactly like an ordinary\nslice: it is dynamically-sized, and must be held by `&` or `&mut` reference,\njust like `[T]`, and implements every inherent method and trait that `[T]` does,\nto the absolute limits of what Rust permits.\n\nThe key to `BitSlice`’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe `core` and `std` distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[std]: https://doc.rust-lang.org/std/slice\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":199119,"byte_end":201025,"line_start":1,"line_end":37,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":214487,"byte_end":214495,"line_start":383,"line_end":383,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\nThis is the main working type of the crate. It is analagous to `[bool]`, and is\nwritten to be as close as possible to drop-in replacable for it. This type\ncontains most of the *methods* used to operate on memory, but it will rarely be\nnamed directly in your code. You should generally prefer to use [`BitArray`] for\nfixed-size arrays or [`BitVec`] for dynamic vectors, and use `&BitSlice`\nreferences only where you would directly use `&[bool]` or `&[u8]` references\nbefore using this crate.\n\nAs it is a slice wrapper, you are intended to work with this through references\n(`&BitSlice<O, T>` and `&mut BitSlice<O, T>`) or through the other data\nstructures provided by `bitvec` that are implemented atop it. Once created,\nreferences to `BitSlice` are guaranteed to work just like references to `[bool]`\nto the fullest extent possible in the Rust language.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\noperations from you. `BitSlice` does far more than this: it offers you the full\nRust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().position(stop).unwrap_or(0);\n  let back = bits.iter().rposition(stop).unwrap_or(0);\n  &bits[front ..= back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitMut<O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n`BitBox`, which behavios like `Box<[T]>`, and `BitVec`, which behaves like\n`Vec<T>`. It cannot be used as the type parameter to a standard-library-provided\nhandle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\nThis is the simpler of the two parameters. It refers to the integer type used to\nhold bits. It must be one of the Rust unsigned integer fundamentals: `u8`,\n`u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it can\nalso be the `Cell<N>` wrapper over any of those, or their equivalent types in\n`core::sync::atomic`. Unless you know you need to have `Cell` or atomic\nproperties, though, you should use a plain integer.\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\nThis is the more complex parameter. It has a default argument which, like\n`usize`, is the good-enough choice when you do not explicitly need to control\nthe representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! `bitvec` provides these two\nmain orders as types for you, and if you need a different one, it also provides\nthe tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value `T::min_value()`, for\nsigned integers on most machines).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on little-endian **byte**-ordered\nmachines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value `T::min_value()`\nfor most signed integers) and the final index at the least significant bit\n(numeric value `1`).\n\nThis is the ordering used by most C compilers to lay out bit-field struct\nmembers on big-endian **byte**-ordered machines.\n\n### Default Ordering\n\nThe default ordering is `Lsb0`, as it typically produces shorter object code\nthan `Msb0` does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use `mem::transmute` with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof `T: BitOrder` type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the `vec!` arguments, and creates an\nappropriate buffer in your program’s static memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet static_borrow = bits![0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable_static: &mut BitSlice<_, _> = bits![mut 0; 8];\n\nassert_ne!(static_borrow, mutable_static);\nmutable_static.clone_from_bitslice(static_borrow);\nassert_eq!(static_borrow, mutable_static);\n```\n\nNote that, despite constructing a `static mut` binding, the `bits![mut …]` call\nis not `unsafe`, as the constructed symbol is hidden and only accessible by the\nsole `&mut` reference returned by the macro call.\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct `BitSlice`\nreferences over them. These are the most basic ways to borrow memory and view it\nas bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements `.view_bits::<O>()` and `.view_bits_mut::<O>()`\nmethods on elements, arrays not larger than 32 elements, and slices. This trait,\nimported in the crate prelude, is *probably* the easiest way for you to borrow\nmemory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Msb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitBox`]: ../boxed/struct.BitBox.html\n[`BitMut<O, T>`]: struct.BitMut.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[`BitView`]: ../view/trait.BitView.html\n[`Lsb0`]: ../order/struct.Lsb0.html\n[`Msb0`]: ../order/struct.Msb0.html\n[`bits!`]: ../macro.bits.html\n[`bitvec::prelude::LocalBits`]: ../order/type.LocalBits.html\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":201426,"byte_end":214454,"line_start":76,"line_end":381,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":214455,"byte_end":214475,"line_start":382,"line_end":382,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216729,"byte_end":216741,"line_start":448,"line_end":448,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":215968,"byte_end":216036,"line_start":421,"line_end":421,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216038,"byte_end":216041,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `T` elements, provides a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216043,"byte_end":216113,"line_start":423,"line_end":423,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216115,"byte_end":216191,"line_start":424,"line_end":424,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216193,"byte_end":216230,"line_start":425,"line_end":425,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216232,"byte_end":216235,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216237,"byte_end":216253,"line_start":427,"line_end":427,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216255,"byte_end":216258,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216260,"byte_end":216313,"line_start":429,"line_end":429,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216315,"byte_end":216318,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216320,"byte_end":216333,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216335,"byte_end":216338,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216340,"byte_end":216389,"line_start":433,"line_end":433,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216391,"byte_end":216394,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216396,"byte_end":216410,"line_start":435,"line_end":435,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216412,"byte_end":216415,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216417,"byte_end":216428,"line_start":437,"line_end":437,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216430,"byte_end":216457,"line_start":438,"line_end":438,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216459,"byte_end":216462,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216464,"byte_end":216483,"line_start":440,"line_end":440,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<LocalBits, _>::from_element(&elem);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216485,"byte_end":216546,"line_start":441,"line_end":441,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216548,"byte_end":216578,"line_start":442,"line_end":442,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216580,"byte_end":216587,"line_start":443,"line_end":443,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216589,"byte_end":216592,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216594,"byte_end":216637,"line_start":445,"line_end":445,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits::<O>()`]: ../view/trait.BitView.html#method.view_bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216639,"byte_end":216709,"line_start":446,"line_end":446,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216711,"byte_end":216720,"line_start":447,"line_end":447,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217864,"byte_end":217880,"line_start":488,"line_end":488,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216872,"byte_end":216942,"line_start":455,"line_end":455,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216944,"byte_end":216947,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `T` elements, provides a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":216949,"byte_end":217019,"line_start":457,"line_end":457,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217021,"byte_end":217094,"line_start":458,"line_end":458,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217096,"byte_end":217140,"line_start":459,"line_end":459,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217142,"byte_end":217145,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217147,"byte_end":217163,"line_start":461,"line_end":461,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217165,"byte_end":217168,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217170,"byte_end":217227,"line_start":463,"line_end":463,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217229,"byte_end":217232,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217234,"byte_end":217247,"line_start":465,"line_end":465,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217249,"byte_end":217252,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217254,"byte_end":217311,"line_start":467,"line_end":467,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217313,"byte_end":217316,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217318,"byte_end":217390,"line_start":469,"line_end":469,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217392,"byte_end":217447,"line_start":470,"line_end":470,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217449,"byte_end":217452,"line_start":471,"line_end":471,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217454,"byte_end":217468,"line_start":472,"line_end":472,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217470,"byte_end":217473,"line_start":473,"line_end":473,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217475,"byte_end":217486,"line_start":474,"line_end":474,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217488,"byte_end":217515,"line_start":475,"line_end":475,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217517,"byte_end":217520,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217522,"byte_end":217546,"line_start":477,"line_end":477,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217548,"byte_end":217612,"line_start":478,"line_end":478,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217614,"byte_end":217637,"line_start":479,"line_end":479,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217639,"byte_end":217674,"line_start":480,"line_end":480,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217676,"byte_end":217700,"line_start":481,"line_end":481,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217702,"byte_end":217709,"line_start":482,"line_end":482,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217711,"byte_end":217714,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217716,"byte_end":217759,"line_start":484,"line_end":484,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits_mut::<O>()`]:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217761,"byte_end":217791,"line_start":485,"line_end":485,"column_start":2,"column_end":32}},{"value":"/ ../view/trait.BitView.html#method.view_bits_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217793,"byte_end":217844,"line_start":486,"line_end":486,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":217846,"byte_end":217855,"line_start":487,"line_end":487,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219216,"byte_end":219226,"line_start":532,"line_end":532,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Option<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218019,"byte_end":218093,"line_start":495,"line_end":495,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218095,"byte_end":218098,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218100,"byte_end":218170,"line_start":497,"line_end":497,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] that is equivalent to this function and may","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218172,"byte_end":218248,"line_start":498,"line_end":498,"column_start":2,"column_end":78}},{"value":"/ be more convenient for you to write.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218250,"byte_end":218290,"line_start":499,"line_end":499,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218292,"byte_end":218295,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218297,"byte_end":218313,"line_start":501,"line_end":501,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218315,"byte_end":218318,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218320,"byte_end":218389,"line_start":503,"line_end":503,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218391,"byte_end":218394,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218396,"byte_end":218409,"line_start":505,"line_end":505,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218411,"byte_end":218414,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ If `slice` does not have fewer than [`MAX_ELTS`] elements, this returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218416,"byte_end":218491,"line_start":507,"line_end":507,"column_start":2,"column_end":77}},{"value":"/ `None`. Otherwise, it returns a shared `&BitSlice` over the `slice`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218493,"byte_end":218564,"line_start":508,"line_end":508,"column_start":2,"column_end":73}},{"value":"/ elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218566,"byte_end":218579,"line_start":509,"line_end":509,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218581,"byte_end":218584,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218586,"byte_end":218602,"line_start":511,"line_end":511,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218604,"byte_end":218607,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218609,"byte_end":218677,"line_start":513,"line_end":513,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218679,"byte_end":218682,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218684,"byte_end":218698,"line_start":515,"line_end":515,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218700,"byte_end":218703,"line_start":516,"line_end":516,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218705,"byte_end":218716,"line_start":517,"line_end":517,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218718,"byte_end":218745,"line_start":518,"line_end":518,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218747,"byte_end":218750,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218752,"byte_end":218778,"line_start":520,"line_end":520,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218780,"byte_end":218843,"line_start":521,"line_end":521,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218845,"byte_end":218867,"line_start":522,"line_end":522,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218869,"byte_end":218876,"line_start":523,"line_end":523,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218878,"byte_end":218881,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218883,"byte_end":218959,"line_start":525,"line_end":525,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":218961,"byte_end":219026,"line_start":526,"line_end":526,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219028,"byte_end":219031,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219033,"byte_end":219076,"line_start":528,"line_end":528,"column_start":2,"column_end":45}},{"value":"/ [`MAX_ELTS`]: #associatedconstant.MAX_ELTS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219078,"byte_end":219124,"line_start":529,"line_end":529,"column_start":2,"column_end":48}},{"value":"/ [`.view_bits::<O>()`]: ../view/trait.BitView.html#method.view_bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219126,"byte_end":219196,"line_start":530,"line_end":530,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219198,"byte_end":219207,"line_start":531,"line_end":531,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219951,"byte_end":219971,"line_start":556,"line_end":556,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219491,"byte_end":219566,"line_start":542,"line_end":542,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219568,"byte_end":219605,"line_start":543,"line_end":543,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219607,"byte_end":219610,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219612,"byte_end":219624,"line_start":545,"line_end":545,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219626,"byte_end":219629,"line_start":546,"line_end":546,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is too long, then it will be capped at","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219631,"byte_end":219695,"line_start":547,"line_end":547,"column_start":2,"column_end":66}},{"value":"/ [`MAX_BITS`]. You are responsible for ensuring that the input slice is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219697,"byte_end":219771,"line_start":548,"line_end":548,"column_start":2,"column_end":76}},{"value":"/ not unduly truncated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219773,"byte_end":219798,"line_start":549,"line_end":549,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219800,"byte_end":219803,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ Prefer [`from_slice`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219805,"byte_end":219831,"line_start":551,"line_end":551,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219833,"byte_end":219836,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: #associatedconstant.MAX_BITS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219838,"byte_end":219884,"line_start":553,"line_end":553,"column_start":2,"column_end":48}},{"value":"/ [`from_slice`]: #method.from_slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219886,"byte_end":219924,"line_start":554,"line_end":554,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":219926,"byte_end":219935,"line_start":555,"line_end":555,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222187,"byte_end":222201,"line_start":624,"line_end":624,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Option<&mut Self>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220307,"byte_end":220374,"line_start":564,"line_end":564,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220376,"byte_end":220379,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220381,"byte_end":220451,"line_start":566,"line_end":566,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] that is equivalent to this function and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220453,"byte_end":220529,"line_start":567,"line_end":567,"column_start":2,"column_end":78}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220531,"byte_end":220575,"line_start":568,"line_end":568,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220577,"byte_end":220580,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220582,"byte_end":220598,"line_start":570,"line_end":570,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220600,"byte_end":220603,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220605,"byte_end":220678,"line_start":572,"line_end":572,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220680,"byte_end":220683,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220685,"byte_end":220698,"line_start":574,"line_end":574,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220700,"byte_end":220703,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `slice` elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220705,"byte_end":220764,"line_start":576,"line_end":576,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220766,"byte_end":220769,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220771,"byte_end":220844,"line_start":578,"line_end":578,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220846,"byte_end":220901,"line_start":579,"line_end":579,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220903,"byte_end":220906,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220908,"byte_end":220920,"line_start":581,"line_end":581,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220922,"byte_end":220925,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ This panics if `slice` does not have fewer than [`MAX_ELTS`] elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":220927,"byte_end":221001,"line_start":583,"line_end":583,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221003,"byte_end":221006,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: #associatedconstant.MAX_ELTS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221008,"byte_end":221054,"line_start":585,"line_end":585,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221056,"byte_end":221059,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221061,"byte_end":221077,"line_start":587,"line_end":587,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221079,"byte_end":221082,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221084,"byte_end":221158,"line_start":589,"line_end":589,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221160,"byte_end":221194,"line_start":590,"line_end":590,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221196,"byte_end":221199,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221201,"byte_end":221215,"line_start":592,"line_end":592,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221217,"byte_end":221220,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221222,"byte_end":221233,"line_start":594,"line_end":594,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221235,"byte_end":221262,"line_start":595,"line_end":595,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221264,"byte_end":221267,"line_start":596,"line_end":596,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221269,"byte_end":221298,"line_start":597,"line_end":597,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221300,"byte_end":221372,"line_start":598,"line_end":598,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221374,"byte_end":221377,"line_start":599,"line_end":599,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221379,"byte_end":221401,"line_start":600,"line_end":600,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221403,"byte_end":221425,"line_start":601,"line_end":601,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221427,"byte_end":221448,"line_start":602,"line_end":602,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221450,"byte_end":221478,"line_start":603,"line_end":603,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221480,"byte_end":221487,"line_start":604,"line_end":604,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221489,"byte_end":221492,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221494,"byte_end":221570,"line_start":606,"line_end":606,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221572,"byte_end":221646,"line_start":607,"line_end":607,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221648,"byte_end":221688,"line_start":608,"line_end":608,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221690,"byte_end":221693,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221695,"byte_end":221719,"line_start":610,"line_end":610,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221721,"byte_end":221754,"line_start":611,"line_end":611,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221756,"byte_end":221783,"line_start":612,"line_end":612,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221785,"byte_end":221788,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<LocalBits, usize>::MAX_ELTS];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221790,"byte_end":221862,"line_start":614,"line_end":614,"column_start":2,"column_end":74}},{"value":"/ let bits = BitSlice::<LocalBits, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221864,"byte_end":221944,"line_start":615,"line_end":615,"column_start":2,"column_end":82}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221946,"byte_end":221953,"line_start":616,"line_end":616,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":221955,"byte_end":222023,"line_start":617,"line_end":617,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222025,"byte_end":222032,"line_start":618,"line_end":618,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222034,"byte_end":222037,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222039,"byte_end":222082,"line_start":620,"line_end":620,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits_mut::<O>()`]:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222084,"byte_end":222114,"line_start":621,"line_end":621,"column_start":2,"column_end":32}},{"value":"/ ../view/trait.BitView.html#method.view_bits_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222116,"byte_end":222167,"line_start":622,"line_end":622,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222169,"byte_end":222178,"line_start":623,"line_end":623,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222852,"byte_end":222876,"line_start":646,"line_end":646,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222380,"byte_end":222455,"line_start":632,"line_end":632,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222457,"byte_end":222494,"line_start":633,"line_end":633,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222496,"byte_end":222499,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222501,"byte_end":222513,"line_start":635,"line_end":635,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222515,"byte_end":222518,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is too long, then it will be capped at","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222520,"byte_end":222584,"line_start":637,"line_end":637,"column_start":2,"column_end":66}},{"value":"/ [`MAX_BITS`]. You are responsible for ensuring that the input slice is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222586,"byte_end":222660,"line_start":638,"line_end":638,"column_start":2,"column_end":76}},{"value":"/ not unduly truncated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222662,"byte_end":222687,"line_start":639,"line_end":639,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222689,"byte_end":222692,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ Prefer [`from_slice_mut`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222694,"byte_end":222724,"line_start":641,"line_end":641,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222726,"byte_end":222729,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: #associatedconstant.MAX_BITS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222731,"byte_end":222777,"line_start":643,"line_end":643,"column_start":2,"column_end":48}},{"value":"/ [`from_slice_mut`]: #method.from_slice_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222779,"byte_end":222825,"line_start":644,"line_end":644,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":222827,"byte_end":222836,"line_start":645,"line_end":645,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223466,"byte_end":223471,"line_start":671,"line_end":671,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice. This is equivalent to `&[]` for ordinary\n slices.","sig":null,"attributes":[{"value":"/ Produces the empty slice. This is equivalent to `&[]` for ordinary","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223204,"byte_end":223274,"line_start":659,"line_end":659,"column_start":2,"column_end":72}},{"value":"/ slices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223276,"byte_end":223287,"line_start":660,"line_end":660,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223289,"byte_end":223292,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223294,"byte_end":223308,"line_start":662,"line_end":662,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223310,"byte_end":223313,"line_start":663,"line_end":663,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223315,"byte_end":223326,"line_start":664,"line_end":664,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223328,"byte_end":223355,"line_start":665,"line_end":665,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223357,"byte_end":223360,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223362,"byte_end":223406,"line_start":667,"line_end":667,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223408,"byte_end":223437,"line_start":668,"line_end":668,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223439,"byte_end":223446,"line_start":669,"line_end":669,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223448,"byte_end":223457,"line_start":670,"line_end":670,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223813,"byte_end":223822,"line_start":687,"line_end":687,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice. This is equivalent to `&mut []` for\n ordinary slices.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice. This is equivalent to `&mut []` for","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223531,"byte_end":223604,"line_start":675,"line_end":675,"column_start":2,"column_end":75}},{"value":"/ ordinary slices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223606,"byte_end":223626,"line_start":676,"line_end":676,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223628,"byte_end":223631,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223633,"byte_end":223647,"line_start":678,"line_end":678,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223649,"byte_end":223652,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223654,"byte_end":223665,"line_start":680,"line_end":680,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223667,"byte_end":223694,"line_start":681,"line_end":681,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223696,"byte_end":223699,"line_start":682,"line_end":682,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223701,"byte_end":223753,"line_start":683,"line_end":683,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223755,"byte_end":223784,"line_start":684,"line_end":684,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223786,"byte_end":223793,"line_start":685,"line_end":685,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223795,"byte_end":223804,"line_start":686,"line_end":686,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224842,"byte_end":224845,"line_start":731,"line_end":731,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the bit value at the given position.","sig":null,"attributes":[{"value":"/ Sets the bit value at the given position.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223886,"byte_end":223931,"line_start":691,"line_end":691,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223933,"byte_end":223936,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223938,"byte_end":223954,"line_start":693,"line_end":693,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223956,"byte_end":223959,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223961,"byte_end":223978,"line_start":695,"line_end":695,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index to set. It must be in the range `0 ..","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223980,"byte_end":224046,"line_start":696,"line_end":696,"column_start":2,"column_end":68}},{"value":"/   self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224048,"byte_end":224066,"line_start":697,"line_end":697,"column_start":2,"column_end":20}},{"value":"/ - `value`: The value to be set, `true` for `1` and `false` for `0`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224068,"byte_end":224139,"line_start":698,"line_end":698,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224141,"byte_end":224144,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224146,"byte_end":224159,"line_start":700,"line_end":700,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224161,"byte_end":224164,"line_start":701,"line_end":701,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224166,"byte_end":224241,"line_start":702,"line_end":702,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224243,"byte_end":224246,"line_start":703,"line_end":703,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224248,"byte_end":224260,"line_start":704,"line_end":704,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224262,"byte_end":224265,"line_start":705,"line_end":705,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is outside the slice domain.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224267,"byte_end":224329,"line_start":706,"line_end":706,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224331,"byte_end":224334,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224336,"byte_end":224350,"line_start":708,"line_end":708,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224352,"byte_end":224355,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224357,"byte_end":224368,"line_start":710,"line_end":710,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224370,"byte_end":224397,"line_start":711,"line_end":711,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224399,"byte_end":224402,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224404,"byte_end":224427,"line_start":713,"line_end":713,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224429,"byte_end":224473,"line_start":714,"line_end":714,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224475,"byte_end":224478,"line_start":715,"line_end":715,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits.get(7).unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224480,"byte_end":224515,"line_start":716,"line_end":716,"column_start":2,"column_end":37}},{"value":"/ bits.set(7, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224517,"byte_end":224539,"line_start":717,"line_end":717,"column_start":2,"column_end":24}},{"value":"/ assert!(bits.get(7).unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224541,"byte_end":224575,"line_start":718,"line_end":718,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224577,"byte_end":224601,"line_start":719,"line_end":719,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224603,"byte_end":224610,"line_start":720,"line_end":720,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224612,"byte_end":224615,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224617,"byte_end":224693,"line_start":722,"line_end":722,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224695,"byte_end":224698,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224700,"byte_end":224724,"line_start":724,"line_end":724,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224726,"byte_end":224753,"line_start":725,"line_end":725,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224755,"byte_end":224758,"line_start":726,"line_end":726,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224760,"byte_end":224788,"line_start":727,"line_end":727,"column_start":2,"column_end":30}},{"value":"/ bits.set(1, false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224790,"byte_end":224813,"line_start":728,"line_end":728,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224815,"byte_end":224822,"line_start":729,"line_end":729,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":224824,"byte_end":224833,"line_start":730,"line_end":730,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226365,"byte_end":226378,"line_start":785,"line_end":785,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets a bit at an index, without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Sets a bit at an index, without checking boundary conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225035,"byte_end":225100,"line_start":739,"line_end":739,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225102,"byte_end":225105,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225107,"byte_end":225174,"line_start":741,"line_end":741,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`set`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225176,"byte_end":225205,"line_start":742,"line_end":742,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225207,"byte_end":225210,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225212,"byte_end":225228,"line_start":744,"line_end":744,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225230,"byte_end":225233,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225235,"byte_end":225252,"line_start":746,"line_end":746,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index to set. It must be in the range `0 ..","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225254,"byte_end":225320,"line_start":747,"line_end":747,"column_start":2,"column_end":68}},{"value":"/   self.len()`. It will not be checked.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225322,"byte_end":225364,"line_start":748,"line_end":748,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225366,"byte_end":225369,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225371,"byte_end":225384,"line_start":750,"line_end":750,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225386,"byte_end":225389,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225391,"byte_end":225432,"line_start":752,"line_end":752,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225434,"byte_end":225437,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225439,"byte_end":225451,"line_start":754,"line_end":754,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225453,"byte_end":225456,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225458,"byte_end":225533,"line_start":756,"line_end":756,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225535,"byte_end":225606,"line_start":757,"line_end":757,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225608,"byte_end":225678,"line_start":758,"line_end":758,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225680,"byte_end":225728,"line_start":759,"line_end":759,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225730,"byte_end":225733,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225735,"byte_end":225806,"line_start":761,"line_end":761,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225808,"byte_end":225881,"line_start":762,"line_end":762,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225883,"byte_end":225893,"line_start":763,"line_end":763,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225895,"byte_end":225898,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225900,"byte_end":225914,"line_start":765,"line_end":765,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225916,"byte_end":225919,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225921,"byte_end":225984,"line_start":767,"line_end":767,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":225986,"byte_end":226042,"line_start":768,"line_end":768,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226044,"byte_end":226047,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226049,"byte_end":226060,"line_start":770,"line_end":770,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226062,"byte_end":226089,"line_start":771,"line_end":771,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226091,"byte_end":226094,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226096,"byte_end":226119,"line_start":773,"line_end":773,"column_start":2,"column_end":25}},{"value":"/ let bits = &mut data.view_bits_mut::<Msb0>()[2 .. 4];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226121,"byte_end":226178,"line_start":774,"line_end":774,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226180,"byte_end":226183,"line_start":775,"line_end":775,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits.len(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226185,"byte_end":226215,"line_start":776,"line_end":776,"column_start":2,"column_end":32}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226217,"byte_end":226229,"line_start":777,"line_end":777,"column_start":2,"column_end":14}},{"value":"/   bits.set_unchecked(5, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226231,"byte_end":226265,"line_start":778,"line_end":778,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226267,"byte_end":226272,"line_start":779,"line_end":779,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226274,"byte_end":226298,"line_start":780,"line_end":780,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226300,"byte_end":226307,"line_start":781,"line_end":781,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226309,"byte_end":226312,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ [`set`]: #method.set","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226314,"byte_end":226338,"line_start":783,"line_end":783,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226340,"byte_end":226349,"line_start":784,"line_end":784,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226999,"byte_end":227002,"line_start":819,"line_end":819,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226466,"byte_end":226534,"line_start":789,"line_end":789,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226536,"byte_end":226539,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226541,"byte_end":226558,"line_start":791,"line_end":791,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226560,"byte_end":226563,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226565,"byte_end":226576,"line_start":793,"line_end":793,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226578,"byte_end":226590,"line_start":794,"line_end":794,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226592,"byte_end":226604,"line_start":795,"line_end":795,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226606,"byte_end":226618,"line_start":796,"line_end":796,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226620,"byte_end":226632,"line_start":797,"line_end":797,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226634,"byte_end":226641,"line_start":798,"line_end":798,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226643,"byte_end":226646,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226648,"byte_end":226664,"line_start":800,"line_end":800,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226666,"byte_end":226669,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226671,"byte_end":226684,"line_start":802,"line_end":802,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226686,"byte_end":226689,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226691,"byte_end":226704,"line_start":804,"line_end":804,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226706,"byte_end":226709,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226711,"byte_end":226784,"line_start":806,"line_end":806,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226786,"byte_end":226797,"line_start":807,"line_end":807,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226799,"byte_end":226802,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226804,"byte_end":226818,"line_start":809,"line_end":809,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226820,"byte_end":226823,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226825,"byte_end":226836,"line_start":811,"line_end":811,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226838,"byte_end":226865,"line_start":812,"line_end":812,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226867,"byte_end":226870,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226872,"byte_end":226905,"line_start":814,"line_end":814,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226907,"byte_end":226937,"line_start":815,"line_end":815,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226939,"byte_end":226970,"line_start":816,"line_end":816,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226972,"byte_end":226979,"line_start":817,"line_end":817,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":226981,"byte_end":226990,"line_start":818,"line_end":818,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228545,"byte_end":228548,"line_start":876,"line_end":876,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228022,"byte_end":228081,"line_start":846,"line_end":846,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228083,"byte_end":228086,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228088,"byte_end":228105,"line_start":848,"line_end":848,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228107,"byte_end":228110,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228112,"byte_end":228123,"line_start":850,"line_end":850,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228125,"byte_end":228137,"line_start":851,"line_end":851,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228139,"byte_end":228151,"line_start":852,"line_end":852,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228153,"byte_end":228165,"line_start":853,"line_end":853,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228167,"byte_end":228179,"line_start":854,"line_end":854,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228181,"byte_end":228188,"line_start":855,"line_end":855,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228190,"byte_end":228193,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228195,"byte_end":228211,"line_start":857,"line_end":857,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228213,"byte_end":228216,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228218,"byte_end":228231,"line_start":859,"line_end":859,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228233,"byte_end":228236,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228238,"byte_end":228251,"line_start":861,"line_end":861,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228253,"byte_end":228256,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228258,"byte_end":228329,"line_start":863,"line_end":863,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228331,"byte_end":228343,"line_start":864,"line_end":864,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228345,"byte_end":228348,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228350,"byte_end":228364,"line_start":866,"line_end":866,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228366,"byte_end":228369,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228371,"byte_end":228382,"line_start":868,"line_end":868,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228384,"byte_end":228411,"line_start":869,"line_end":869,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228413,"byte_end":228416,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228418,"byte_end":228451,"line_start":871,"line_end":871,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].any());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228453,"byte_end":228483,"line_start":872,"line_end":872,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].any());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228485,"byte_end":228516,"line_start":873,"line_end":873,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228518,"byte_end":228525,"line_start":874,"line_end":874,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":228527,"byte_end":228536,"line_start":875,"line_end":875,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229534,"byte_end":229541,"line_start":921,"line_end":921,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229036,"byte_end":229099,"line_start":892,"line_end":892,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229101,"byte_end":229104,"line_start":893,"line_end":893,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229106,"byte_end":229123,"line_start":894,"line_end":894,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229125,"byte_end":229128,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229130,"byte_end":229141,"line_start":896,"line_end":896,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229143,"byte_end":229155,"line_start":897,"line_end":897,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229157,"byte_end":229169,"line_start":898,"line_end":898,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229171,"byte_end":229183,"line_start":899,"line_end":899,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229185,"byte_end":229197,"line_start":900,"line_end":900,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229199,"byte_end":229206,"line_start":901,"line_end":901,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229208,"byte_end":229211,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229213,"byte_end":229229,"line_start":903,"line_end":903,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229231,"byte_end":229234,"line_start":904,"line_end":904,"column_start":2,"column_end":5}},{"value":"/ - `&self","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229236,"byte_end":229248,"line_start":905,"line_end":905,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229250,"byte_end":229253,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229255,"byte_end":229268,"line_start":907,"line_end":907,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229270,"byte_end":229273,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229275,"byte_end":229324,"line_start":909,"line_end":909,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229326,"byte_end":229329,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229331,"byte_end":229345,"line_start":911,"line_end":911,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229347,"byte_end":229350,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229352,"byte_end":229363,"line_start":913,"line_end":913,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229365,"byte_end":229392,"line_start":914,"line_end":914,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229394,"byte_end":229397,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229399,"byte_end":229432,"line_start":916,"line_end":916,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229434,"byte_end":229469,"line_start":917,"line_end":917,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229471,"byte_end":229505,"line_start":918,"line_end":918,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229507,"byte_end":229514,"line_start":919,"line_end":919,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229516,"byte_end":229525,"line_start":920,"line_end":920,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230081,"byte_end":230088,"line_start":954,"line_end":954,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229578,"byte_end":229643,"line_start":925,"line_end":925,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229645,"byte_end":229648,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229650,"byte_end":229667,"line_start":927,"line_end":927,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229669,"byte_end":229672,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229674,"byte_end":229685,"line_start":929,"line_end":929,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229687,"byte_end":229699,"line_start":930,"line_end":930,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229701,"byte_end":229713,"line_start":931,"line_end":931,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229715,"byte_end":229727,"line_start":932,"line_end":932,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229729,"byte_end":229741,"line_start":933,"line_end":933,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229743,"byte_end":229750,"line_start":934,"line_end":934,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229752,"byte_end":229755,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229757,"byte_end":229773,"line_start":936,"line_end":936,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229775,"byte_end":229778,"line_start":937,"line_end":937,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229780,"byte_end":229793,"line_start":938,"line_end":938,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229795,"byte_end":229798,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229800,"byte_end":229813,"line_start":940,"line_end":940,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229815,"byte_end":229818,"line_start":941,"line_end":941,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229820,"byte_end":229871,"line_start":942,"line_end":942,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229873,"byte_end":229876,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229878,"byte_end":229892,"line_start":944,"line_end":944,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229894,"byte_end":229897,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229899,"byte_end":229910,"line_start":946,"line_end":946,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229912,"byte_end":229939,"line_start":947,"line_end":947,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229941,"byte_end":229944,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229946,"byte_end":229979,"line_start":949,"line_end":949,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_any());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":229981,"byte_end":230016,"line_start":950,"line_end":950,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_any());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230018,"byte_end":230052,"line_start":951,"line_end":951,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230054,"byte_end":230061,"line_start":952,"line_end":952,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230063,"byte_end":230072,"line_start":953,"line_end":953,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230903,"byte_end":230907,"line_start":997,"line_end":997,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230125,"byte_end":230198,"line_start":958,"line_end":958,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230200,"byte_end":230224,"line_start":959,"line_end":959,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230226,"byte_end":230229,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all`] or [`.not_any`] are `true`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230231,"byte_end":230297,"line_start":961,"line_end":961,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230299,"byte_end":230302,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230304,"byte_end":230321,"line_start":963,"line_end":963,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230323,"byte_end":230326,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230328,"byte_end":230339,"line_start":965,"line_end":965,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230341,"byte_end":230353,"line_start":966,"line_end":966,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230355,"byte_end":230367,"line_start":967,"line_end":967,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230369,"byte_end":230381,"line_start":968,"line_end":968,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230383,"byte_end":230395,"line_start":969,"line_end":969,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230397,"byte_end":230404,"line_start":970,"line_end":970,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230406,"byte_end":230409,"line_start":971,"line_end":971,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230411,"byte_end":230427,"line_start":972,"line_end":972,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230429,"byte_end":230432,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230434,"byte_end":230447,"line_start":974,"line_end":974,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230449,"byte_end":230452,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230454,"byte_end":230467,"line_start":976,"line_end":976,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230469,"byte_end":230472,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230474,"byte_end":230545,"line_start":978,"line_end":978,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230547,"byte_end":230559,"line_start":979,"line_end":979,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230561,"byte_end":230564,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230566,"byte_end":230580,"line_start":981,"line_end":981,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230582,"byte_end":230585,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230587,"byte_end":230598,"line_start":983,"line_end":983,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230600,"byte_end":230627,"line_start":984,"line_end":984,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230629,"byte_end":230632,"line_start":985,"line_end":985,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230634,"byte_end":230664,"line_start":986,"line_end":986,"column_start":2,"column_end":32}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230666,"byte_end":230705,"line_start":987,"line_end":987,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230707,"byte_end":230710,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 2].some());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230712,"byte_end":230744,"line_start":989,"line_end":989,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[2 .. 4].some());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230746,"byte_end":230780,"line_start":990,"line_end":990,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230782,"byte_end":230807,"line_start":991,"line_end":991,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230809,"byte_end":230816,"line_start":992,"line_end":992,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230818,"byte_end":230821,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ [`.all`]: #method.all","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230823,"byte_end":230848,"line_start":994,"line_end":994,"column_start":2,"column_end":27}},{"value":"/ [`.not_any`]: #method.not_any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230850,"byte_end":230883,"line_start":995,"line_end":995,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230885,"byte_end":230894,"line_start":996,"line_end":996,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231396,"byte_end":231406,"line_start":1023,"line_end":1023,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of ones in the memory region backing `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the memory region backing `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":230961,"byte_end":231028,"line_start":1001,"line_end":1001,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231030,"byte_end":231033,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231035,"byte_end":231051,"line_start":1003,"line_end":1003,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231053,"byte_end":231056,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231058,"byte_end":231071,"line_start":1005,"line_end":1005,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231073,"byte_end":231076,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231078,"byte_end":231091,"line_start":1007,"line_end":1007,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231093,"byte_end":231096,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ The number of high bits in the slice domain.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231098,"byte_end":231146,"line_start":1009,"line_end":1009,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231148,"byte_end":231151,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231153,"byte_end":231167,"line_start":1011,"line_end":1011,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231169,"byte_end":231172,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231174,"byte_end":231190,"line_start":1013,"line_end":1013,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231192,"byte_end":231195,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231197,"byte_end":231208,"line_start":1015,"line_end":1015,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231210,"byte_end":231237,"line_start":1016,"line_end":1016,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231239,"byte_end":231242,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231244,"byte_end":231277,"line_start":1018,"line_end":1018,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231279,"byte_end":231322,"line_start":1019,"line_end":1019,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231324,"byte_end":231367,"line_start":1020,"line_end":1020,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231369,"byte_end":231376,"line_start":1021,"line_end":1021,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231378,"byte_end":231387,"line_start":1022,"line_end":1022,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232434,"byte_end":232445,"line_start":1069,"line_end":1069,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of zeros in the memory region backing `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the memory region backing `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":231997,"byte_end":232065,"line_start":1047,"line_end":1047,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232067,"byte_end":232070,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232072,"byte_end":232088,"line_start":1049,"line_end":1049,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232090,"byte_end":232093,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232095,"byte_end":232108,"line_start":1051,"line_end":1051,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232110,"byte_end":232113,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232115,"byte_end":232128,"line_start":1053,"line_end":1053,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232130,"byte_end":232133,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ The number of low bits in the slice domain.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232135,"byte_end":232182,"line_start":1055,"line_end":1055,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232184,"byte_end":232187,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232189,"byte_end":232203,"line_start":1057,"line_end":1057,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232205,"byte_end":232208,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232210,"byte_end":232226,"line_start":1059,"line_end":1059,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232228,"byte_end":232231,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232233,"byte_end":232244,"line_start":1061,"line_end":1061,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232246,"byte_end":232273,"line_start":1062,"line_end":1062,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232275,"byte_end":232278,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232280,"byte_end":232313,"line_start":1064,"line_end":1064,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232315,"byte_end":232359,"line_start":1065,"line_end":1065,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232361,"byte_end":232405,"line_start":1066,"line_end":1066,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232407,"byte_end":232414,"line_start":1067,"line_end":1067,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":232416,"byte_end":232425,"line_start":1068,"line_end":1068,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233625,"byte_end":233632,"line_start":1115,"line_end":1115,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233043,"byte_end":233085,"line_start":1093,"line_end":1093,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233087,"byte_end":233090,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233092,"byte_end":233108,"line_start":1095,"line_end":1095,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233110,"byte_end":233113,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233115,"byte_end":233132,"line_start":1097,"line_end":1097,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233134,"byte_end":233206,"line_start":1098,"line_end":1098,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233208,"byte_end":233211,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233213,"byte_end":233227,"line_start":1100,"line_end":1100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233229,"byte_end":233232,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233234,"byte_end":233245,"line_start":1102,"line_end":1102,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233247,"byte_end":233274,"line_start":1103,"line_end":1103,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233276,"byte_end":233279,"line_start":1104,"line_end":1104,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233281,"byte_end":233303,"line_start":1105,"line_end":1105,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233305,"byte_end":233348,"line_start":1106,"line_end":1106,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233350,"byte_end":233381,"line_start":1107,"line_end":1107,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0011_1100]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233383,"byte_end":233431,"line_start":1108,"line_end":1108,"column_start":2,"column_end":50}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233433,"byte_end":233465,"line_start":1109,"line_end":1109,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0010_0100]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233467,"byte_end":233515,"line_start":1110,"line_end":1110,"column_start":2,"column_end":50}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233517,"byte_end":233546,"line_start":1111,"line_end":1111,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_slice(), &[0b1010_0100]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233548,"byte_end":233596,"line_start":1112,"line_end":1112,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233598,"byte_end":233605,"line_start":1113,"line_end":1113,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":233607,"byte_end":233616,"line_start":1114,"line_end":1114,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235709,"byte_end":235717,"line_start":1184,"line_end":1184,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":234749,"byte_end":234797,"line_start":1154,"line_end":1154,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":234799,"byte_end":234802,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement `IndexMut`, as it cannot manifest `&mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":234804,"byte_end":234875,"line_start":1156,"line_end":1156,"column_start":2,"column_end":73}},{"value":"/ bool` references, and the [`BitMut`] proxy reference has an unavoidable","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":234877,"byte_end":234952,"line_start":1157,"line_end":1157,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":234954,"byte_end":235029,"line_start":1158,"line_end":1158,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235031,"byte_end":235106,"line_start":1159,"line_end":1159,"column_start":2,"column_end":77}},{"value":"/ reference.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235108,"byte_end":235122,"line_start":1160,"line_end":1160,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235124,"byte_end":235127,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235129,"byte_end":235145,"line_start":1162,"line_end":1162,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235147,"byte_end":235150,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235152,"byte_end":235169,"line_start":1164,"line_end":1164,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235171,"byte_end":235244,"line_start":1165,"line_end":1165,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235246,"byte_end":235288,"line_start":1166,"line_end":1166,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235290,"byte_end":235293,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235295,"byte_end":235308,"line_start":1168,"line_end":1168,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235310,"byte_end":235313,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235315,"byte_end":235386,"line_start":1170,"line_end":1170,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235388,"byte_end":235453,"line_start":1171,"line_end":1171,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235455,"byte_end":235458,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235460,"byte_end":235474,"line_start":1173,"line_end":1173,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235476,"byte_end":235479,"line_start":1174,"line_end":1174,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235481,"byte_end":235492,"line_start":1175,"line_end":1175,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235494,"byte_end":235521,"line_start":1176,"line_end":1176,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235523,"byte_end":235526,"line_start":1177,"line_end":1177,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235528,"byte_end":235551,"line_start":1178,"line_end":1178,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235553,"byte_end":235597,"line_start":1179,"line_end":1179,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235599,"byte_end":235643,"line_start":1180,"line_end":1180,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235645,"byte_end":235680,"line_start":1181,"line_end":1181,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235682,"byte_end":235689,"line_start":1182,"line_end":1182,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235691,"byte_end":235700,"line_start":1183,"line_end":1183,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236833,"byte_end":236841,"line_start":1227,"line_end":1227,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitSlice<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Accesses the total backing storage of the `BitSlice`, as a slice of its\n elements.","sig":null,"attributes":[{"value":"/ Accesses the total backing storage of the `BitSlice`, as a slice of its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":235945,"byte_end":236020,"line_start":1195,"line_end":1195,"column_start":2,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236022,"byte_end":236035,"line_start":1196,"line_end":1196,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236037,"byte_end":236040,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ This method produces a slice over all the memory elements it touches,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236042,"byte_end":236115,"line_start":1198,"line_end":1198,"column_start":2,"column_end":75}},{"value":"/ using the current storage parameter. This is safe to do, as any events","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236117,"byte_end":236191,"line_start":1199,"line_end":1199,"column_start":2,"column_end":76}},{"value":"/ that would create an aliasing view into the elements covered by the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236193,"byte_end":236264,"line_start":1200,"line_end":1200,"column_start":2,"column_end":73}},{"value":"/ returned slice will also have caused the slice to use its alias-aware","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236266,"byte_end":236339,"line_start":1201,"line_end":1201,"column_start":2,"column_end":75}},{"value":"/ type.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236341,"byte_end":236350,"line_start":1202,"line_end":1202,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236352,"byte_end":236355,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236357,"byte_end":236373,"line_start":1204,"line_end":1204,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236375,"byte_end":236378,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236380,"byte_end":236393,"line_start":1206,"line_end":1206,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236395,"byte_end":236398,"line_start":1207,"line_end":1207,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236400,"byte_end":236413,"line_start":1208,"line_end":1208,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236415,"byte_end":236418,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ A view of the entire memory region this slice covers, including the edge","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236420,"byte_end":236496,"line_start":1210,"line_end":1210,"column_start":2,"column_end":78}},{"value":"/ elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236498,"byte_end":236511,"line_start":1211,"line_end":1211,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236513,"byte_end":236516,"line_start":1212,"line_end":1212,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236518,"byte_end":236532,"line_start":1213,"line_end":1213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236534,"byte_end":236537,"line_start":1214,"line_end":1214,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236539,"byte_end":236550,"line_start":1215,"line_end":1215,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236552,"byte_end":236579,"line_start":1216,"line_end":1216,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236581,"byte_end":236584,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ let data = 0x3Cu8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236586,"byte_end":236608,"line_start":1218,"line_end":1218,"column_start":2,"column_end":24}},{"value":"/ let bits = &data.view_bits::<LocalBits>()[2 .. 6];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236610,"byte_end":236664,"line_start":1219,"line_end":1219,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236666,"byte_end":236669,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ assert!(bits.all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236671,"byte_end":236695,"line_start":1221,"line_end":1221,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits.len(), 4);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236697,"byte_end":236727,"line_start":1222,"line_end":1222,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits.as_slice(), &[0x3Cu8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236729,"byte_end":236772,"line_start":1223,"line_end":1223,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236774,"byte_end":236781,"line_start":1224,"line_end":1224,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236783,"byte_end":236792,"line_start":1225,"line_end":1225,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":236794,"byte_end":236824,"line_start":1226,"line_end":1226,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238149,"byte_end":238161,"line_start":1275,"line_end":1275,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitSlice<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the wholly-filled elements of the `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the wholly-filled elements of the `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237012,"byte_end":237067,"line_start":1233,"line_end":1233,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237069,"byte_end":237072,"line_start":1234,"line_end":1234,"column_start":2,"column_end":5}},{"value":"/ This will not include partially-owned edge elements, as they may be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237074,"byte_end":237145,"line_start":1235,"line_end":1235,"column_start":2,"column_end":73}},{"value":"/ aliased by other handles. To gain access to all elements that the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237147,"byte_end":237216,"line_start":1236,"line_end":1236,"column_start":2,"column_end":71}},{"value":"/ `BitSlice` region covers, use one of the following:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237218,"byte_end":237273,"line_start":1237,"line_end":1237,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237275,"byte_end":237278,"line_start":1238,"line_end":1238,"column_start":2,"column_end":5}},{"value":"/ - [`.as_slice`] produces a shared slice over all elements, marked","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237280,"byte_end":237349,"line_start":1239,"line_end":1239,"column_start":2,"column_end":71}},{"value":"/   aliased as appropriate.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237351,"byte_end":237380,"line_start":1240,"line_end":1240,"column_start":2,"column_end":31}},{"value":"/ - [`.domain`] produces a view describing each component of the region,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237382,"byte_end":237456,"line_start":1241,"line_end":1241,"column_start":2,"column_end":76}},{"value":"/   marking only the contended edges as aliased and the uncontended","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237458,"byte_end":237527,"line_start":1242,"line_end":1242,"column_start":2,"column_end":71}},{"value":"/   interior as unaliased.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237529,"byte_end":237557,"line_start":1243,"line_end":1243,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237559,"byte_end":237562,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237564,"byte_end":237580,"line_start":1245,"line_end":1245,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237582,"byte_end":237585,"line_start":1246,"line_end":1246,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237587,"byte_end":237600,"line_start":1247,"line_end":1247,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237602,"byte_end":237605,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237607,"byte_end":237620,"line_start":1249,"line_end":1249,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237622,"byte_end":237625,"line_start":1250,"line_end":1250,"column_start":2,"column_end":5}},{"value":"/ A slice of all the wholly-filled elements in the `BitSlice` backing","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237627,"byte_end":237698,"line_start":1251,"line_end":1251,"column_start":2,"column_end":73}},{"value":"/ storage.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237700,"byte_end":237712,"line_start":1252,"line_end":1252,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237714,"byte_end":237717,"line_start":1253,"line_end":1253,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237719,"byte_end":237733,"line_start":1254,"line_end":1254,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237735,"byte_end":237738,"line_start":1255,"line_end":1255,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237740,"byte_end":237751,"line_start":1256,"line_end":1256,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237753,"byte_end":237780,"line_start":1257,"line_end":1257,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237782,"byte_end":237785,"line_start":1258,"line_end":1258,"column_start":2,"column_end":5}},{"value":"/ let data = [1u8, 66];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237787,"byte_end":237812,"line_start":1259,"line_end":1259,"column_start":2,"column_end":27}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237814,"byte_end":237854,"line_start":1260,"line_end":1260,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237856,"byte_end":237859,"line_start":1261,"line_end":1261,"column_start":2,"column_end":5}},{"value":"/ let accum = bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237861,"byte_end":237881,"line_start":1262,"line_end":1262,"column_start":2,"column_end":22}},{"value":"/   .as_raw_slice()","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237883,"byte_end":237904,"line_start":1263,"line_end":1263,"column_start":2,"column_end":23}},{"value":"/   .iter()","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237906,"byte_end":237919,"line_start":1264,"line_end":1264,"column_start":2,"column_end":15}},{"value":"/   .copied()","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237921,"byte_end":237936,"line_start":1265,"line_end":1265,"column_start":2,"column_end":17}},{"value":"/   .map(u8::count_ones)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237938,"byte_end":237964,"line_start":1266,"line_end":1266,"column_start":2,"column_end":28}},{"value":"/   .sum::<u32>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237966,"byte_end":237986,"line_start":1267,"line_end":1267,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(accum, 3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":237988,"byte_end":238013,"line_start":1268,"line_end":1268,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238015,"byte_end":238022,"line_start":1269,"line_end":1269,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238024,"byte_end":238027,"line_start":1270,"line_end":1270,"column_start":2,"column_end":5}},{"value":"/ [`.as_slice`]: #method.as_slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238029,"byte_end":238064,"line_start":1271,"line_end":1271,"column_start":2,"column_end":37}},{"value":"/ [`.domain`]: #method.domain","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238066,"byte_end":238097,"line_start":1272,"line_end":1272,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238099,"byte_end":238108,"line_start":1273,"line_end":1273,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238110,"byte_end":238140,"line_start":1274,"line_end":1274,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239415,"byte_end":239431,"line_start":1317,"line_end":1317,"column_start":9,"column_end":25},"name":"as_raw_slice_mut","qualname":"<BitSlice<O, T>>::as_raw_slice_mut","value":"pub fn as_raw_slice_mut(&mut Self) -> &mut [T::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the wholly-filled elements of the `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the wholly-filled elements of the `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238241,"byte_end":238296,"line_start":1279,"line_end":1279,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238298,"byte_end":238301,"line_start":1280,"line_end":1280,"column_start":2,"column_end":5}},{"value":"/ This will not include partially-owned edge elements, as they may be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238303,"byte_end":238374,"line_start":1281,"line_end":1281,"column_start":2,"column_end":73}},{"value":"/ aliased by other handles. To gain access to all elements that the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238376,"byte_end":238445,"line_start":1282,"line_end":1282,"column_start":2,"column_end":71}},{"value":"/ `BitSlice` region covers, use one of the following:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238447,"byte_end":238502,"line_start":1283,"line_end":1283,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238504,"byte_end":238507,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ - [`.as_aliased_slice`] produces a shared slice over all elements,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238509,"byte_end":238579,"line_start":1285,"line_end":1285,"column_start":2,"column_end":72}},{"value":"/   marked as aliased to allow for the possibliity of mutation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238581,"byte_end":238646,"line_start":1286,"line_end":1286,"column_start":2,"column_end":67}},{"value":"/ - [`.domain_mut`] produces a view describing each component of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238648,"byte_end":238718,"line_start":1287,"line_end":1287,"column_start":2,"column_end":72}},{"value":"/   region, marking only the contended edges as aliased and the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238720,"byte_end":238785,"line_start":1288,"line_end":1288,"column_start":2,"column_end":67}},{"value":"/   uncontended interior as unaliased.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238787,"byte_end":238827,"line_start":1289,"line_end":1289,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238829,"byte_end":238832,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238834,"byte_end":238850,"line_start":1291,"line_end":1291,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238852,"byte_end":238855,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238857,"byte_end":238874,"line_start":1293,"line_end":1293,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238876,"byte_end":238879,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238881,"byte_end":238894,"line_start":1295,"line_end":1295,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238896,"byte_end":238899,"line_start":1296,"line_end":1296,"column_start":2,"column_end":5}},{"value":"/ A mutable slice of all the wholly-filled elements in the `BitSlice`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238901,"byte_end":238972,"line_start":1297,"line_end":1297,"column_start":2,"column_end":73}},{"value":"/ backing storage.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238974,"byte_end":238994,"line_start":1298,"line_end":1298,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":238996,"byte_end":238999,"line_start":1299,"line_end":1299,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239001,"byte_end":239015,"line_start":1300,"line_end":1300,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239017,"byte_end":239020,"line_start":1301,"line_end":1301,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239022,"byte_end":239033,"line_start":1302,"line_end":1302,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239035,"byte_end":239062,"line_start":1303,"line_end":1303,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239064,"byte_end":239067,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ let mut data = [1u8, 64];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239069,"byte_end":239098,"line_start":1305,"line_end":1305,"column_start":2,"column_end":31}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239100,"byte_end":239144,"line_start":1306,"line_end":1306,"column_start":2,"column_end":46}},{"value":"/ for elt in bits.as_raw_slice_mut() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239146,"byte_end":239186,"line_start":1307,"line_end":1307,"column_start":2,"column_end":42}},{"value":"/   *elt |= 2;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239188,"byte_end":239204,"line_start":1308,"line_end":1308,"column_start":2,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239206,"byte_end":239211,"line_start":1309,"line_end":1309,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(&[3, 66], bits.as_slice());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239213,"byte_end":239255,"line_start":1310,"line_end":1310,"column_start":2,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239257,"byte_end":239264,"line_start":1311,"line_end":1311,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239266,"byte_end":239269,"line_start":1312,"line_end":1312,"column_start":2,"column_end":5}},{"value":"/ [`.as_aliased_slice`]: #method.as_aliased_slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239271,"byte_end":239322,"line_start":1313,"line_end":1313,"column_start":2,"column_end":53}},{"value":"/ [`.domain_mut`]: #method.domain_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239324,"byte_end":239363,"line_start":1314,"line_end":1314,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239365,"byte_end":239374,"line_start":1315,"line_end":1315,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239376,"byte_end":239406,"line_start":1316,"line_end":1316,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242652,"byte_end":242662,"line_start":1404,"line_end":1404,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into the logical components of its memory domain.","sig":null,"attributes":[{"value":"/ Splits the slice into the logical components of its memory domain.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239527,"byte_end":239597,"line_start":1321,"line_end":1321,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239599,"byte_end":239602,"line_start":1322,"line_end":1322,"column_start":2,"column_end":5}},{"value":"/ This produces a set of read-only subslices, marking as much as possible","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239604,"byte_end":239679,"line_start":1323,"line_end":1323,"column_start":2,"column_end":77}},{"value":"/ as affirmatively lacking any write-capable view (`T::NoAlias`). The","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239681,"byte_end":239752,"line_start":1324,"line_end":1324,"column_start":2,"column_end":73}},{"value":"/ unaliased view is able to safely perform unsynchronized reads from","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239754,"byte_end":239824,"line_start":1325,"line_end":1325,"column_start":2,"column_end":72}},{"value":"/ memory without causing undefined behavior, as the type system is able to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239826,"byte_end":239902,"line_start":1326,"line_end":1326,"column_start":2,"column_end":78}},{"value":"/ statically prove that no other write-capable views exist.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239904,"byte_end":239965,"line_start":1327,"line_end":1327,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239967,"byte_end":239970,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239972,"byte_end":239988,"line_start":1329,"line_end":1329,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239990,"byte_end":239993,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":239995,"byte_end":240008,"line_start":1331,"line_end":1331,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240010,"byte_end":240013,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240015,"byte_end":240028,"line_start":1333,"line_end":1333,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240030,"byte_end":240033,"line_start":1334,"line_end":1334,"column_start":2,"column_end":5}},{"value":"/ A `BitDomain` structure representing the logical components of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240035,"byte_end":240105,"line_start":1335,"line_end":1335,"column_start":2,"column_end":72}},{"value":"/ memory region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240107,"byte_end":240125,"line_start":1336,"line_end":1336,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240127,"byte_end":240130,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ # Safety Exception","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240132,"byte_end":240154,"line_start":1338,"line_end":1338,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240156,"byte_end":240159,"line_start":1339,"line_end":1339,"column_start":2,"column_end":5}},{"value":"/ The following snippet describes a means of constructing a `T::NoAlias`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240161,"byte_end":240235,"line_start":1340,"line_end":1340,"column_start":2,"column_end":76}},{"value":"/ view into memory that is, in fact, aliased:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240237,"byte_end":240284,"line_start":1341,"line_end":1341,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240286,"byte_end":240289,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240291,"byte_end":240302,"line_start":1343,"line_end":1343,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"atomic\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240304,"byte_end":240338,"line_start":1344,"line_end":1344,"column_start":2,"column_end":36}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240340,"byte_end":240367,"line_start":1345,"line_end":1345,"column_start":2,"column_end":29}},{"value":"/ use core::sync::atomic::AtomicU8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240369,"byte_end":240406,"line_start":1346,"line_end":1346,"column_start":2,"column_end":39}},{"value":"/ type Bs<T> = BitSlice<LocalBits, T>;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240408,"byte_end":240448,"line_start":1347,"line_end":1347,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240450,"byte_end":240453,"line_start":1348,"line_end":1348,"column_start":2,"column_end":5}},{"value":"/ let data = [AtomicU8::new(0), AtomicU8::new(0), AtomicU8::new(0)];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240455,"byte_end":240525,"line_start":1349,"line_end":1349,"column_start":2,"column_end":72}},{"value":"/ let bits: &Bs<AtomicU8> = data.view_bits::<LocalBits>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240527,"byte_end":240587,"line_start":1350,"line_end":1350,"column_start":2,"column_end":62}},{"value":"/ let subslice: &Bs<AtomicU8> = &bits[4 .. 20];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240589,"byte_end":240638,"line_start":1351,"line_end":1351,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240640,"byte_end":240643,"line_start":1352,"line_end":1352,"column_start":2,"column_end":5}},{"value":"/ let (_, noalias, _): (_, &Bs<u8>, _) =","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240645,"byte_end":240687,"line_start":1353,"line_end":1353,"column_start":2,"column_end":44}},{"value":"/   subslice.bit_domain().region().unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240689,"byte_end":240735,"line_start":1354,"line_end":1354,"column_start":2,"column_end":48}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240737,"byte_end":240744,"line_start":1355,"line_end":1355,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240746,"byte_end":240753,"line_start":1356,"line_end":1356,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240755,"byte_end":240758,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ The `noalias` reference, which has memory type `u8`, assumes that it can","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240760,"byte_end":240836,"line_start":1358,"line_end":1358,"column_start":2,"column_end":78}},{"value":"/ act as an `&u8` reference: unsynchronized loads are permitted, as no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240838,"byte_end":240910,"line_start":1359,"line_end":1359,"column_start":2,"column_end":74}},{"value":"/ handle exists which is capable of modifying the middle bit of `data`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240912,"byte_end":240985,"line_start":1360,"line_end":1360,"column_start":2,"column_end":75}},{"value":"/ This means that LLVM is permitted to issue loads from memory *wherever*","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":240987,"byte_end":241062,"line_start":1361,"line_end":1361,"column_start":2,"column_end":77}},{"value":"/ it wants in the block during which `noalias` is live, as all loads are","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241064,"byte_end":241138,"line_start":1362,"line_end":1362,"column_start":2,"column_end":76}},{"value":"/ equivalent.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241140,"byte_end":241155,"line_start":1363,"line_end":1363,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241157,"byte_end":241160,"line_start":1364,"line_end":1364,"column_start":2,"column_end":5}},{"value":"/ Use of the `bits` or `subslice` handles, which are still live for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241162,"byte_end":241235,"line_start":1365,"line_end":1365,"column_start":2,"column_end":75}},{"value":"/ lifetime of `noalias`, to issue [`.set_aliased`] calls into the middle","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241237,"byte_end":241311,"line_start":1366,"line_end":1366,"column_start":2,"column_end":76}},{"value":"/ element introduce **undefined behavior**. `bitvec` permits safe code to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241313,"byte_end":241388,"line_start":1367,"line_end":1367,"column_start":2,"column_end":77}},{"value":"/ introduce this undefined behavior solely because it requires deliberate","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241390,"byte_end":241465,"line_start":1368,"line_end":1368,"column_start":2,"column_end":77}},{"value":"/ opt-in – you must start from atomic data; this cannot occur when `data`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241467,"byte_end":241544,"line_start":1369,"line_end":1369,"column_start":2,"column_end":77}},{"value":"/ is non-atomic – and use of the shared-mutation facility simultaneously","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241546,"byte_end":241622,"line_start":1370,"line_end":1370,"column_start":2,"column_end":76}},{"value":"/ with the unaliasing view.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241624,"byte_end":241653,"line_start":1371,"line_end":1371,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241655,"byte_end":241658,"line_start":1372,"line_end":1372,"column_start":2,"column_end":5}},{"value":"/ The [`.set_aliased`] method is speculative, and will be marked as","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241660,"byte_end":241729,"line_start":1373,"line_end":1373,"column_start":2,"column_end":71}},{"value":"/ `unsafe` or removed at any suspicion that its presence in the library","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241731,"byte_end":241804,"line_start":1374,"line_end":1374,"column_start":2,"column_end":75}},{"value":"/ has any costs.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241806,"byte_end":241824,"line_start":1375,"line_end":1375,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241826,"byte_end":241829,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241831,"byte_end":241845,"line_start":1377,"line_end":1377,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241847,"byte_end":241850,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ This method can be used to accelerate reads from a slice that is marked","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241852,"byte_end":241927,"line_start":1379,"line_end":1379,"column_start":2,"column_end":77}},{"value":"/ as aliased.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241929,"byte_end":241944,"line_start":1380,"line_end":1380,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241946,"byte_end":241949,"line_start":1381,"line_end":1381,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241951,"byte_end":241962,"line_start":1382,"line_end":1382,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241964,"byte_end":241991,"line_start":1383,"line_end":1383,"column_start":2,"column_end":29}},{"value":"/ type Bs<T> = BitSlice<LocalBits, T>;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":241993,"byte_end":242033,"line_start":1384,"line_end":1384,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242035,"byte_end":242038,"line_start":1385,"line_end":1385,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut LocalBits, u8; 0; 24];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242040,"byte_end":242087,"line_start":1386,"line_end":1386,"column_start":2,"column_end":49}},{"value":"/ let (a, b): (","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242089,"byte_end":242106,"line_start":1387,"line_end":1387,"column_start":2,"column_end":19}},{"value":"/   &mut Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242108,"byte_end":242147,"line_start":1388,"line_end":1388,"column_start":2,"column_end":41}},{"value":"/   &mut Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242149,"byte_end":242188,"line_start":1389,"line_end":1389,"column_start":2,"column_end":41}},{"value":"/ ) = bits.split_at_mut(4);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242190,"byte_end":242219,"line_start":1390,"line_end":1390,"column_start":2,"column_end":31}},{"value":"/ let (partial, full, _): (","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242221,"byte_end":242250,"line_start":1391,"line_end":1391,"column_start":2,"column_end":31}},{"value":"/   &Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242252,"byte_end":242287,"line_start":1392,"line_end":1392,"column_start":2,"column_end":37}},{"value":"/   &Bs<<u8 as BitStore>::Mem>,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242289,"byte_end":242322,"line_start":1393,"line_end":1393,"column_start":2,"column_end":35}},{"value":"/   _,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242324,"byte_end":242332,"line_start":1394,"line_end":1394,"column_start":2,"column_end":10}},{"value":"/ ) = b.bit_domain().region().unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242334,"byte_end":242375,"line_start":1395,"line_end":1395,"column_start":2,"column_end":43}},{"value":"/ read_from(partial); // uses alias-aware reads","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242377,"byte_end":242426,"line_start":1396,"line_end":1396,"column_start":2,"column_end":51}},{"value":"/ read_from(full); // uses ordinary reads","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242428,"byte_end":242471,"line_start":1397,"line_end":1397,"column_start":2,"column_end":45}},{"value":"/ # fn read_from<T: BitStore>(_: &BitSlice<LocalBits, T>) {}","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242473,"byte_end":242535,"line_start":1398,"line_end":1398,"column_start":2,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242537,"byte_end":242544,"line_start":1399,"line_end":1399,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242546,"byte_end":242549,"line_start":1400,"line_end":1400,"column_start":2,"column_end":5}},{"value":"/ [`.set_aliased`]: #method.set_aliased","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242551,"byte_end":242592,"line_start":1401,"line_end":1401,"column_start":2,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242594,"byte_end":242611,"line_start":1402,"line_end":1402,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242613,"byte_end":242643,"line_start":1403,"line_end":1403,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243899,"byte_end":243913,"line_start":1431,"line_end":1431,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into the logical components of its memory domain.","sig":null,"attributes":[{"value":"/ Splits the slice into the logical components of its memory domain.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242719,"byte_end":242789,"line_start":1408,"line_end":1408,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242791,"byte_end":242794,"line_start":1409,"line_end":1409,"column_start":2,"column_end":5}},{"value":"/ This produces a set of mutable subslices, marking as much as possible as","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242796,"byte_end":242872,"line_start":1410,"line_end":1410,"column_start":2,"column_end":78}},{"value":"/ affirmatively lacking any other view (`T::Mem`). The bare view is able","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242874,"byte_end":242948,"line_start":1411,"line_end":1411,"column_start":2,"column_end":76}},{"value":"/ to safely perform unsynchronized reads from and writes to memory without","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":242950,"byte_end":243026,"line_start":1412,"line_end":1412,"column_start":2,"column_end":78}},{"value":"/ causing undefined behavior, as the type system is able to statically","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243028,"byte_end":243100,"line_start":1413,"line_end":1413,"column_start":2,"column_end":74}},{"value":"/ prove that no other views exist.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243102,"byte_end":243138,"line_start":1414,"line_end":1414,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243140,"byte_end":243143,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ # Why This Is More Sound Than `.bit_domain`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243145,"byte_end":243192,"line_start":1416,"line_end":1416,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243194,"byte_end":243197,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ The `&mut` exclusion rule makes it impossible to construct two","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243199,"byte_end":243265,"line_start":1418,"line_end":1418,"column_start":2,"column_end":68}},{"value":"/ references over the same memory where one of them is marked `&mut`. This","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243267,"byte_end":243343,"line_start":1419,"line_end":1419,"column_start":2,"column_end":78}},{"value":"/ makes it impossible to hold a live reference to memory *separately* from","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243345,"byte_end":243421,"line_start":1420,"line_end":1420,"column_start":2,"column_end":78}},{"value":"/ any references produced from this method. For the duration of all","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243423,"byte_end":243492,"line_start":1421,"line_end":1421,"column_start":2,"column_end":71}},{"value":"/ references produced by this method, all ancestor references used to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243494,"byte_end":243565,"line_start":1422,"line_end":1422,"column_start":2,"column_end":73}},{"value":"/ reach this method call are either suspended or dead, and the compiler","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243567,"byte_end":243640,"line_start":1423,"line_end":1423,"column_start":2,"column_end":75}},{"value":"/ will not allow you to use them.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243642,"byte_end":243677,"line_start":1424,"line_end":1424,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243679,"byte_end":243682,"line_start":1425,"line_end":1425,"column_start":2,"column_end":5}},{"value":"/ As such, this method cannot introduce undefined behavior where a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243684,"byte_end":243752,"line_start":1426,"line_end":1426,"column_start":2,"column_end":70}},{"value":"/ reference incorrectly believes that the referent memory region is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243754,"byte_end":243823,"line_start":1427,"line_end":1427,"column_start":2,"column_end":71}},{"value":"/ immutable.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243825,"byte_end":243839,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243841,"byte_end":243858,"line_start":1429,"line_end":1429,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243860,"byte_end":243890,"line_start":1430,"line_end":1430,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245578,"byte_end":245584,"line_start":1474,"line_end":1474,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into immutable references to its underlying memory\n components.","sig":null,"attributes":[{"value":"/ Splits the slice into immutable references to its underlying memory","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":243980,"byte_end":244051,"line_start":1435,"line_end":1435,"column_start":2,"column_end":73}},{"value":"/ components.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244053,"byte_end":244068,"line_start":1436,"line_end":1436,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244070,"byte_end":244073,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ Unlike [`.bit_domain`] and [`.bit_domain_mut`], this does not return","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244075,"byte_end":244147,"line_start":1438,"line_end":1438,"column_start":2,"column_end":74}},{"value":"/ smaller `BitSlice` handles but rather appropriately-marked references to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244149,"byte_end":244225,"line_start":1439,"line_end":1439,"column_start":2,"column_end":78}},{"value":"/ the underlying memory elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244227,"byte_end":244262,"line_start":1440,"line_end":1440,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244264,"byte_end":244267,"line_start":1441,"line_end":1441,"column_start":2,"column_end":5}},{"value":"/ The aliased references allow mutation of these elements. You are","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244269,"byte_end":244337,"line_start":1442,"line_end":1442,"column_start":2,"column_end":70}},{"value":"/ required to not use mutating methods on these references *at all*. This","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244339,"byte_end":244414,"line_start":1443,"line_end":1443,"column_start":2,"column_end":77}},{"value":"/ function is not marked `unsafe`, but this is a contract you must uphold.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244416,"byte_end":244492,"line_start":1444,"line_end":1444,"column_start":2,"column_end":78}},{"value":"/ Use [`.domain_mut`] to modify the underlying elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244494,"byte_end":244552,"line_start":1445,"line_end":1445,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244554,"byte_end":244557,"line_start":1446,"line_end":1446,"column_start":2,"column_end":5}},{"value":"/ > It is not currently possible to forbid mutation through these","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244559,"byte_end":244626,"line_start":1447,"line_end":1447,"column_start":2,"column_end":69}},{"value":"/ > references. This may change in the future.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244628,"byte_end":244676,"line_start":1448,"line_end":1448,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244678,"byte_end":244681,"line_start":1449,"line_end":1449,"column_start":2,"column_end":5}},{"value":"/ # Safety Exception","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244683,"byte_end":244705,"line_start":1450,"line_end":1450,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244707,"byte_end":244710,"line_start":1451,"line_end":1451,"column_start":2,"column_end":5}},{"value":"/ As with [`.bit_domain`], this produces unsynchronized immutable","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244712,"byte_end":244779,"line_start":1452,"line_end":1452,"column_start":2,"column_end":69}},{"value":"/ references over the fully-populated interior elements. If this view is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244781,"byte_end":244855,"line_start":1453,"line_end":1453,"column_start":2,"column_end":76}},{"value":"/ constructed from a `BitSlice` handle over atomic memory, then it will","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244857,"byte_end":244930,"line_start":1454,"line_end":1454,"column_start":2,"column_end":75}},{"value":"/ remove the atomic access behavior for the interior elements. This *by","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":244932,"byte_end":245005,"line_start":1455,"line_end":1455,"column_start":2,"column_end":75}},{"value":"/ itself* is safe, as long as no contemporaneous atomic writes to that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245007,"byte_end":245079,"line_start":1456,"line_end":1456,"column_start":2,"column_end":74}},{"value":"/ memory can occur. You must not retain and use an atomic reference to the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245081,"byte_end":245157,"line_start":1457,"line_end":1457,"column_start":2,"column_end":78}},{"value":"/ memory region marked as `NoAlias` for the duration of this view’s","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245159,"byte_end":245230,"line_start":1458,"line_end":1458,"column_start":2,"column_end":71}},{"value":"/ existence.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245232,"byte_end":245246,"line_start":1459,"line_end":1459,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245248,"byte_end":245251,"line_start":1460,"line_end":1460,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245253,"byte_end":245269,"line_start":1461,"line_end":1461,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245271,"byte_end":245274,"line_start":1462,"line_end":1462,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245276,"byte_end":245289,"line_start":1463,"line_end":1463,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245291,"byte_end":245294,"line_start":1464,"line_end":1464,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245296,"byte_end":245309,"line_start":1465,"line_end":1465,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245311,"byte_end":245314,"line_start":1466,"line_end":1466,"column_start":2,"column_end":5}},{"value":"/ A read-only descriptor of the memory elements backing `*self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245316,"byte_end":245382,"line_start":1467,"line_end":1467,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245384,"byte_end":245387,"line_start":1468,"line_end":1468,"column_start":2,"column_end":5}},{"value":"/ [`.bit_domain`]: #method.bit_domain","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245389,"byte_end":245428,"line_start":1469,"line_end":1469,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`]: #method.bit_domain_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245430,"byte_end":245477,"line_start":1470,"line_end":1470,"column_start":2,"column_end":49}},{"value":"/ [`.domain_mut`]: #method.domain_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245479,"byte_end":245518,"line_start":1471,"line_end":1471,"column_start":2,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245520,"byte_end":245537,"line_start":1472,"line_end":1472,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245539,"byte_end":245569,"line_start":1473,"line_end":1473,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246524,"byte_end":246534,"line_start":1504,"line_end":1504,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into mutable references to its underlying memory\n elements.","sig":null,"attributes":[{"value":"/ Splits the slice into mutable references to its underlying memory","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245632,"byte_end":245701,"line_start":1478,"line_end":1478,"column_start":2,"column_end":71}},{"value":"/ elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245703,"byte_end":245716,"line_start":1479,"line_end":1479,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245718,"byte_end":245721,"line_start":1480,"line_end":1480,"column_start":2,"column_end":5}},{"value":"/ Like [`.domain`], this returns appropriately-marked references to the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245723,"byte_end":245796,"line_start":1481,"line_end":1481,"column_start":2,"column_end":75}},{"value":"/ underlying memory elements. These references are all writable.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245798,"byte_end":245864,"line_start":1482,"line_end":1482,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245866,"byte_end":245869,"line_start":1483,"line_end":1483,"column_start":2,"column_end":5}},{"value":"/ The aliased edge references permit modifying memory beyond their bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245871,"byte_end":245943,"line_start":1484,"line_end":1484,"column_start":2,"column_end":74}},{"value":"/ marker. You are required to only mutate the region of these edge","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":245945,"byte_end":246013,"line_start":1485,"line_end":1485,"column_start":2,"column_end":70}},{"value":"/ elements that you currently govern. This function is not marked","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246015,"byte_end":246082,"line_start":1486,"line_end":1486,"column_start":2,"column_end":69}},{"value":"/ `unsafe`, but this is a contract you must uphold.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246084,"byte_end":246137,"line_start":1487,"line_end":1487,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246139,"byte_end":246142,"line_start":1488,"line_end":1488,"column_start":2,"column_end":5}},{"value":"/ > It is not currently possible to forbid out-of-bounds mutation through","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246144,"byte_end":246219,"line_start":1489,"line_end":1489,"column_start":2,"column_end":77}},{"value":"/ > these references. This may change in the future.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246221,"byte_end":246275,"line_start":1490,"line_end":1490,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246277,"byte_end":246280,"line_start":1491,"line_end":1491,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246282,"byte_end":246298,"line_start":1492,"line_end":1492,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246300,"byte_end":246303,"line_start":1493,"line_end":1493,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246305,"byte_end":246322,"line_start":1494,"line_end":1494,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246324,"byte_end":246327,"line_start":1495,"line_end":1495,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246329,"byte_end":246342,"line_start":1496,"line_end":1496,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246344,"byte_end":246347,"line_start":1497,"line_end":1497,"column_start":2,"column_end":5}},{"value":"/ A descriptor of the memory elements underneath `*self`, permitting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246349,"byte_end":246419,"line_start":1498,"line_end":1498,"column_start":2,"column_end":72}},{"value":"/ mutation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246421,"byte_end":246434,"line_start":1499,"line_end":1499,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246436,"byte_end":246439,"line_start":1500,"line_end":1500,"column_start":2,"column_end":5}},{"value":"/ [`.domain`]: #method.domain","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246441,"byte_end":246472,"line_start":1501,"line_end":1501,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246474,"byte_end":246483,"line_start":1502,"line_end":1502,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246485,"byte_end":246515,"line_start":1503,"line_end":1503,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247708,"byte_end":247726,"line_start":1547,"line_end":1547,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a slice at some mid-point, without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Splits a slice at some mid-point, without checking boundary conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246592,"byte_end":246667,"line_start":1508,"line_end":1508,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246669,"byte_end":246672,"line_start":1509,"line_end":1509,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246674,"byte_end":246741,"line_start":1510,"line_end":1510,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`split_at`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246743,"byte_end":246777,"line_start":1511,"line_end":1511,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246779,"byte_end":246782,"line_start":1512,"line_end":1512,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246784,"byte_end":246800,"line_start":1513,"line_end":1513,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246802,"byte_end":246805,"line_start":1514,"line_end":1514,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246807,"byte_end":246820,"line_start":1515,"line_end":1515,"column_start":2,"column_end":15}},{"value":"/ - `mid`: The index at which to split the slice. This must be in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246822,"byte_end":246893,"line_start":1516,"line_end":1516,"column_start":2,"column_end":73}},{"value":"/   range `0 .. self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246895,"byte_end":246925,"line_start":1517,"line_end":1517,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246927,"byte_end":246930,"line_start":1518,"line_end":1518,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246932,"byte_end":246945,"line_start":1519,"line_end":1519,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246947,"byte_end":246950,"line_start":1520,"line_end":1520,"column_start":2,"column_end":5}},{"value":"/ - `.0`: `&self[.. mid]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246952,"byte_end":246979,"line_start":1521,"line_end":1521,"column_start":2,"column_end":29}},{"value":"/ - `.1`: `&self[mid ..]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":246981,"byte_end":247008,"line_start":1522,"line_end":1522,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247010,"byte_end":247013,"line_start":1523,"line_end":1523,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247015,"byte_end":247027,"line_start":1524,"line_end":1524,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247029,"byte_end":247032,"line_start":1525,"line_end":1525,"column_start":2,"column_end":5}},{"value":"/ This function is **not** safe. It performs raw pointer arithmetic to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247034,"byte_end":247106,"line_start":1526,"line_end":1526,"column_start":2,"column_end":74}},{"value":"/ construct two new references. If `mid` is out of bounds, then the first","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247108,"byte_end":247183,"line_start":1527,"line_end":1527,"column_start":2,"column_end":77}},{"value":"/ slice will be too large, and the second will be *catastrophically*","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247185,"byte_end":247255,"line_start":1528,"line_end":1528,"column_start":2,"column_end":72}},{"value":"/ incorrect. As both are references to invalid memory, they are undefined","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247257,"byte_end":247332,"line_start":1529,"line_end":1529,"column_start":2,"column_end":77}},{"value":"/ to *construct*, and may not ever be used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247334,"byte_end":247379,"line_start":1530,"line_end":1530,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247381,"byte_end":247384,"line_start":1531,"line_end":1531,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247386,"byte_end":247400,"line_start":1532,"line_end":1532,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247402,"byte_end":247405,"line_start":1533,"line_end":1533,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247407,"byte_end":247418,"line_start":1534,"line_end":1534,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247420,"byte_end":247447,"line_start":1535,"line_end":1535,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247449,"byte_end":247452,"line_start":1536,"line_end":1536,"column_start":2,"column_end":5}},{"value":"/ let data = 0x0180u16;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247454,"byte_end":247479,"line_start":1537,"line_end":1537,"column_start":2,"column_end":27}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247481,"byte_end":247521,"line_start":1538,"line_end":1538,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247523,"byte_end":247526,"line_start":1539,"line_end":1539,"column_start":2,"column_end":5}},{"value":"/ let (one, two) = unsafe { bits.split_at_unchecked(8) };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247528,"byte_end":247587,"line_start":1540,"line_end":1540,"column_start":2,"column_end":61}},{"value":"/ assert!(one[7]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247589,"byte_end":247609,"line_start":1541,"line_end":1541,"column_start":2,"column_end":22}},{"value":"/ assert!(two[0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247611,"byte_end":247631,"line_start":1542,"line_end":1542,"column_start":2,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247633,"byte_end":247640,"line_start":1543,"line_end":1543,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247642,"byte_end":247645,"line_start":1544,"line_end":1544,"column_start":2,"column_end":5}},{"value":"/ [`split_at`]: #method.split_at","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247647,"byte_end":247681,"line_start":1545,"line_end":1545,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247683,"byte_end":247692,"line_start":1546,"line_end":1546,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":249061,"byte_end":249083,"line_start":1593,"line_end":1593,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point, without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point, without checking boundary","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247830,"byte_end":247901,"line_start":1551,"line_end":1551,"column_start":2,"column_end":73}},{"value":"/ conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247903,"byte_end":247918,"line_start":1552,"line_end":1552,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247920,"byte_end":247923,"line_start":1553,"line_end":1553,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247925,"byte_end":247992,"line_start":1554,"line_end":1554,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`split_at_mut`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":247994,"byte_end":248032,"line_start":1555,"line_end":1555,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248034,"byte_end":248037,"line_start":1556,"line_end":1556,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248039,"byte_end":248055,"line_start":1557,"line_end":1557,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248057,"byte_end":248060,"line_start":1558,"line_end":1558,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248062,"byte_end":248079,"line_start":1559,"line_end":1559,"column_start":2,"column_end":19}},{"value":"/ - `mid`: The index at which to split the slice. This must be in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248081,"byte_end":248152,"line_start":1560,"line_end":1560,"column_start":2,"column_end":73}},{"value":"/   range `0 .. self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248154,"byte_end":248184,"line_start":1561,"line_end":1561,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248186,"byte_end":248189,"line_start":1562,"line_end":1562,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248191,"byte_end":248204,"line_start":1563,"line_end":1563,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248206,"byte_end":248209,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ - `.0`: `&mut self[.. mid]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248211,"byte_end":248242,"line_start":1565,"line_end":1565,"column_start":2,"column_end":33}},{"value":"/ - `.1`: `&mut self[mid ..]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248244,"byte_end":248275,"line_start":1566,"line_end":1566,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248277,"byte_end":248280,"line_start":1567,"line_end":1567,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248282,"byte_end":248294,"line_start":1568,"line_end":1568,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248296,"byte_end":248299,"line_start":1569,"line_end":1569,"column_start":2,"column_end":5}},{"value":"/ This function is **not** safe. It performs raw pointer arithmetic to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248301,"byte_end":248373,"line_start":1570,"line_end":1570,"column_start":2,"column_end":74}},{"value":"/ construct two new references. If `mid` is out of bounds, then the first","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248375,"byte_end":248450,"line_start":1571,"line_end":1571,"column_start":2,"column_end":77}},{"value":"/ slice will be too large, and the second will be *catastrophically*","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248452,"byte_end":248522,"line_start":1572,"line_end":1572,"column_start":2,"column_end":72}},{"value":"/ incorrect. As both are references to invalid memory, they are undefined","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248524,"byte_end":248599,"line_start":1573,"line_end":1573,"column_start":2,"column_end":77}},{"value":"/ to *construct*, and may not ever be used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248601,"byte_end":248646,"line_start":1574,"line_end":1574,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248648,"byte_end":248651,"line_start":1575,"line_end":1575,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248653,"byte_end":248667,"line_start":1576,"line_end":1576,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248669,"byte_end":248672,"line_start":1577,"line_end":1577,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248674,"byte_end":248685,"line_start":1578,"line_end":1578,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248687,"byte_end":248714,"line_start":1579,"line_end":1579,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248716,"byte_end":248719,"line_start":1580,"line_end":1580,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u16;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248721,"byte_end":248745,"line_start":1581,"line_end":1581,"column_start":2,"column_end":26}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248747,"byte_end":248791,"line_start":1582,"line_end":1582,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248793,"byte_end":248796,"line_start":1583,"line_end":1583,"column_start":2,"column_end":5}},{"value":"/ let (one, two) = unsafe { bits.split_at_unchecked_mut(8) };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248798,"byte_end":248861,"line_start":1584,"line_end":1584,"column_start":2,"column_end":65}},{"value":"/ one.set(7, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248863,"byte_end":248884,"line_start":1585,"line_end":1585,"column_start":2,"column_end":23}},{"value":"/ two.set(0, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248886,"byte_end":248907,"line_start":1586,"line_end":1586,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(data, 0x0180u16);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248909,"byte_end":248941,"line_start":1587,"line_end":1587,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248943,"byte_end":248950,"line_start":1588,"line_end":1588,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248952,"byte_end":248955,"line_start":1589,"line_end":1589,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":248957,"byte_end":248999,"line_start":1590,"line_end":1590,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":249001,"byte_end":249010,"line_start":1591,"line_end":1591,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":249012,"byte_end":249045,"line_start":1592,"line_end":1592,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251097,"byte_end":251111,"line_start":1667,"line_end":1667,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two indices without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Swaps the bits at two indices without checking boundary conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250167,"byte_end":250238,"line_start":1630,"line_end":1630,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250240,"byte_end":250243,"line_start":1631,"line_end":1631,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250245,"byte_end":250312,"line_start":1632,"line_end":1632,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`swap`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250314,"byte_end":250344,"line_start":1633,"line_end":1633,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250346,"byte_end":250349,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250351,"byte_end":250367,"line_start":1635,"line_end":1635,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250369,"byte_end":250372,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250374,"byte_end":250391,"line_start":1637,"line_end":1637,"column_start":2,"column_end":19}},{"value":"/ - `a`: One index to swap.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250393,"byte_end":250422,"line_start":1638,"line_end":1638,"column_start":2,"column_end":31}},{"value":"/ - `b`: The other index to swap.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250424,"byte_end":250459,"line_start":1639,"line_end":1639,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250461,"byte_end":250464,"line_start":1640,"line_end":1640,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250466,"byte_end":250479,"line_start":1641,"line_end":1641,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250481,"byte_end":250484,"line_start":1642,"line_end":1642,"column_start":2,"column_end":5}},{"value":"/ The bit at index `a` is written into index `b`, and the bit at index `b`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250486,"byte_end":250562,"line_start":1643,"line_end":1643,"column_start":2,"column_end":78}},{"value":"/ is written into `a`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250564,"byte_end":250588,"line_start":1644,"line_end":1644,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250590,"byte_end":250593,"line_start":1645,"line_end":1645,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250595,"byte_end":250607,"line_start":1646,"line_end":1646,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250609,"byte_end":250612,"line_start":1647,"line_end":1647,"column_start":2,"column_end":5}},{"value":"/ Both `a` and `b` must be less than `self.len()`. Indices greater than","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250614,"byte_end":250687,"line_start":1648,"line_end":1648,"column_start":2,"column_end":75}},{"value":"/ the length will cause out-of-bounds memory access, which can lead to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250689,"byte_end":250761,"line_start":1649,"line_end":1649,"column_start":2,"column_end":74}},{"value":"/ memory unsafety and a program crash.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250763,"byte_end":250803,"line_start":1650,"line_end":1650,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250805,"byte_end":250808,"line_start":1651,"line_end":1651,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250810,"byte_end":250824,"line_start":1652,"line_end":1652,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250826,"byte_end":250829,"line_start":1653,"line_end":1653,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250831,"byte_end":250842,"line_start":1654,"line_end":1654,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250844,"byte_end":250871,"line_start":1655,"line_end":1655,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250873,"byte_end":250876,"line_start":1656,"line_end":1656,"column_start":2,"column_end":5}},{"value":"/ let mut data = 8u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250878,"byte_end":250901,"line_start":1657,"line_end":1657,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250903,"byte_end":250947,"line_start":1658,"line_end":1658,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250949,"byte_end":250952,"line_start":1659,"line_end":1659,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.swap_unchecked(0, 4); }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250954,"byte_end":250995,"line_start":1660,"line_end":1660,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":250997,"byte_end":251000,"line_start":1661,"line_end":1661,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 128);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251002,"byte_end":251028,"line_start":1662,"line_end":1662,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251030,"byte_end":251037,"line_start":1663,"line_end":1663,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251039,"byte_end":251042,"line_start":1664,"line_end":1664,"column_start":2,"column_end":5}},{"value":"/ [`swap`]: #method.swap","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251044,"byte_end":251070,"line_start":1665,"line_end":1665,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251072,"byte_end":251081,"line_start":1666,"line_end":1666,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252404,"byte_end":252418,"line_start":1711,"line_end":1711,"column_start":16,"column_end":30},"name":"copy_unchecked","qualname":"<BitSlice<O, T>>::copy_unchecked","value":"pub unsafe fn copy_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Copies a bit from one index to another without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Copies a bit from one index to another without checking boundary","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251290,"byte_end":251358,"line_start":1674,"line_end":1674,"column_start":2,"column_end":70}},{"value":"/ conditions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251360,"byte_end":251375,"line_start":1675,"line_end":1675,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251377,"byte_end":251380,"line_start":1676,"line_end":1676,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251382,"byte_end":251398,"line_start":1677,"line_end":1677,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251400,"byte_end":251403,"line_start":1678,"line_end":1678,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251405,"byte_end":251422,"line_start":1679,"line_end":1679,"column_start":2,"column_end":19}},{"value":"/ - `from`: The index whose bit is to be copied","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251424,"byte_end":251473,"line_start":1680,"line_end":1680,"column_start":2,"column_end":51}},{"value":"/ - `to`: The index into which the copied bit is written.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251475,"byte_end":251534,"line_start":1681,"line_end":1681,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251536,"byte_end":251539,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251541,"byte_end":251554,"line_start":1683,"line_end":1683,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251556,"byte_end":251559,"line_start":1684,"line_end":1684,"column_start":2,"column_end":5}},{"value":"/ The bit at `from` is written into `to`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251561,"byte_end":251604,"line_start":1685,"line_end":1685,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251606,"byte_end":251609,"line_start":1686,"line_end":1686,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251611,"byte_end":251623,"line_start":1687,"line_end":1687,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251625,"byte_end":251628,"line_start":1688,"line_end":1688,"column_start":2,"column_end":5}},{"value":"/ Both `from` and `to` must be less than `self.len()`, in order for","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251630,"byte_end":251699,"line_start":1689,"line_end":1689,"column_start":2,"column_end":71}},{"value":"/ `self` to legally read from and write to them, respectively.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251701,"byte_end":251765,"line_start":1690,"line_end":1690,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251767,"byte_end":251770,"line_start":1691,"line_end":1691,"column_start":2,"column_end":5}},{"value":"/ If `self` had been split from a larger slice, reading from `from` or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251772,"byte_end":251844,"line_start":1692,"line_end":1692,"column_start":2,"column_end":74}},{"value":"/ writing to `to` may not *necessarily* cause a memory-safety violation in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251846,"byte_end":251922,"line_start":1693,"line_end":1693,"column_start":2,"column_end":78}},{"value":"/ the Rust model, due to the aliasing system `bitvec` employs. However,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251924,"byte_end":251997,"line_start":1694,"line_end":1694,"column_start":2,"column_end":75}},{"value":"/ writing outside the bounds of a slice reference is *always* a logical","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":251999,"byte_end":252072,"line_start":1695,"line_end":1695,"column_start":2,"column_end":75}},{"value":"/ error, as it causes changes observable by another reference handle.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252074,"byte_end":252145,"line_start":1696,"line_end":1696,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252147,"byte_end":252150,"line_start":1697,"line_end":1697,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252152,"byte_end":252166,"line_start":1698,"line_end":1698,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252168,"byte_end":252171,"line_start":1699,"line_end":1699,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252173,"byte_end":252184,"line_start":1700,"line_end":1700,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252186,"byte_end":252213,"line_start":1701,"line_end":1701,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252215,"byte_end":252218,"line_start":1702,"line_end":1702,"column_start":2,"column_end":5}},{"value":"/ let mut data = 1u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252220,"byte_end":252243,"line_start":1703,"line_end":1703,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252245,"byte_end":252289,"line_start":1704,"line_end":1704,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252291,"byte_end":252294,"line_start":1705,"line_end":1705,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.copy_unchecked(0, 2) };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252296,"byte_end":252337,"line_start":1706,"line_end":1706,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252339,"byte_end":252342,"line_start":1707,"line_end":1707,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 5);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252344,"byte_end":252368,"line_start":1708,"line_end":1708,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252370,"byte_end":252377,"line_start":1709,"line_end":1709,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252379,"byte_end":252388,"line_start":1710,"line_end":1710,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253557,"byte_end":253578,"line_start":1750,"line_end":1750,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252531,"byte_end":252600,"line_start":1716,"line_end":1716,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252602,"byte_end":252605,"line_start":1717,"line_end":1717,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252607,"byte_end":252680,"line_start":1718,"line_end":1718,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252682,"byte_end":252755,"line_start":1719,"line_end":1719,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252757,"byte_end":252832,"line_start":1720,"line_end":1720,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to `self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252834,"byte_end":252881,"line_start":1721,"line_end":1721,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252883,"byte_end":252886,"line_start":1722,"line_end":1722,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252888,"byte_end":252901,"line_start":1723,"line_end":1723,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252903,"byte_end":252906,"line_start":1724,"line_end":1724,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252908,"byte_end":252984,"line_start":1725,"line_end":1725,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252986,"byte_end":252989,"line_start":1726,"line_end":1726,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":252991,"byte_end":253003,"line_start":1727,"line_end":1727,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253005,"byte_end":253008,"line_start":1728,"line_end":1728,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253010,"byte_end":253084,"line_start":1729,"line_end":1729,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253086,"byte_end":253133,"line_start":1730,"line_end":1730,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253135,"byte_end":253138,"line_start":1731,"line_end":1731,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253140,"byte_end":253152,"line_start":1732,"line_end":1732,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253154,"byte_end":253157,"line_start":1733,"line_end":1733,"column_start":2,"column_end":5}},{"value":"/ Both the `src` range and the target range `dest .. dest + src.len()`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253159,"byte_end":253231,"line_start":1734,"line_end":1734,"column_start":2,"column_end":74}},{"value":"/ must not exceed the `self.len()` slice range.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253233,"byte_end":253282,"line_start":1735,"line_end":1735,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253284,"byte_end":253287,"line_start":1736,"line_end":1736,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253289,"byte_end":253303,"line_start":1737,"line_end":1737,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253305,"byte_end":253308,"line_start":1738,"line_end":1738,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253310,"byte_end":253321,"line_start":1739,"line_end":1739,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253323,"byte_end":253350,"line_start":1740,"line_end":1740,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253352,"byte_end":253355,"line_start":1741,"line_end":1741,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0x07u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253357,"byte_end":253383,"line_start":1742,"line_end":1742,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253385,"byte_end":253429,"line_start":1743,"line_end":1743,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253431,"byte_end":253434,"line_start":1744,"line_end":1744,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.copy_within_unchecked(5 .., 0); }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253436,"byte_end":253487,"line_start":1745,"line_end":1745,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253489,"byte_end":253492,"line_start":1746,"line_end":1746,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 0xE7);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253494,"byte_end":253521,"line_start":1747,"line_end":1747,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253523,"byte_end":253530,"line_start":1748,"line_end":1748,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253532,"byte_end":253541,"line_start":1749,"line_end":1749,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255795,"byte_end":255806,"line_start":1818,"line_end":1818,"column_start":9,"column_end":20},"name":"offset_from","qualname":"<BitSlice<O, T>>::offset_from","value":"pub fn offset_from(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Produces the absolute offset in bits between two slice heads.","sig":null,"attributes":[{"value":"/ Produces the absolute offset in bits between two slice heads.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":253962,"byte_end":254027,"line_start":1768,"line_end":1768,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254029,"byte_end":254032,"line_start":1769,"line_end":1769,"column_start":2,"column_end":5}},{"value":"/ While this method is sound for any two arbitrary bit slices, the answer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254034,"byte_end":254109,"line_start":1770,"line_end":1770,"column_start":2,"column_end":77}},{"value":"/ it produces is meaningful *only* when one argument is a strict subslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254111,"byte_end":254186,"line_start":1771,"line_end":1771,"column_start":2,"column_end":77}},{"value":"/ of the other. If the two slices are created from different buffers","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254188,"byte_end":254258,"line_start":1772,"line_end":1772,"column_start":2,"column_end":72}},{"value":"/ entirely, a comparison is undefined; if the two slices are disjoint","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254260,"byte_end":254331,"line_start":1773,"line_end":1773,"column_start":2,"column_end":73}},{"value":"/ regions of the same buffer, then the semantically correct distance is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254333,"byte_end":254406,"line_start":1774,"line_end":1774,"column_start":2,"column_end":75}},{"value":"/ between the tail of the lower and the head of the upper, which this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254408,"byte_end":254479,"line_start":1775,"line_end":1775,"column_start":2,"column_end":73}},{"value":"/ does not measure.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254481,"byte_end":254502,"line_start":1776,"line_end":1776,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254504,"byte_end":254507,"line_start":1777,"line_end":1777,"column_start":2,"column_end":5}},{"value":"/ # Visual Description","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254509,"byte_end":254533,"line_start":1778,"line_end":1778,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254535,"byte_end":254538,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ Consider the following sequence of bits:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254540,"byte_end":254584,"line_start":1780,"line_end":1780,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254586,"byte_end":254589,"line_start":1781,"line_end":1781,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254591,"byte_end":254602,"line_start":1782,"line_end":1782,"column_start":2,"column_end":13}},{"value":"/ [ 0 1 2 3 4 5 6 7 8 9 a b ]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254604,"byte_end":254635,"line_start":1783,"line_end":1783,"column_start":2,"column_end":33}},{"value":"/   |       ^^^^^^^       |","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254637,"byte_end":254666,"line_start":1784,"line_end":1784,"column_start":2,"column_end":31}},{"value":"/   ^^^^^^^^^^^^^^^^^^^^^^^","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254668,"byte_end":254697,"line_start":1785,"line_end":1785,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254699,"byte_end":254706,"line_start":1786,"line_end":1786,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254708,"byte_end":254711,"line_start":1787,"line_end":1787,"column_start":2,"column_end":5}},{"value":"/ It does not matter whether there are bits between the tail of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254713,"byte_end":254782,"line_start":1788,"line_end":1788,"column_start":2,"column_end":71}},{"value":"/ smaller and the larger slices. The offset is computed from the bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254784,"byte_end":254854,"line_start":1789,"line_end":1789,"column_start":2,"column_end":72}},{"value":"/ distance between the two heads.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254856,"byte_end":254891,"line_start":1790,"line_end":1790,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254893,"byte_end":254896,"line_start":1791,"line_end":1791,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254898,"byte_end":254912,"line_start":1792,"line_end":1792,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254914,"byte_end":254917,"line_start":1793,"line_end":1793,"column_start":2,"column_end":5}},{"value":"/ This function computes the *semantic* distance between the heads, rather","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254919,"byte_end":254995,"line_start":1794,"line_end":1794,"column_start":2,"column_end":78}},{"value":"/ than the *electrical. It does not take into account the `BitOrder`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":254997,"byte_end":255067,"line_start":1795,"line_end":1795,"column_start":2,"column_end":72}},{"value":"/ implementation of the slice. See the [`::electrical_distance`] method","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255069,"byte_end":255142,"line_start":1796,"line_end":1796,"column_start":2,"column_end":75}},{"value":"/ for that comparison.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255144,"byte_end":255168,"line_start":1797,"line_end":1797,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255170,"byte_end":255173,"line_start":1798,"line_end":1798,"column_start":2,"column_end":5}},{"value":"/ # Safety and Soundness","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255175,"byte_end":255201,"line_start":1799,"line_end":1799,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255203,"byte_end":255206,"line_start":1800,"line_end":1800,"column_start":2,"column_end":5}},{"value":"/ One of `self` or `other` must contain the other for this comparison to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255208,"byte_end":255282,"line_start":1801,"line_end":1801,"column_start":2,"column_end":76}},{"value":"/ be meaningful.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255284,"byte_end":255302,"line_start":1802,"line_end":1802,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255304,"byte_end":255307,"line_start":1803,"line_end":1803,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255309,"byte_end":255325,"line_start":1804,"line_end":1804,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255327,"byte_end":255330,"line_start":1805,"line_end":1805,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255332,"byte_end":255345,"line_start":1806,"line_end":1806,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255347,"byte_end":255422,"line_start":1807,"line_end":1807,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255424,"byte_end":255461,"line_start":1808,"line_end":1808,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255463,"byte_end":255466,"line_start":1809,"line_end":1809,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255468,"byte_end":255481,"line_start":1810,"line_end":1810,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255483,"byte_end":255486,"line_start":1811,"line_end":1811,"column_start":2,"column_end":5}},{"value":"/ The distance in (semantic) bits betwen the heads of each region. The","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255488,"byte_end":255560,"line_start":1812,"line_end":1812,"column_start":2,"column_end":74}},{"value":"/ value is positive when `other` is higher in the address space than","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255562,"byte_end":255632,"line_start":1813,"line_end":1813,"column_start":2,"column_end":72}},{"value":"/ `self`, and negative when `other` is lower in the address space than","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255634,"byte_end":255706,"line_start":1814,"line_end":1814,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255708,"byte_end":255719,"line_start":1815,"line_end":1815,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255721,"byte_end":255724,"line_start":1816,"line_end":1816,"column_start":2,"column_end":5}},{"value":"/ [`::electrical_distance]`: #method.electrical_comparison","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255726,"byte_end":255786,"line_start":1817,"line_end":1817,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256639,"byte_end":256658,"line_start":1842,"line_end":1842,"column_start":9,"column_end":28},"name":"electrical_distance","qualname":"<BitSlice<O, T>>::electrical_distance","value":"pub fn electrical_distance(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Computes the electrical distance between the heads of two slices.","sig":null,"attributes":[{"value":"/ Computes the electrical distance between the heads of two slices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":255995,"byte_end":256064,"line_start":1824,"line_end":1824,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256066,"byte_end":256069,"line_start":1825,"line_end":1825,"column_start":2,"column_end":5}},{"value":"/ This method uses the slices’ `BitOrder` implementation to compute the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256071,"byte_end":256146,"line_start":1826,"line_end":1826,"column_start":2,"column_end":75}},{"value":"/ bit position of their heads, then computes the shift distance, in bits,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256148,"byte_end":256223,"line_start":1827,"line_end":1827,"column_start":2,"column_end":77}},{"value":"/ between them.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256225,"byte_end":256242,"line_start":1828,"line_end":1828,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256244,"byte_end":256247,"line_start":1829,"line_end":1829,"column_start":2,"column_end":5}},{"value":"/ This computation presumes that the bits are counted in the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256249,"byte_end":256316,"line_start":1830,"line_end":1830,"column_start":2,"column_end":69}},{"value":"/ direction as are bytes in the abstract memory map.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256318,"byte_end":256372,"line_start":1831,"line_end":1831,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256374,"byte_end":256377,"line_start":1832,"line_end":1832,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256379,"byte_end":256395,"line_start":1833,"line_end":1833,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256397,"byte_end":256400,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256402,"byte_end":256415,"line_start":1835,"line_end":1835,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256417,"byte_end":256492,"line_start":1836,"line_end":1836,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256494,"byte_end":256531,"line_start":1837,"line_end":1837,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256533,"byte_end":256536,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256538,"byte_end":256551,"line_start":1839,"line_end":1839,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256553,"byte_end":256556,"line_start":1840,"line_end":1840,"column_start":2,"column_end":5}},{"value":"/ The electrical bit distance between the heads of `self` and `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":256558,"byte_end":256630,"line_start":1841,"line_end":1841,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259533,"byte_end":259553,"line_start":1935,"line_end":1935,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":258998,"byte_end":259043,"line_start":1921,"line_end":1921,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259045,"byte_end":259048,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`split_at_mut`], except that it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259050,"byte_end":259123,"line_start":1923,"line_end":1923,"column_start":2,"column_end":75}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259125,"byte_end":259192,"line_start":1924,"line_end":1924,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259194,"byte_end":259197,"line_start":1925,"line_end":1925,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259199,"byte_end":259211,"line_start":1926,"line_end":1926,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259213,"byte_end":259216,"line_start":1927,"line_end":1927,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259218,"byte_end":259290,"line_start":1928,"line_end":1928,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259292,"byte_end":259360,"line_start":1929,"line_end":1929,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259362,"byte_end":259365,"line_start":1930,"line_end":1930,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259367,"byte_end":259409,"line_start":1931,"line_end":1931,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259411,"byte_end":259420,"line_start":1932,"line_end":1932,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259494,"byte_end":259524,"line_start":1934,"line_end":1934,"column_start":2,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":965},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260181,"byte_end":260189,"line_start":1960,"line_end":1960,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259823,"byte_end":259878,"line_start":1951,"line_end":1951,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259880,"byte_end":259883,"line_start":1952,"line_end":1952,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259885,"byte_end":259958,"line_start":1953,"line_end":1953,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259960,"byte_end":259980,"line_start":1954,"line_end":1954,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259982,"byte_end":259985,"line_start":1955,"line_end":1955,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259987,"byte_end":260031,"line_start":1956,"line_end":1956,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260033,"byte_end":260077,"line_start":1957,"line_end":1957,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260079,"byte_end":260123,"line_start":1958,"line_end":1958,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260125,"byte_end":260169,"line_start":1959,"line_end":1959,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":966},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":261015,"byte_end":261023,"line_start":1975,"line_end":1975,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260230,"byte_end":260292,"line_start":1961,"line_end":1961,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260294,"byte_end":260327,"line_start":1962,"line_end":1962,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260329,"byte_end":260332,"line_start":1963,"line_end":1963,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260334,"byte_end":260402,"line_start":1964,"line_end":1964,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260404,"byte_end":260476,"line_start":1965,"line_end":1965,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260478,"byte_end":260550,"line_start":1966,"line_end":1966,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260552,"byte_end":260620,"line_start":1967,"line_end":1967,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260622,"byte_end":260625,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260627,"byte_end":260688,"line_start":1969,"line_end":1969,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260690,"byte_end":260751,"line_start":1970,"line_end":1970,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260753,"byte_end":260814,"line_start":1971,"line_end":1971,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260816,"byte_end":260877,"line_start":1972,"line_end":1972,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260879,"byte_end":260940,"line_start":1973,"line_end":1973,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":260942,"byte_end":261003,"line_start":1974,"line_end":1974,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":967},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":262837,"byte_end":262856,"line_start":2024,"line_end":2024,"column_start":15,"column_end":34},"name":"bits_from_raw_parts","qualname":"::slice::bits_from_raw_parts","value":"pub unsafe fn bits_from_raw_parts<'a, O, T>(*const T, u8, usize)\n-> Option<&'a BitSlice<O, T>> where O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `&BitSlice` reference from its component data.","sig":null,"attributes":[{"value":"* Constructs a `&BitSlice` reference from its component data.\n\nThis is logically equivalent to [`slice::from_raw_parts`] for `[T]`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the returned bitslice handle. This must be no longer\n  than the duration of the referent region, as it is illegal for references to\n  dangle.\n\n# Type Parameters\n\n- `O`: The ordering of bits within elements `T`.\n- `T`: The type of each memory element in the backing storage region.\n\n# Parameters\n\n- `addr`: The base address of the memory region that the `BitSlice` covers.\n- `head`: The index of the first live bit in `*addr`, at which the `BitSlice`\n  begins. This is required to be in the range `0 .. T::Mem::BITS`.\n- `bits`: The number of live bits, beginning at `head` in `*addr`, that the\n  `BitSlice` contains. This must be no greater than `BitSlice::MAX_BITS`.\n\n# Returns\n\nIf the input parameters are valid, this returns `Some` shared reference to a\n`BitSlice`. The failure conditions causing this to return `None` are:\n\n- `head` is not less than [`T::Mem::BITS`]\n- `bits` is greater than [`BitSlice::<O, T>::MAX_BITS`]\n- `addr` is not adequately aligned to `T`\n- `addr` is so high in the memory space that the region wraps to the base of the\n  memory space\n\n# Safety\n\nThe memory region described by the returned `BitSlice` must be validly allocated\nwithin the caller’s memory management system. It must also not be modified for\nthe duration of the lifetime `'a`, unless the `T` type parameter permits safe\nshared mutation.\n\n[`BitSlice::<O, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`T::Mem::BITS`]: ../mem/trait.BitMemory.html#associatedconstant.BITS\n[`slice::from_raw_parts`]: https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":261066,"byte_end":262812,"line_start":1978,"line_end":2022,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":262813,"byte_end":262822,"line_start":2023,"line_end":2023,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":971},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":264880,"byte_end":264903,"line_start":2083,"line_end":2083,"column_start":15,"column_end":38},"name":"bits_from_raw_parts_mut","qualname":"::slice::bits_from_raw_parts_mut","value":"pub unsafe fn bits_from_raw_parts_mut<'a, O, T>(*mut T, u8, usize)\n-> Option<&'a mut BitSlice<O, T>> where O: BitOrder, T: 'a + BitStore +\nBitMemory","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `&mut BitSlice` reference from its component data.","sig":null,"attributes":[{"value":"* Constructs a `&mut BitSlice` reference from its component data.\n\nThis is logically equivalent to [`slice::from_raw_parts_mut`] for `[T]`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the returned bitslice handle. This must be no longer\n  than the duration of the referent region, as it is illegal for references to\n  dangle.\n\n# Type Parameters\n\n- `O`: The ordering of bits within elements `T`.\n- `T`: The type of each memory element in the backing storage region.\n\n# Parameters\n\n- `addr`: The base address of the memory region that the `BitSlice` covers.\n- `head`: The index of the first live bit in `*addr`, at which the `BitSlice`\n  begins. This is required to be in the range `0 .. T::Mem::BITS`.\n- `bits`: The number of live bits, beginning at `head` in `*addr`, that the\n  `BitSlice` contains. This must be no greater than `BitSlice::MAX_BITS`.\n\n# Returns\n\nIf the input parameters are valid, this returns `Some` shared reference to a\n`BitSlice`. The failure conditions causing this to return `None` are:\n\n- `head` is not less than [`T::Mem::BITS`]\n- `bits` is greater than [`BitSlice::<O, T>::MAX_BITS`]\n- `addr` is not adequately aligned to `T`\n- `addr` is so high in the memory space that the region wraps to the base of the\n  memory space\n\n# Safety\n\nThe memory region described by the returned `BitSlice` must be validly allocated\nwithin the caller’s memory management system. It must also not be reachable for\nthe lifetime `'a` by any path other than references derived from the return\nvalue.\n\n[`BitSlice::<O, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`T::Mem::BITS`]: ../mem/trait.BitMemory.html#associatedconstant.BITS\n[`slice::from_raw_parts_mut`]: https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":263104,"byte_end":264855,"line_start":2037,"line_end":2081,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":264856,"byte_end":264865,"line_start":2082,"line_end":2082,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266818,"byte_end":266821,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266527,"byte_end":266571,"line_start":70,"line_end":70,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266573,"byte_end":266576,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266578,"byte_end":266592,"line_start":72,"line_end":72,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266594,"byte_end":266597,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/std/primitive.slice.html#method.len)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266599,"byte_end":266680,"line_start":74,"line_end":74,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266682,"byte_end":266685,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266687,"byte_end":266701,"line_start":76,"line_end":76,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266703,"byte_end":266706,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266708,"byte_end":266719,"line_start":78,"line_end":78,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266721,"byte_end":266748,"line_start":79,"line_end":79,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266750,"byte_end":266753,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0].len(), 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266755,"byte_end":266789,"line_start":81,"line_end":81,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266791,"byte_end":266798,"line_start":82,"line_end":82,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266800,"byte_end":266809,"line_start":83,"line_end":83,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267208,"byte_end":267216,"line_start":103,"line_end":103,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266867,"byte_end":266917,"line_start":88,"line_end":88,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266919,"byte_end":266922,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266924,"byte_end":266938,"line_start":90,"line_end":90,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266940,"byte_end":266943,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266945,"byte_end":267036,"line_start":92,"line_end":92,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267038,"byte_end":267041,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267043,"byte_end":267057,"line_start":94,"line_end":94,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267059,"byte_end":267062,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267064,"byte_end":267075,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267077,"byte_end":267104,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267106,"byte_end":267109,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267111,"byte_end":267143,"line_start":99,"line_end":99,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits![0].is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267145,"byte_end":267179,"line_start":100,"line_end":100,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267181,"byte_end":267188,"line_start":101,"line_end":101,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267190,"byte_end":267199,"line_start":102,"line_end":102,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268000,"byte_end":268005,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<&bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267628,"byte_end":267693,"line_start":114,"line_end":114,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267695,"byte_end":267698,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267700,"byte_end":267714,"line_start":116,"line_end":116,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267716,"byte_end":267719,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ [`slice::first`](https://doc.rust-lang.org/std/primitive.slice.html#method.first)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267721,"byte_end":267806,"line_start":118,"line_end":118,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267808,"byte_end":267811,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267813,"byte_end":267827,"line_start":120,"line_end":120,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267829,"byte_end":267832,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267834,"byte_end":267845,"line_start":122,"line_end":122,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267847,"byte_end":267874,"line_start":123,"line_end":123,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267876,"byte_end":267879,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits![1, 0].first());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267881,"byte_end":267930,"line_start":125,"line_end":125,"column_start":2,"column_end":51}},{"value":"/ assert!(bits![].first().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267932,"byte_end":267971,"line_start":126,"line_end":126,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267973,"byte_end":267980,"line_start":127,"line_end":127,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":267982,"byte_end":267991,"line_start":128,"line_end":128,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268784,"byte_end":268793,"line_start":160,"line_end":160,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitMut<, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None` if it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268051,"byte_end":268127,"line_start":133,"line_end":133,"column_start":2,"column_end":78}},{"value":"/ is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268129,"byte_end":268142,"line_start":134,"line_end":134,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268144,"byte_end":268147,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268149,"byte_end":268163,"line_start":136,"line_end":136,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268165,"byte_end":268168,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268170,"byte_end":268263,"line_start":138,"line_end":138,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268265,"byte_end":268268,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268270,"byte_end":268291,"line_start":140,"line_end":140,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268293,"byte_end":268296,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268298,"byte_end":268369,"line_start":142,"line_end":142,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268371,"byte_end":268443,"line_start":143,"line_end":143,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268445,"byte_end":268518,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268520,"byte_end":268527,"line_start":145,"line_end":145,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268529,"byte_end":268532,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268534,"byte_end":268548,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268550,"byte_end":268553,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268555,"byte_end":268566,"line_start":149,"line_end":149,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268568,"byte_end":268595,"line_start":150,"line_end":150,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268597,"byte_end":268600,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268602,"byte_end":268630,"line_start":152,"line_end":152,"column_start":2,"column_end":30}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268632,"byte_end":268654,"line_start":153,"line_end":153,"column_start":2,"column_end":24}},{"value":"/ if let Some(mut first) = bits.first_mut() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268656,"byte_end":268703,"line_start":154,"line_end":154,"column_start":2,"column_end":49}},{"value":"/   *first = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268705,"byte_end":268725,"line_start":155,"line_end":155,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268727,"byte_end":268732,"line_start":156,"line_end":156,"column_start":2,"column_end":7}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268734,"byte_end":268755,"line_start":157,"line_end":157,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268757,"byte_end":268764,"line_start":158,"line_end":158,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268766,"byte_end":268775,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269292,"byte_end":269303,"line_start":182,"line_end":182,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(&bool, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or `None`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268854,"byte_end":268928,"line_start":164,"line_end":164,"column_start":2,"column_end":76}},{"value":"/ if it is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268930,"byte_end":268949,"line_start":165,"line_end":165,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268951,"byte_end":268954,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268956,"byte_end":268970,"line_start":167,"line_end":167,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268972,"byte_end":268975,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/std/primitive.slice.html#split_first)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":268977,"byte_end":269067,"line_start":169,"line_end":169,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269069,"byte_end":269072,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269074,"byte_end":269088,"line_start":171,"line_end":171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269090,"byte_end":269093,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269095,"byte_end":269106,"line_start":173,"line_end":173,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269108,"byte_end":269135,"line_start":174,"line_end":174,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269137,"byte_end":269140,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ if let Some((first, rest)) = bits![1].split_first() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269142,"byte_end":269199,"line_start":176,"line_end":176,"column_start":2,"column_end":59}},{"value":"/   assert!(*first);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269201,"byte_end":269223,"line_start":177,"line_end":177,"column_start":2,"column_end":24}},{"value":"/   assert!(rest.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269225,"byte_end":269256,"line_start":178,"line_end":178,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269258,"byte_end":269263,"line_start":179,"line_end":179,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269265,"byte_end":269272,"line_start":180,"line_end":180,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269274,"byte_end":269283,"line_start":181,"line_end":181,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270680,"byte_end":270695,"line_start":227,"line_end":227,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitMut<, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or `None`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269497,"byte_end":269571,"line_start":192,"line_end":192,"column_start":2,"column_end":76}},{"value":"/ if it is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269573,"byte_end":269592,"line_start":193,"line_end":193,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269594,"byte_end":269597,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269599,"byte_end":269613,"line_start":195,"line_end":195,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269615,"byte_end":269618,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269620,"byte_end":269718,"line_start":197,"line_end":197,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269720,"byte_end":269723,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269725,"byte_end":269746,"line_start":199,"line_end":199,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269748,"byte_end":269751,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269753,"byte_end":269824,"line_start":201,"line_end":201,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269826,"byte_end":269898,"line_start":202,"line_end":202,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269900,"byte_end":269973,"line_start":203,"line_end":203,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269975,"byte_end":269982,"line_start":204,"line_end":204,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269984,"byte_end":269987,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":269989,"byte_end":270061,"line_start":206,"line_end":206,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270063,"byte_end":270136,"line_start":207,"line_end":207,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270138,"byte_end":270172,"line_start":208,"line_end":208,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270174,"byte_end":270177,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270179,"byte_end":270193,"line_start":210,"line_end":210,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270195,"byte_end":270198,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270200,"byte_end":270211,"line_start":212,"line_end":212,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270213,"byte_end":270240,"line_start":213,"line_end":213,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270242,"byte_end":270245,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270247,"byte_end":270278,"line_start":215,"line_end":215,"column_start":2,"column_end":33}},{"value":"/ if let Some((mut first, rest)) = bits.split_first_mut() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270280,"byte_end":270341,"line_start":216,"line_end":216,"column_start":2,"column_end":63}},{"value":"/   *first = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270343,"byte_end":270363,"line_start":217,"line_end":217,"column_start":2,"column_end":22}},{"value":"/   *rest.get_mut(1).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270365,"byte_end":270404,"line_start":218,"line_end":218,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270406,"byte_end":270411,"line_start":219,"line_end":219,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.count_ones(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270413,"byte_end":270450,"line_start":220,"line_end":220,"column_start":2,"column_end":39}},{"value":"/ assert!(bits![mut].split_first_mut().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270452,"byte_end":270504,"line_start":221,"line_end":221,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270506,"byte_end":270513,"line_start":222,"line_end":222,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270515,"byte_end":270524,"line_start":223,"line_end":223,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270638,"byte_end":270671,"line_start":226,"line_end":226,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271403,"byte_end":271413,"line_start":258,"line_end":258,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(&bool, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or `None` if","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":270942,"byte_end":271018,"line_start":239,"line_end":239,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271020,"byte_end":271036,"line_start":240,"line_end":240,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271038,"byte_end":271041,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271043,"byte_end":271057,"line_start":242,"line_end":242,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271059,"byte_end":271062,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271064,"byte_end":271159,"line_start":244,"line_end":244,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271161,"byte_end":271164,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271166,"byte_end":271180,"line_start":246,"line_end":246,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271182,"byte_end":271185,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271187,"byte_end":271198,"line_start":248,"line_end":248,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271200,"byte_end":271227,"line_start":249,"line_end":249,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271229,"byte_end":271232,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271234,"byte_end":271258,"line_start":251,"line_end":251,"column_start":2,"column_end":26}},{"value":"/ if let Some((last, rest)) = bits.split_last() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271260,"byte_end":271311,"line_start":252,"line_end":252,"column_start":2,"column_end":53}},{"value":"/   assert!(*last);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271313,"byte_end":271334,"line_start":253,"line_end":253,"column_start":2,"column_end":23}},{"value":"/   assert!(rest.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271336,"byte_end":271367,"line_start":254,"line_end":254,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271369,"byte_end":271374,"line_start":255,"line_end":255,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271376,"byte_end":271383,"line_start":256,"line_end":256,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271385,"byte_end":271394,"line_start":257,"line_end":257,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272815,"byte_end":272829,"line_start":304,"line_end":304,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitMut<, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or `None` if","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271627,"byte_end":271703,"line_start":268,"line_end":268,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271705,"byte_end":271721,"line_start":269,"line_end":269,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271723,"byte_end":271726,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271728,"byte_end":271742,"line_start":271,"line_end":271,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271744,"byte_end":271747,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271749,"byte_end":271852,"line_start":273,"line_end":273,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271854,"byte_end":271857,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271859,"byte_end":271880,"line_start":275,"line_end":275,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271882,"byte_end":271885,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271887,"byte_end":271958,"line_start":277,"line_end":277,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":271960,"byte_end":272032,"line_start":278,"line_end":278,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272034,"byte_end":272107,"line_start":279,"line_end":279,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272109,"byte_end":272116,"line_start":280,"line_end":280,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272118,"byte_end":272121,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272123,"byte_end":272195,"line_start":282,"line_end":282,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272197,"byte_end":272270,"line_start":283,"line_end":283,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272272,"byte_end":272306,"line_start":284,"line_end":284,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272308,"byte_end":272311,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272313,"byte_end":272327,"line_start":286,"line_end":286,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272329,"byte_end":272332,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272334,"byte_end":272345,"line_start":288,"line_end":288,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272347,"byte_end":272374,"line_start":289,"line_end":289,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272376,"byte_end":272379,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 3];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272381,"byte_end":272412,"line_start":291,"line_end":291,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272414,"byte_end":272417,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = bits.split_last_mut() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272419,"byte_end":272478,"line_start":293,"line_end":293,"column_start":2,"column_end":61}},{"value":"/   *last = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272480,"byte_end":272499,"line_start":294,"line_end":294,"column_start":2,"column_end":21}},{"value":"/   *rest.get_mut(1).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272501,"byte_end":272540,"line_start":295,"line_end":295,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272542,"byte_end":272547,"line_start":296,"line_end":296,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.count_ones(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272549,"byte_end":272586,"line_start":297,"line_end":297,"column_start":2,"column_end":39}},{"value":"/ assert!(bits![mut].split_last_mut().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272588,"byte_end":272639,"line_start":298,"line_end":298,"column_start":2,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272641,"byte_end":272648,"line_start":299,"line_end":299,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272650,"byte_end":272659,"line_start":300,"line_end":300,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":272773,"byte_end":272806,"line_start":303,"line_end":303,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273451,"byte_end":273455,"line_start":331,"line_end":331,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<&bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273084,"byte_end":273148,"line_start":316,"line_end":316,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273150,"byte_end":273153,"line_start":317,"line_end":317,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273155,"byte_end":273169,"line_start":318,"line_end":318,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273171,"byte_end":273174,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/std/primitive.slice.html#method.last)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273176,"byte_end":273259,"line_start":320,"line_end":320,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273261,"byte_end":273264,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273266,"byte_end":273280,"line_start":322,"line_end":322,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273282,"byte_end":273285,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273287,"byte_end":273298,"line_start":324,"line_end":324,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273300,"byte_end":273327,"line_start":325,"line_end":325,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273329,"byte_end":273332,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits![0, 1].last());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273334,"byte_end":273382,"line_start":327,"line_end":327,"column_start":2,"column_end":50}},{"value":"/ assert!(bits![].last().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273384,"byte_end":273422,"line_start":328,"line_end":328,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273424,"byte_end":273431,"line_start":329,"line_end":329,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273433,"byte_end":273442,"line_start":330,"line_end":330,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274285,"byte_end":274293,"line_start":364,"line_end":364,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitMut<, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit of the slice, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit of the slice, or `None` if it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273582,"byte_end":273657,"line_start":338,"line_end":338,"column_start":2,"column_end":77}},{"value":"/ is empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273659,"byte_end":273672,"line_start":339,"line_end":339,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273674,"byte_end":273677,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273679,"byte_end":273693,"line_start":341,"line_end":341,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273695,"byte_end":273698,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273700,"byte_end":273791,"line_start":343,"line_end":343,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273793,"byte_end":273796,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273798,"byte_end":273819,"line_start":345,"line_end":345,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273821,"byte_end":273824,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273826,"byte_end":273897,"line_start":347,"line_end":347,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273899,"byte_end":273971,"line_start":348,"line_end":348,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":273973,"byte_end":274046,"line_start":349,"line_end":349,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274048,"byte_end":274055,"line_start":350,"line_end":350,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274057,"byte_end":274060,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274062,"byte_end":274076,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274078,"byte_end":274081,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274083,"byte_end":274094,"line_start":354,"line_end":354,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274096,"byte_end":274123,"line_start":355,"line_end":355,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274125,"byte_end":274128,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274130,"byte_end":274158,"line_start":357,"line_end":357,"column_start":2,"column_end":30}},{"value":"/ if let Some(mut last) = bits.last_mut() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274160,"byte_end":274205,"line_start":358,"line_end":358,"column_start":2,"column_end":47}},{"value":"/   *last = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274207,"byte_end":274226,"line_start":359,"line_end":359,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274228,"byte_end":274233,"line_start":360,"line_end":360,"column_start":2,"column_end":7}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274235,"byte_end":274256,"line_start":361,"line_end":361,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274258,"byte_end":274265,"line_start":362,"line_end":362,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274267,"byte_end":274276,"line_start":363,"line_end":363,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275181,"byte_end":275184,"line_start":396,"line_end":396,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to an element or subslice depending on the type of\n index.","sig":null,"attributes":[{"value":"/ Returns a reference to an element or subslice depending on the type of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274435,"byte_end":274509,"line_start":371,"line_end":371,"column_start":2,"column_end":76}},{"value":"/ index.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274511,"byte_end":274521,"line_start":372,"line_end":372,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274523,"byte_end":274526,"line_start":373,"line_end":373,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the element at that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274528,"byte_end":274597,"line_start":374,"line_end":374,"column_start":2,"column_end":71}},{"value":"/   position or `None` if out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274599,"byte_end":274641,"line_start":375,"line_end":375,"column_start":2,"column_end":44}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274643,"byte_end":274719,"line_start":376,"line_end":376,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274721,"byte_end":274751,"line_start":377,"line_end":377,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274753,"byte_end":274756,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274758,"byte_end":274772,"line_start":379,"line_end":379,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274774,"byte_end":274777,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/std/primitive.slice.html#method.get)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274779,"byte_end":274860,"line_start":381,"line_end":381,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274862,"byte_end":274865,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274867,"byte_end":274881,"line_start":383,"line_end":383,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274883,"byte_end":274886,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274888,"byte_end":274899,"line_start":385,"line_end":385,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274901,"byte_end":274928,"line_start":386,"line_end":386,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274930,"byte_end":274933,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274935,"byte_end":274968,"line_start":388,"line_end":388,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274970,"byte_end":274973,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits.get(1));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":274975,"byte_end":275016,"line_start":390,"line_end":390,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(Some(&bits[1 .. 3]), bits.get(1 .. 3));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275018,"byte_end":275072,"line_start":391,"line_end":391,"column_start":2,"column_end":56}},{"value":"/ assert!(bits.get(9).is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275074,"byte_end":275109,"line_start":392,"line_end":392,"column_start":2,"column_end":37}},{"value":"/ assert!(bits.get(8 .. 10).is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275111,"byte_end":275152,"line_start":393,"line_end":393,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275154,"byte_end":275161,"line_start":394,"line_end":394,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275163,"byte_end":275172,"line_start":395,"line_end":395,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275947,"byte_end":275954,"line_start":425,"line_end":425,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to an element or subslice depending on the\n type of index (see [`get`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to an element or subslice depending on the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275291,"byte_end":275365,"line_start":401,"line_end":401,"column_start":2,"column_end":76}},{"value":"/ type of index (see [`get`]) or `None` if the index is out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275367,"byte_end":275439,"line_start":402,"line_end":402,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275441,"byte_end":275444,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275446,"byte_end":275460,"line_start":404,"line_end":404,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275462,"byte_end":275465,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275467,"byte_end":275564,"line_start":406,"line_end":406,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275566,"byte_end":275569,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275571,"byte_end":275592,"line_start":408,"line_end":408,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275594,"byte_end":275597,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ When `I` is `usize`, this returns `BitMut` instead of `&mut bool`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275599,"byte_end":275669,"line_start":410,"line_end":410,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275671,"byte_end":275674,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275676,"byte_end":275690,"line_start":412,"line_end":412,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275692,"byte_end":275695,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275697,"byte_end":275708,"line_start":414,"line_end":414,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275710,"byte_end":275737,"line_start":415,"line_end":415,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275739,"byte_end":275742,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275744,"byte_end":275775,"line_start":417,"line_end":417,"column_start":2,"column_end":33}},{"value":"/ assert!(!bits.get(1).unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275777,"byte_end":275812,"line_start":418,"line_end":418,"column_start":2,"column_end":37}},{"value":"/ *bits.get_mut(1).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275814,"byte_end":275851,"line_start":419,"line_end":419,"column_start":2,"column_end":39}},{"value":"/ assert!(bits.get(1).unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275853,"byte_end":275887,"line_start":420,"line_end":420,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275889,"byte_end":275896,"line_start":421,"line_end":421,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275898,"byte_end":275901,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ [`get`]: #method.get","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275903,"byte_end":275927,"line_start":423,"line_end":423,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":275929,"byte_end":275938,"line_start":424,"line_end":424,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277113,"byte_end":277126,"line_start":461,"line_end":461,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to an element or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a reference to an element or subslice, without doing bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276067,"byte_end":276138,"line_start":430,"line_end":430,"column_start":2,"column_end":73}},{"value":"/ checking.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276140,"byte_end":276153,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276155,"byte_end":276158,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution!","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276160,"byte_end":276216,"line_start":433,"line_end":433,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276218,"byte_end":276221,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ Unlike the original slice function, calling this with an out-of-bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276223,"byte_end":276297,"line_start":435,"line_end":435,"column_start":2,"column_end":76}},{"value":"/ index is not *technically* compile-time [undefined behavior], as the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276299,"byte_end":276371,"line_start":436,"line_end":436,"column_start":2,"column_end":74}},{"value":"/ references produced do not actually describe local memory. However, the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276373,"byte_end":276448,"line_start":437,"line_end":437,"column_start":2,"column_end":77}},{"value":"/ use of an out-of-bounds index will eventually cause an out-of-bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276450,"byte_end":276522,"line_start":438,"line_end":438,"column_start":2,"column_end":74}},{"value":"/ memory read, which is a runtime safety violation. For a safe alternative","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276524,"byte_end":276600,"line_start":439,"line_end":439,"column_start":2,"column_end":78}},{"value":"/ see [`get`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276602,"byte_end":276618,"line_start":440,"line_end":440,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276620,"byte_end":276623,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276625,"byte_end":276639,"line_start":442,"line_end":442,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276641,"byte_end":276644,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276646,"byte_end":276747,"line_start":444,"line_end":444,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276749,"byte_end":276752,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276754,"byte_end":276768,"line_start":446,"line_end":446,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276770,"byte_end":276773,"line_start":447,"line_end":447,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276775,"byte_end":276786,"line_start":448,"line_end":448,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276788,"byte_end":276815,"line_start":449,"line_end":449,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276817,"byte_end":276820,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276822,"byte_end":276849,"line_start":451,"line_end":451,"column_start":2,"column_end":29}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276851,"byte_end":276863,"line_start":452,"line_end":452,"column_start":2,"column_end":14}},{"value":"/   assert!(*bits.get_unchecked(1));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276865,"byte_end":276903,"line_start":453,"line_end":453,"column_start":2,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276905,"byte_end":276910,"line_start":454,"line_end":454,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276912,"byte_end":276919,"line_start":455,"line_end":455,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276921,"byte_end":276924,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`get`]: #method.get","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276926,"byte_end":276950,"line_start":457,"line_end":457,"column_start":2,"column_end":26}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":276952,"byte_end":277048,"line_start":458,"line_end":458,"column_start":2,"column_end":98}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277050,"byte_end":277059,"line_start":459,"line_end":459,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277061,"byte_end":277097,"line_start":460,"line_end":460,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278350,"byte_end":278367,"line_start":499,"line_end":499,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277235,"byte_end":277306,"line_start":466,"line_end":466,"column_start":2,"column_end":73}},{"value":"/ doing bounds checking.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277308,"byte_end":277334,"line_start":467,"line_end":467,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277336,"byte_end":277339,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution!","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277341,"byte_end":277397,"line_start":469,"line_end":469,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277399,"byte_end":277402,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ Unlike the original slice function, calling this with an out-of-bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277404,"byte_end":277478,"line_start":471,"line_end":471,"column_start":2,"column_end":76}},{"value":"/ index is not *technically* compile-time [undefined behavior], as the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277480,"byte_end":277552,"line_start":472,"line_end":472,"column_start":2,"column_end":74}},{"value":"/ references produced do not actually describe local memory. However, the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277554,"byte_end":277629,"line_start":473,"line_end":473,"column_start":2,"column_end":77}},{"value":"/ use of an out-of-bounds index will eventually cause an out-of-bounds","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277631,"byte_end":277703,"line_start":474,"line_end":474,"column_start":2,"column_end":74}},{"value":"/ memory write, which is a runtime safety violation. For a safe","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277705,"byte_end":277770,"line_start":475,"line_end":475,"column_start":2,"column_end":67}},{"value":"/ alternative see [`get_mut`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277772,"byte_end":277804,"line_start":476,"line_end":476,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277806,"byte_end":277809,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277811,"byte_end":277825,"line_start":478,"line_end":478,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277827,"byte_end":277830,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277832,"byte_end":277941,"line_start":480,"line_end":480,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277943,"byte_end":277946,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277948,"byte_end":277962,"line_start":482,"line_end":482,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277964,"byte_end":277967,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277969,"byte_end":277980,"line_start":484,"line_end":484,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":277982,"byte_end":278009,"line_start":485,"line_end":485,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278011,"byte_end":278014,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278016,"byte_end":278047,"line_start":487,"line_end":487,"column_start":2,"column_end":33}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278049,"byte_end":278061,"line_start":488,"line_end":488,"column_start":2,"column_end":14}},{"value":"/   let mut bit = bits.get_unchecked_mut(1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278063,"byte_end":278109,"line_start":489,"line_end":489,"column_start":2,"column_end":48}},{"value":"/   *bit = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278111,"byte_end":278129,"line_start":490,"line_end":490,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278131,"byte_end":278136,"line_start":491,"line_end":491,"column_start":2,"column_end":7}},{"value":"/ assert!(bits[1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278138,"byte_end":278159,"line_start":492,"line_end":492,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278161,"byte_end":278168,"line_start":493,"line_end":493,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278170,"byte_end":278173,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278175,"byte_end":278207,"line_start":495,"line_end":495,"column_start":2,"column_end":34}},{"value":"/ [undefined behavior]: ../../reference/behavior-considered-undefined.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278209,"byte_end":278285,"line_start":496,"line_end":496,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278287,"byte_end":278296,"line_start":497,"line_end":497,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278298,"byte_end":278334,"line_start":498,"line_end":498,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280306,"byte_end":280312,"line_start":556,"line_end":556,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-slice pointer to the region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-slice pointer to the region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278482,"byte_end":278532,"line_start":504,"line_end":504,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278534,"byte_end":278537,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the slice outlives the pointer this function","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278539,"byte_end":278615,"line_start":506,"line_end":506,"column_start":2,"column_end":78}},{"value":"/ returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278617,"byte_end":278673,"line_start":507,"line_end":507,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278675,"byte_end":278678,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278680,"byte_end":278739,"line_start":509,"line_end":509,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is only written to if `T` allows shared","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278741,"byte_end":278813,"line_start":510,"line_end":510,"column_start":2,"column_end":74}},{"value":"/ mutation, using this pointer or any pointer derived from it. If you need","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278815,"byte_end":278891,"line_start":511,"line_end":511,"column_start":2,"column_end":78}},{"value":"/ to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278893,"byte_end":278953,"line_start":512,"line_end":512,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278955,"byte_end":278958,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ Modifying the container (such as `BitVec`) referenced by this slice may","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":278960,"byte_end":279035,"line_start":514,"line_end":514,"column_start":2,"column_end":77}},{"value":"/ cause its buffer to be reällocated, which would also make any pointers","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279037,"byte_end":279112,"line_start":515,"line_end":515,"column_start":2,"column_end":76}},{"value":"/ to it invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279114,"byte_end":279132,"line_start":516,"line_end":516,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279134,"byte_end":279137,"line_start":517,"line_end":517,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279139,"byte_end":279153,"line_start":518,"line_end":518,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279155,"byte_end":279158,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279160,"byte_end":279247,"line_start":520,"line_end":520,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279249,"byte_end":279252,"line_start":521,"line_end":521,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279254,"byte_end":279275,"line_start":522,"line_end":522,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279277,"byte_end":279280,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ This returns `*const BitSlice`, which is the equivalent of `*const [T]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279282,"byte_end":279357,"line_start":524,"line_end":524,"column_start":2,"column_end":77}},{"value":"/ instead of `*const T`. The pointer encoding used requires more than one","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279359,"byte_end":279434,"line_start":525,"line_end":525,"column_start":2,"column_end":77}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279436,"byte_end":279510,"line_start":526,"line_end":526,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279512,"byte_end":279579,"line_start":527,"line_end":527,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279581,"byte_end":279584,"line_start":528,"line_end":528,"column_start":2,"column_end":5}},{"value":"/ # Notes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279586,"byte_end":279597,"line_start":529,"line_end":529,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279599,"byte_end":279602,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ You **cannot** use any of the methods in the `pointer` fundamental type","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279604,"byte_end":279679,"line_start":531,"line_end":531,"column_start":2,"column_end":77}},{"value":"/ or the `core::ptr` module on the `*_ BitSlice` type. This pointer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279681,"byte_end":279750,"line_start":532,"line_end":532,"column_start":2,"column_end":71}},{"value":"/ retains the `bitvec`-specific value encoding, and is incomprehensible by","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279752,"byte_end":279828,"line_start":533,"line_end":533,"column_start":2,"column_end":78}},{"value":"/ the Rust standard library.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279830,"byte_end":279860,"line_start":534,"line_end":534,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279862,"byte_end":279865,"line_start":535,"line_end":535,"column_start":2,"column_end":5}},{"value":"/ The only thing you can do with this pointer is dereference it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279867,"byte_end":279933,"line_start":536,"line_end":536,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279935,"byte_end":279938,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279940,"byte_end":279954,"line_start":538,"line_end":538,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279956,"byte_end":279959,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279961,"byte_end":279972,"line_start":540,"line_end":540,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":279974,"byte_end":280001,"line_start":541,"line_end":541,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280003,"byte_end":280006,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280008,"byte_end":280041,"line_start":543,"line_end":543,"column_start":2,"column_end":35}},{"value":"/ let bits_ptr = bits.as_ptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280043,"byte_end":280076,"line_start":544,"line_end":544,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280078,"byte_end":280081,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280083,"byte_end":280113,"line_start":546,"line_end":546,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(bits[i], unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280115,"byte_end":280149,"line_start":547,"line_end":547,"column_start":2,"column_end":36}},{"value":"/     (&*bits_ptr)[i]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280151,"byte_end":280174,"line_start":548,"line_end":548,"column_start":2,"column_end":25}},{"value":"/   });","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280176,"byte_end":280185,"line_start":549,"line_end":549,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280187,"byte_end":280192,"line_start":550,"line_end":550,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280194,"byte_end":280201,"line_start":551,"line_end":551,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280203,"byte_end":280206,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_ptr`]: #method.as_mut_ptr","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280208,"byte_end":280246,"line_start":553,"line_end":553,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280248,"byte_end":280265,"line_start":554,"line_end":554,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280267,"byte_end":280297,"line_start":555,"line_end":555,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281847,"byte_end":281857,"line_start":602,"line_end":602,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-slice pointer to the region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-slice pointer to the region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280364,"byte_end":280426,"line_start":560,"line_end":560,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280428,"byte_end":280431,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the slice outlives the pointer this function","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280433,"byte_end":280509,"line_start":562,"line_end":562,"column_start":2,"column_end":78}},{"value":"/ returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280511,"byte_end":280567,"line_start":563,"line_end":563,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280569,"byte_end":280572,"line_start":564,"line_end":564,"column_start":2,"column_end":5}},{"value":"/ Modifying the container (such as `BitVec`) referenced by this slice may","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280574,"byte_end":280649,"line_start":565,"line_end":565,"column_start":2,"column_end":77}},{"value":"/ cause its buffer to be reällocated, which would also make any pointers","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280651,"byte_end":280726,"line_start":566,"line_end":566,"column_start":2,"column_end":76}},{"value":"/ to it invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280728,"byte_end":280746,"line_start":567,"line_end":567,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280748,"byte_end":280751,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280753,"byte_end":280767,"line_start":569,"line_end":569,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280769,"byte_end":280772,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280774,"byte_end":280869,"line_start":571,"line_end":571,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280871,"byte_end":280874,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280876,"byte_end":280897,"line_start":573,"line_end":573,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280899,"byte_end":280902,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalont of `*mut [T]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280904,"byte_end":280975,"line_start":575,"line_end":575,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":280977,"byte_end":281050,"line_start":576,"line_end":576,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281052,"byte_end":281126,"line_start":577,"line_end":577,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281128,"byte_end":281195,"line_start":578,"line_end":578,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281197,"byte_end":281200,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ # Notes","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281202,"byte_end":281213,"line_start":580,"line_end":580,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281215,"byte_end":281218,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ You **cannot** use any of the methods in the `pointer` fundamental type","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281220,"byte_end":281295,"line_start":582,"line_end":582,"column_start":2,"column_end":77}},{"value":"/ or the `core::ptr` module on the `*_ BitSlice` type. This pointer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281297,"byte_end":281366,"line_start":583,"line_end":583,"column_start":2,"column_end":71}},{"value":"/ retains the `bitvec`-specific value encoding, and is incomprehensible by","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281368,"byte_end":281444,"line_start":584,"line_end":584,"column_start":2,"column_end":78}},{"value":"/ the Rust standard library.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281446,"byte_end":281476,"line_start":585,"line_end":585,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281478,"byte_end":281481,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281483,"byte_end":281497,"line_start":587,"line_end":587,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281499,"byte_end":281502,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281504,"byte_end":281515,"line_start":589,"line_end":589,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281517,"byte_end":281544,"line_start":590,"line_end":590,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281546,"byte_end":281549,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281551,"byte_end":281592,"line_start":592,"line_end":592,"column_start":2,"column_end":43}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281594,"byte_end":281631,"line_start":593,"line_end":593,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281633,"byte_end":281636,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281638,"byte_end":281668,"line_start":595,"line_end":595,"column_start":2,"column_end":32}},{"value":"/   unsafe { &mut *bits_ptr }.set(i, i % 3 == 0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281670,"byte_end":281721,"line_start":596,"line_end":596,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281723,"byte_end":281728,"line_start":597,"line_end":597,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b0100_1001);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281730,"byte_end":281778,"line_start":598,"line_end":598,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281780,"byte_end":281787,"line_start":599,"line_end":599,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281789,"byte_end":281806,"line_start":600,"line_end":600,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281808,"byte_end":281838,"line_start":601,"line_end":601,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282420,"byte_end":282424,"line_start":631,"line_end":631,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281909,"byte_end":281941,"line_start":606,"line_end":606,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281943,"byte_end":281946,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281948,"byte_end":281962,"line_start":608,"line_end":608,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281964,"byte_end":281967,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":281969,"byte_end":282052,"line_start":610,"line_end":610,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282054,"byte_end":282057,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282059,"byte_end":282074,"line_start":612,"line_end":612,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282076,"byte_end":282079,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282081,"byte_end":282118,"line_start":614,"line_end":614,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282120,"byte_end":282158,"line_start":615,"line_end":615,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282160,"byte_end":282163,"line_start":616,"line_end":616,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282165,"byte_end":282177,"line_start":617,"line_end":617,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282179,"byte_end":282182,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282184,"byte_end":282227,"line_start":619,"line_end":619,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282229,"byte_end":282232,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282234,"byte_end":282248,"line_start":621,"line_end":621,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282250,"byte_end":282253,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282255,"byte_end":282266,"line_start":623,"line_end":623,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282268,"byte_end":282295,"line_start":624,"line_end":624,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282297,"byte_end":282300,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282302,"byte_end":282333,"line_start":626,"line_end":626,"column_start":2,"column_end":33}},{"value":"/ bits.swap(0, 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282335,"byte_end":282355,"line_start":627,"line_end":627,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(bits, bits![1, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282357,"byte_end":282391,"line_start":628,"line_end":628,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282393,"byte_end":282400,"line_start":629,"line_end":629,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282402,"byte_end":282411,"line_start":630,"line_end":630,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":283065,"byte_end":283072,"line_start":657,"line_end":657,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282648,"byte_end":282702,"line_start":640,"line_end":640,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282704,"byte_end":282707,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282709,"byte_end":282723,"line_start":642,"line_end":642,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282725,"byte_end":282728,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/std/primitive.slice.html#method.reverse)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282730,"byte_end":282819,"line_start":644,"line_end":644,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282821,"byte_end":282824,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282826,"byte_end":282840,"line_start":646,"line_end":646,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282842,"byte_end":282845,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282847,"byte_end":282858,"line_start":648,"line_end":648,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282860,"byte_end":282887,"line_start":649,"line_end":649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282889,"byte_end":282892,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b1_1001100u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282894,"byte_end":282927,"line_start":651,"line_end":651,"column_start":2,"column_end":35}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282929,"byte_end":282973,"line_start":652,"line_end":652,"column_start":2,"column_end":46}},{"value":"/ bits[1 ..].reverse();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":282975,"byte_end":283000,"line_start":653,"line_end":653,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(data, 0b1_0011001);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":283002,"byte_end":283036,"line_start":654,"line_end":654,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":283038,"byte_end":283045,"line_start":655,"line_end":655,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":283047,"byte_end":283056,"line_start":656,"line_end":656,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284680,"byte_end":284684,"line_start":709,"line_end":709,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284157,"byte_end":284196,"line_start":689,"line_end":689,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284198,"byte_end":284201,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284203,"byte_end":284217,"line_start":691,"line_end":691,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284219,"byte_end":284222,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/std/primitive.slice.html#method.iter)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284224,"byte_end":284307,"line_start":693,"line_end":693,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284309,"byte_end":284312,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284314,"byte_end":284328,"line_start":695,"line_end":695,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284330,"byte_end":284333,"line_start":696,"line_end":696,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284335,"byte_end":284346,"line_start":697,"line_end":697,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284348,"byte_end":284375,"line_start":698,"line_end":698,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284377,"byte_end":284380,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 0, 0, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284382,"byte_end":284427,"line_start":700,"line_end":700,"column_start":2,"column_end":47}},{"value":"/ let mut iterator = bits.iter();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284429,"byte_end":284464,"line_start":701,"line_end":701,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284466,"byte_end":284469,"line_start":702,"line_end":702,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next(), Some(&false));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284471,"byte_end":284517,"line_start":703,"line_end":703,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iterator.next(), Some(&true));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284519,"byte_end":284564,"line_start":704,"line_end":704,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iterator.nth(5), Some(&true));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284566,"byte_end":284611,"line_start":705,"line_end":705,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iterator.next(), None);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284613,"byte_end":284651,"line_start":706,"line_end":706,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284653,"byte_end":284660,"line_start":707,"line_end":707,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284662,"byte_end":284671,"line_start":708,"line_end":708,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285196,"byte_end":285204,"line_start":731,"line_end":731,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284732,"byte_end":284787,"line_start":713,"line_end":713,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284789,"byte_end":284792,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284794,"byte_end":284808,"line_start":715,"line_end":715,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284810,"byte_end":284813,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/std/primitive.slice.html#Method.iter_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284815,"byte_end":284906,"line_start":717,"line_end":717,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284908,"byte_end":284911,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284913,"byte_end":284927,"line_start":719,"line_end":719,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284929,"byte_end":284932,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284934,"byte_end":284945,"line_start":721,"line_end":721,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284947,"byte_end":284974,"line_start":722,"line_end":722,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284976,"byte_end":284979,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":284981,"byte_end":285022,"line_start":724,"line_end":724,"column_start":2,"column_end":43}},{"value":"/ for (idx, mut elem) in bits.iter_mut().enumerate() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285024,"byte_end":285080,"line_start":725,"line_end":725,"column_start":2,"column_end":58}},{"value":"/   *elem = idx % 3 == 0;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285082,"byte_end":285109,"line_start":726,"line_end":726,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285111,"byte_end":285116,"line_start":727,"line_end":727,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b100_100_10);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285118,"byte_end":285167,"line_start":728,"line_end":728,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285169,"byte_end":285176,"line_start":729,"line_end":729,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285178,"byte_end":285187,"line_start":730,"line_end":730,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286220,"byte_end":286227,"line_start":771,"line_end":771,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285259,"byte_end":285332,"line_start":735,"line_end":735,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285334,"byte_end":285404,"line_start":736,"line_end":736,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285406,"byte_end":285428,"line_start":737,"line_end":737,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285430,"byte_end":285433,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285435,"byte_end":285449,"line_start":739,"line_end":739,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285451,"byte_end":285454,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/std/primitive.slice.html#method.windows)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285456,"byte_end":285545,"line_start":741,"line_end":741,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285547,"byte_end":285550,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285552,"byte_end":285564,"line_start":743,"line_end":743,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285566,"byte_end":285569,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285571,"byte_end":285597,"line_start":745,"line_end":745,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285599,"byte_end":285602,"line_start":746,"line_end":746,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285604,"byte_end":285618,"line_start":747,"line_end":747,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285620,"byte_end":285623,"line_start":748,"line_end":748,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285625,"byte_end":285636,"line_start":749,"line_end":749,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285638,"byte_end":285665,"line_start":750,"line_end":750,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285667,"byte_end":285670,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 0, 0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285672,"byte_end":285717,"line_start":752,"line_end":752,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.windows(6);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285719,"byte_end":285754,"line_start":753,"line_end":753,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285756,"byte_end":285759,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 6]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285761,"byte_end":285811,"line_start":755,"line_end":755,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[1 .. 7]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285813,"byte_end":285865,"line_start":756,"line_end":756,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285867,"byte_end":285917,"line_start":757,"line_end":757,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285919,"byte_end":285954,"line_start":758,"line_end":758,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285956,"byte_end":285963,"line_start":759,"line_end":759,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285965,"byte_end":285968,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":285970,"byte_end":286010,"line_start":761,"line_end":761,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286012,"byte_end":286015,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286017,"byte_end":286028,"line_start":763,"line_end":763,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286030,"byte_end":286057,"line_start":764,"line_end":764,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286059,"byte_end":286062,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ let bits = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286064,"byte_end":286117,"line_start":766,"line_end":766,"column_start":2,"column_end":55}},{"value":"/ let mut iter = bits.windows(1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286119,"byte_end":286154,"line_start":767,"line_end":767,"column_start":2,"column_end":37}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286156,"byte_end":286191,"line_start":768,"line_end":768,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286193,"byte_end":286200,"line_start":769,"line_end":769,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286202,"byte_end":286211,"line_start":770,"line_end":770,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287485,"byte_end":287491,"line_start":812,"line_end":812,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286350,"byte_end":286420,"line_start":776,"line_end":776,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286422,"byte_end":286465,"line_start":777,"line_end":777,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286467,"byte_end":286470,"line_start":778,"line_end":778,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286472,"byte_end":286542,"line_start":779,"line_end":779,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286544,"byte_end":286620,"line_start":780,"line_end":780,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286622,"byte_end":286639,"line_start":781,"line_end":781,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286641,"byte_end":286644,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_exact`] for a variant of this iterator that returns chunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286646,"byte_end":286721,"line_start":783,"line_end":783,"column_start":2,"column_end":77}},{"value":"/ of always exactly `chunk_size` bits, and [`rchunks`] for the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286723,"byte_end":286792,"line_start":784,"line_end":784,"column_start":2,"column_end":71}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286794,"byte_end":286844,"line_start":785,"line_end":785,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286846,"byte_end":286849,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286851,"byte_end":286865,"line_start":787,"line_end":787,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286867,"byte_end":286870,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286872,"byte_end":286959,"line_start":789,"line_end":789,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286961,"byte_end":286964,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286966,"byte_end":286978,"line_start":791,"line_end":791,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286980,"byte_end":286983,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":286985,"byte_end":287017,"line_start":793,"line_end":793,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287019,"byte_end":287022,"line_start":794,"line_end":794,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287024,"byte_end":287038,"line_start":795,"line_end":795,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287040,"byte_end":287043,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287045,"byte_end":287056,"line_start":797,"line_end":797,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287058,"byte_end":287085,"line_start":798,"line_end":798,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287087,"byte_end":287090,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 1, 1, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287092,"byte_end":287137,"line_start":800,"line_end":800,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.chunks(3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287139,"byte_end":287173,"line_start":801,"line_end":801,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287175,"byte_end":287178,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287180,"byte_end":287230,"line_start":803,"line_end":803,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[3 .. 6]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287232,"byte_end":287284,"line_start":804,"line_end":804,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[6 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287286,"byte_end":287336,"line_start":805,"line_end":805,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287338,"byte_end":287373,"line_start":806,"line_end":806,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287375,"byte_end":287382,"line_start":807,"line_end":807,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287384,"byte_end":287387,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ [`chunks_exact`]: #method.chunks_exact","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287389,"byte_end":287431,"line_start":809,"line_end":809,"column_start":2,"column_end":44}},{"value":"/ [`rchunks`]: #method.rchunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287433,"byte_end":287465,"line_start":810,"line_end":810,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287467,"byte_end":287476,"line_start":811,"line_end":811,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288714,"byte_end":288724,"line_start":851,"line_end":851,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287629,"byte_end":287699,"line_start":817,"line_end":817,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287701,"byte_end":287744,"line_start":818,"line_end":818,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287746,"byte_end":287749,"line_start":819,"line_end":819,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287751,"byte_end":287826,"line_start":820,"line_end":820,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287828,"byte_end":287901,"line_start":821,"line_end":821,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287903,"byte_end":287927,"line_start":822,"line_end":822,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287929,"byte_end":287932,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_exact_mut`] for a variant of this iterator that returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":287934,"byte_end":288006,"line_start":824,"line_end":824,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`rchunks_mut`] for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288008,"byte_end":288083,"line_start":825,"line_end":825,"column_start":2,"column_end":77}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288085,"byte_end":288140,"line_start":826,"line_end":826,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288142,"byte_end":288145,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288147,"byte_end":288161,"line_start":828,"line_end":828,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288163,"byte_end":288166,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288168,"byte_end":288263,"line_start":830,"line_end":830,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288265,"byte_end":288268,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288270,"byte_end":288282,"line_start":832,"line_end":832,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288284,"byte_end":288287,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288289,"byte_end":288321,"line_start":834,"line_end":834,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288323,"byte_end":288326,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288328,"byte_end":288342,"line_start":836,"line_end":836,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288344,"byte_end":288347,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288349,"byte_end":288360,"line_start":838,"line_end":838,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288362,"byte_end":288389,"line_start":839,"line_end":839,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288391,"byte_end":288394,"line_start":840,"line_end":840,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288396,"byte_end":288437,"line_start":841,"line_end":841,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.chunks_mut(3).enumerate() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288439,"byte_end":288495,"line_start":842,"line_end":842,"column_start":2,"column_end":58}},{"value":"/   chunk.set(2 - idx, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288497,"byte_end":288528,"line_start":843,"line_end":843,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288530,"byte_end":288535,"line_start":844,"line_end":844,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b01_010_100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288537,"byte_end":288586,"line_start":845,"line_end":845,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288588,"byte_end":288595,"line_start":846,"line_end":846,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288597,"byte_end":288600,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ [`chunks_exact_mut`]: #method.chunks_exact_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288602,"byte_end":288652,"line_start":848,"line_end":848,"column_start":2,"column_end":52}},{"value":"/ [`rchunks_mut`]: #method.rchunks_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288654,"byte_end":288694,"line_start":849,"line_end":849,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288696,"byte_end":288705,"line_start":850,"line_end":850,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290241,"byte_end":290253,"line_start":896,"line_end":896,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288872,"byte_end":288942,"line_start":856,"line_end":856,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288944,"byte_end":288987,"line_start":857,"line_end":857,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288989,"byte_end":288992,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":288994,"byte_end":289064,"line_start":859,"line_end":859,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289066,"byte_end":289141,"line_start":860,"line_end":860,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the `remainder` function of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289143,"byte_end":289216,"line_start":861,"line_end":861,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289218,"byte_end":289235,"line_start":862,"line_end":862,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289237,"byte_end":289240,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289242,"byte_end":289314,"line_start":864,"line_end":864,"column_start":2,"column_end":74}},{"value":"/ optimize the resulting code better than in the case of [`chunks`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289316,"byte_end":289386,"line_start":865,"line_end":865,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289388,"byte_end":289391,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ See [`chunks`] for a variant of this iterator that also returns the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289393,"byte_end":289464,"line_start":867,"line_end":867,"column_start":2,"column_end":73}},{"value":"/ remainder as a smaller chunk, and [`rchunks_exact`] for the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289466,"byte_end":289534,"line_start":868,"line_end":868,"column_start":2,"column_end":70}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289536,"byte_end":289586,"line_start":869,"line_end":869,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289588,"byte_end":289591,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289593,"byte_end":289607,"line_start":871,"line_end":871,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289609,"byte_end":289612,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289614,"byte_end":289713,"line_start":873,"line_end":873,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289715,"byte_end":289718,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289720,"byte_end":289732,"line_start":875,"line_end":875,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289734,"byte_end":289737,"line_start":876,"line_end":876,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289739,"byte_end":289771,"line_start":877,"line_end":877,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289773,"byte_end":289776,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289778,"byte_end":289792,"line_start":879,"line_end":879,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289794,"byte_end":289797,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289799,"byte_end":289810,"line_start":881,"line_end":881,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289812,"byte_end":289839,"line_start":882,"line_end":882,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289841,"byte_end":289844,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0, 1, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289846,"byte_end":289891,"line_start":884,"line_end":884,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.chunks_exact(3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289893,"byte_end":289933,"line_start":885,"line_end":885,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289935,"byte_end":289938,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289940,"byte_end":289990,"line_start":887,"line_end":887,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[3 .. 6]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":289992,"byte_end":290044,"line_start":888,"line_end":888,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290046,"byte_end":290081,"line_start":889,"line_end":889,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), &bits[6 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290083,"byte_end":290129,"line_start":890,"line_end":890,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290131,"byte_end":290138,"line_start":891,"line_end":891,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290140,"byte_end":290143,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290145,"byte_end":290175,"line_start":893,"line_end":893,"column_start":2,"column_end":32}},{"value":"/ [`rchunks_exact`]: #method.rchunks_exact","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290177,"byte_end":290221,"line_start":894,"line_end":894,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290223,"byte_end":290232,"line_start":895,"line_end":895,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291739,"byte_end":291755,"line_start":939,"line_end":939,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290401,"byte_end":290471,"line_start":901,"line_end":901,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290473,"byte_end":290516,"line_start":902,"line_end":902,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290518,"byte_end":290521,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290523,"byte_end":290598,"line_start":904,"line_end":904,"column_start":2,"column_end":77}},{"value":"/ not divide the beginning length of the slice, then the last up to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290600,"byte_end":290669,"line_start":905,"line_end":905,"column_start":2,"column_end":71}},{"value":"/ `chunk_size-1` bits will be omitted and can be retrieved from the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290671,"byte_end":290740,"line_start":906,"line_end":906,"column_start":2,"column_end":71}},{"value":"/ `into_remainder` function of the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290742,"byte_end":290788,"line_start":907,"line_end":907,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290790,"byte_end":290793,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290795,"byte_end":290867,"line_start":909,"line_end":909,"column_start":2,"column_end":74}},{"value":"/ optimize the resulting code better than in the case of [`chunks_mut`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290869,"byte_end":290943,"line_start":910,"line_end":910,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290945,"byte_end":290948,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_mut`] for a variant of this iterator that also returns the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":290950,"byte_end":291025,"line_start":912,"line_end":912,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`rchunks_exact_mut`] for the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291027,"byte_end":291099,"line_start":913,"line_end":913,"column_start":2,"column_end":74}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291101,"byte_end":291151,"line_start":914,"line_end":914,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291153,"byte_end":291156,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291158,"byte_end":291172,"line_start":916,"line_end":916,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291174,"byte_end":291177,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291179,"byte_end":291286,"line_start":918,"line_end":918,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291288,"byte_end":291291,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291293,"byte_end":291305,"line_start":920,"line_end":920,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291307,"byte_end":291310,"line_start":921,"line_end":921,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291312,"byte_end":291344,"line_start":922,"line_end":922,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291346,"byte_end":291349,"line_start":923,"line_end":923,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291351,"byte_end":291365,"line_start":924,"line_end":924,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291367,"byte_end":291370,"line_start":925,"line_end":925,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291372,"byte_end":291383,"line_start":926,"line_end":926,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291385,"byte_end":291412,"line_start":927,"line_end":927,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291414,"byte_end":291417,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291419,"byte_end":291460,"line_start":929,"line_end":929,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.chunks_exact_mut(3).enumerate() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291462,"byte_end":291524,"line_start":930,"line_end":930,"column_start":2,"column_end":64}},{"value":"/   chunk.set(idx, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291526,"byte_end":291553,"line_start":931,"line_end":931,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291555,"byte_end":291560,"line_start":932,"line_end":932,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b00_010_001);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291562,"byte_end":291611,"line_start":933,"line_end":933,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291613,"byte_end":291620,"line_start":934,"line_end":934,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291622,"byte_end":291625,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291627,"byte_end":291665,"line_start":936,"line_end":936,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_exact_mut`]: #method.rchunks_exact_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291667,"byte_end":291719,"line_start":937,"line_end":937,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291721,"byte_end":291730,"line_start":938,"line_end":938,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293060,"byte_end":293067,"line_start":984,"line_end":984,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291922,"byte_end":291992,"line_start":948,"line_end":948,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":291994,"byte_end":292031,"line_start":949,"line_end":949,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292033,"byte_end":292036,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292038,"byte_end":292108,"line_start":951,"line_end":951,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292110,"byte_end":292186,"line_start":952,"line_end":952,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292188,"byte_end":292205,"line_start":953,"line_end":953,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292207,"byte_end":292210,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_exact`] for a variant of this iterator that returns chunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292212,"byte_end":292288,"line_start":955,"line_end":955,"column_start":2,"column_end":78}},{"value":"/ of always exactly `chunk_size` bits, and [`chunks`] for the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292290,"byte_end":292358,"line_start":956,"line_end":956,"column_start":2,"column_end":70}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292360,"byte_end":292416,"line_start":957,"line_end":957,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292418,"byte_end":292421,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292423,"byte_end":292437,"line_start":959,"line_end":959,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292439,"byte_end":292442,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292444,"byte_end":292533,"line_start":961,"line_end":961,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292535,"byte_end":292538,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292540,"byte_end":292552,"line_start":963,"line_end":963,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292554,"byte_end":292557,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292559,"byte_end":292591,"line_start":965,"line_end":965,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292593,"byte_end":292596,"line_start":966,"line_end":966,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292598,"byte_end":292612,"line_start":967,"line_end":967,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292614,"byte_end":292617,"line_start":968,"line_end":968,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292619,"byte_end":292630,"line_start":969,"line_end":969,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292632,"byte_end":292659,"line_start":970,"line_end":970,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292661,"byte_end":292664,"line_start":971,"line_end":971,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 0, 1, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292666,"byte_end":292711,"line_start":972,"line_end":972,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.rchunks(3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292713,"byte_end":292748,"line_start":973,"line_end":973,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292750,"byte_end":292753,"line_start":974,"line_end":974,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292755,"byte_end":292805,"line_start":975,"line_end":975,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 5]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292807,"byte_end":292859,"line_start":976,"line_end":976,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 2]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292861,"byte_end":292911,"line_start":977,"line_end":977,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292913,"byte_end":292948,"line_start":978,"line_end":978,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292950,"byte_end":292957,"line_start":979,"line_end":979,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292959,"byte_end":292962,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292964,"byte_end":292994,"line_start":981,"line_end":981,"column_start":2,"column_end":32}},{"value":"/ [`rchunks_exact`]: #method.rchunks_exact","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":292996,"byte_end":293040,"line_start":982,"line_end":982,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293042,"byte_end":293051,"line_start":983,"line_end":983,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294295,"byte_end":294306,"line_start":1023,"line_end":1023,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293207,"byte_end":293277,"line_start":989,"line_end":989,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293279,"byte_end":293316,"line_start":990,"line_end":990,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293318,"byte_end":293321,"line_start":991,"line_end":991,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293323,"byte_end":293398,"line_start":992,"line_end":992,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293400,"byte_end":293473,"line_start":993,"line_end":993,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293475,"byte_end":293499,"line_start":994,"line_end":994,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293501,"byte_end":293504,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_exact_mut`] for a variant of this iterator that returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293506,"byte_end":293579,"line_start":996,"line_end":996,"column_start":2,"column_end":75}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`chunks_mut`] for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293581,"byte_end":293655,"line_start":997,"line_end":997,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293657,"byte_end":293718,"line_start":998,"line_end":998,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293720,"byte_end":293723,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293725,"byte_end":293739,"line_start":1000,"line_end":1000,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293741,"byte_end":293744,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293746,"byte_end":293843,"line_start":1002,"line_end":1002,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293845,"byte_end":293848,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293850,"byte_end":293862,"line_start":1004,"line_end":1004,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293864,"byte_end":293867,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293869,"byte_end":293901,"line_start":1006,"line_end":1006,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293903,"byte_end":293906,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293908,"byte_end":293922,"line_start":1008,"line_end":1008,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293924,"byte_end":293927,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293929,"byte_end":293940,"line_start":1010,"line_end":1010,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293942,"byte_end":293969,"line_start":1011,"line_end":1011,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293971,"byte_end":293974,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":293976,"byte_end":294017,"line_start":1013,"line_end":1013,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.rchunks_mut(3).enumerate() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294019,"byte_end":294076,"line_start":1014,"line_end":1014,"column_start":2,"column_end":59}},{"value":"/   chunk.set(2 - idx, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294078,"byte_end":294109,"line_start":1015,"line_end":1015,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294111,"byte_end":294116,"line_start":1016,"line_end":1016,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b100_010_01);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294118,"byte_end":294167,"line_start":1017,"line_end":1017,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294169,"byte_end":294176,"line_start":1018,"line_end":1018,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294178,"byte_end":294181,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294183,"byte_end":294221,"line_start":1020,"line_end":1020,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_exact_mut`]: #method.rchunks_exact_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294223,"byte_end":294275,"line_start":1021,"line_end":1021,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294277,"byte_end":294286,"line_start":1022,"line_end":1022,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295870,"byte_end":295883,"line_start":1069,"line_end":1069,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294456,"byte_end":294526,"line_start":1028,"line_end":1028,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294528,"byte_end":294565,"line_start":1029,"line_end":1029,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294567,"byte_end":294570,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294572,"byte_end":294642,"line_start":1031,"line_end":1031,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294644,"byte_end":294719,"line_start":1032,"line_end":1032,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the `remainder` function of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294721,"byte_end":294794,"line_start":1033,"line_end":1033,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294796,"byte_end":294813,"line_start":1034,"line_end":1034,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294815,"byte_end":294818,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler can","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294820,"byte_end":294892,"line_start":1036,"line_end":1036,"column_start":2,"column_end":74}},{"value":"/ often optimize the resulting code better than in the case of [`chunks`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294894,"byte_end":294970,"line_start":1037,"line_end":1037,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294972,"byte_end":294975,"line_start":1038,"line_end":1038,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks`] for a variant of this iterator that also returns the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":294977,"byte_end":295049,"line_start":1039,"line_end":1039,"column_start":2,"column_end":74}},{"value":"/ remainder as a smaller chunk, and [`chunks_exact`] for the same iterator","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295051,"byte_end":295127,"line_start":1040,"line_end":1040,"column_start":2,"column_end":78}},{"value":"/ but starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295129,"byte_end":295176,"line_start":1041,"line_end":1041,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295178,"byte_end":295181,"line_start":1042,"line_end":1042,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295183,"byte_end":295197,"line_start":1043,"line_end":1043,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295199,"byte_end":295202,"line_start":1044,"line_end":1044,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295204,"byte_end":295305,"line_start":1045,"line_end":1045,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295307,"byte_end":295310,"line_start":1046,"line_end":1046,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295312,"byte_end":295324,"line_start":1047,"line_end":1047,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295326,"byte_end":295329,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295331,"byte_end":295363,"line_start":1049,"line_end":1049,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295365,"byte_end":295368,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295370,"byte_end":295384,"line_start":1051,"line_end":1051,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295386,"byte_end":295389,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295391,"byte_end":295402,"line_start":1053,"line_end":1053,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295404,"byte_end":295431,"line_start":1054,"line_end":1054,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295433,"byte_end":295436,"line_start":1055,"line_end":1055,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1, 1, 1, 0, 0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295438,"byte_end":295487,"line_start":1056,"line_end":1056,"column_start":2,"column_end":51}},{"value":"/ let mut iter = bits.rchunks_exact(3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295489,"byte_end":295530,"line_start":1057,"line_end":1057,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295532,"byte_end":295535,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295537,"byte_end":295587,"line_start":1059,"line_end":1059,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 5]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295589,"byte_end":295641,"line_start":1060,"line_end":1060,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295643,"byte_end":295678,"line_start":1061,"line_end":1061,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), &bits[.. 2]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295680,"byte_end":295726,"line_start":1062,"line_end":1062,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295728,"byte_end":295735,"line_start":1063,"line_end":1063,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295737,"byte_end":295740,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295742,"byte_end":295772,"line_start":1065,"line_end":1065,"column_start":2,"column_end":32}},{"value":"/ [`rchunks`]: #method.rchunks","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295774,"byte_end":295806,"line_start":1066,"line_end":1066,"column_start":2,"column_end":34}},{"value":"/ [`chunks_exact`]: #method.chunks_exact","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295808,"byte_end":295850,"line_start":1067,"line_end":1067,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":295852,"byte_end":295861,"line_start":1068,"line_end":1068,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297278,"byte_end":297295,"line_start":1110,"line_end":1110,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296033,"byte_end":296103,"line_start":1074,"line_end":1074,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296105,"byte_end":296142,"line_start":1075,"line_end":1075,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296144,"byte_end":296147,"line_start":1076,"line_end":1076,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296149,"byte_end":296224,"line_start":1077,"line_end":1077,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296226,"byte_end":296300,"line_start":1078,"line_end":1078,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the `into_remainder`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296302,"byte_end":296373,"line_start":1079,"line_end":1079,"column_start":2,"column_end":73}},{"value":"/ function of the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296375,"byte_end":296404,"line_start":1080,"line_end":1080,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296406,"byte_end":296409,"line_start":1081,"line_end":1081,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler can","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296411,"byte_end":296483,"line_start":1082,"line_end":1082,"column_start":2,"column_end":74}},{"value":"/ often optimize the resulting code better than in the case of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296485,"byte_end":296549,"line_start":1083,"line_end":1083,"column_start":2,"column_end":66}},{"value":"/ [`chunks_mut`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296551,"byte_end":296570,"line_start":1084,"line_end":1084,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296572,"byte_end":296575,"line_start":1085,"line_end":1085,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_mut`] for a variant of this iterator that also returns the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296577,"byte_end":296653,"line_start":1086,"line_end":1086,"column_start":2,"column_end":78}},{"value":"/ remainder as a smaller chunk, and [`chunks_exact_mut`] for the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296655,"byte_end":296726,"line_start":1087,"line_end":1087,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296728,"byte_end":296784,"line_start":1088,"line_end":1088,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296786,"byte_end":296789,"line_start":1089,"line_end":1089,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296791,"byte_end":296803,"line_start":1090,"line_end":1090,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296805,"byte_end":296808,"line_start":1091,"line_end":1091,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296810,"byte_end":296842,"line_start":1092,"line_end":1092,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296844,"byte_end":296847,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296849,"byte_end":296863,"line_start":1094,"line_end":1094,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296865,"byte_end":296868,"line_start":1095,"line_end":1095,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296870,"byte_end":296881,"line_start":1096,"line_end":1096,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296883,"byte_end":296910,"line_start":1097,"line_end":1097,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296912,"byte_end":296915,"line_start":1098,"line_end":1098,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296917,"byte_end":296958,"line_start":1099,"line_end":1099,"column_start":2,"column_end":43}},{"value":"/ for (idx, chunk) in bits.rchunks_exact_mut(3).enumerate() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":296960,"byte_end":297023,"line_start":1100,"line_end":1100,"column_start":2,"column_end":65}},{"value":"/   chunk.set(idx, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297025,"byte_end":297052,"line_start":1101,"line_end":1101,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297054,"byte_end":297059,"line_start":1102,"line_end":1102,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b001_010_00);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297061,"byte_end":297110,"line_start":1103,"line_end":1103,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297112,"byte_end":297119,"line_start":1104,"line_end":1104,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297121,"byte_end":297124,"line_start":1105,"line_end":1105,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297126,"byte_end":297164,"line_start":1106,"line_end":1106,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_mut`]: #method.rchunks_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297166,"byte_end":297206,"line_start":1107,"line_end":1107,"column_start":2,"column_end":42}},{"value":"/ [`chunks_exact_mut`]: #method.chunks_exact_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297208,"byte_end":297258,"line_start":1108,"line_end":1108,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297260,"byte_end":297269,"line_start":1109,"line_end":1109,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298773,"byte_end":298781,"line_start":1161,"line_end":1161,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297464,"byte_end":297507,"line_start":1119,"line_end":1119,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297509,"byte_end":297512,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297514,"byte_end":297589,"line_start":1121,"line_end":1121,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297591,"byte_end":297666,"line_start":1122,"line_end":1122,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297668,"byte_end":297707,"line_start":1123,"line_end":1123,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297709,"byte_end":297712,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297714,"byte_end":297728,"line_start":1125,"line_end":1125,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297730,"byte_end":297733,"line_start":1126,"line_end":1126,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297735,"byte_end":297826,"line_start":1127,"line_end":1127,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297828,"byte_end":297831,"line_start":1128,"line_end":1128,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297833,"byte_end":297845,"line_start":1129,"line_end":1129,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297847,"byte_end":297850,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297852,"byte_end":297878,"line_start":1131,"line_end":1131,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297880,"byte_end":297883,"line_start":1132,"line_end":1132,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297885,"byte_end":297899,"line_start":1133,"line_end":1133,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297901,"byte_end":297904,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297906,"byte_end":297982,"line_start":1135,"line_end":1135,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":297984,"byte_end":298059,"line_start":1136,"line_end":1136,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298061,"byte_end":298135,"line_start":1137,"line_end":1137,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298137,"byte_end":298210,"line_start":1138,"line_end":1138,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298212,"byte_end":298285,"line_start":1139,"line_end":1139,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298287,"byte_end":298290,"line_start":1140,"line_end":1140,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298292,"byte_end":298306,"line_start":1141,"line_end":1141,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298308,"byte_end":298311,"line_start":1142,"line_end":1142,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298313,"byte_end":298324,"line_start":1143,"line_end":1143,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298326,"byte_end":298353,"line_start":1144,"line_end":1144,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298355,"byte_end":298358,"line_start":1145,"line_end":1145,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0, 0, 0, 1, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298360,"byte_end":298405,"line_start":1146,"line_end":1146,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298407,"byte_end":298410,"line_start":1147,"line_end":1147,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298412,"byte_end":298453,"line_start":1148,"line_end":1148,"column_start":2,"column_end":43}},{"value":"/ assert!(left.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298455,"byte_end":298484,"line_start":1149,"line_end":1149,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(right, bits);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298486,"byte_end":298514,"line_start":1150,"line_end":1150,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298516,"byte_end":298519,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298521,"byte_end":298562,"line_start":1152,"line_end":1152,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(left, &bits[.. 2]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298564,"byte_end":298598,"line_start":1153,"line_end":1153,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(right, &bits[2 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298600,"byte_end":298635,"line_start":1154,"line_end":1154,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298637,"byte_end":298640,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(8);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298642,"byte_end":298683,"line_start":1156,"line_end":1156,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(left, bits);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298685,"byte_end":298712,"line_start":1157,"line_end":1157,"column_start":2,"column_end":29}},{"value":"/ assert!(right.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298714,"byte_end":298744,"line_start":1158,"line_end":1158,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298746,"byte_end":298753,"line_start":1159,"line_end":1159,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298755,"byte_end":298764,"line_start":1160,"line_end":1160,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301006,"byte_end":301018,"line_start":1221,"line_end":1221,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":298955,"byte_end":299006,"line_start":1167,"line_end":1167,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299008,"byte_end":299011,"line_start":1168,"line_end":1168,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299013,"byte_end":299088,"line_start":1169,"line_end":1169,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299090,"byte_end":299165,"line_start":1170,"line_end":1170,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299167,"byte_end":299206,"line_start":1171,"line_end":1171,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299208,"byte_end":299211,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299213,"byte_end":299227,"line_start":1173,"line_end":1173,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299229,"byte_end":299232,"line_start":1174,"line_end":1174,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/std/primitive.html#method.split_at_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299234,"byte_end":299327,"line_start":1175,"line_end":1175,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299329,"byte_end":299332,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299334,"byte_end":299355,"line_start":1177,"line_end":1177,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299357,"byte_end":299360,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ Because the partition point `mid` is permitted to occur in the interior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299362,"byte_end":299437,"line_start":1179,"line_end":1179,"column_start":2,"column_end":77}},{"value":"/ of a memory element `T`, this method is required to mark the returned","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299439,"byte_end":299512,"line_start":1180,"line_end":1180,"column_start":2,"column_end":75}},{"value":"/ slices as being to aliased memory. This marking ensures that writes to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299514,"byte_end":299588,"line_start":1181,"line_end":1181,"column_start":2,"column_end":76}},{"value":"/ the covered memory use the appropriate synchronization behavior of your","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299590,"byte_end":299665,"line_start":1182,"line_end":1182,"column_start":2,"column_end":77}},{"value":"/ build to avoid data races – by default, this makes all writes atomic; on","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299667,"byte_end":299745,"line_start":1183,"line_end":1183,"column_start":2,"column_end":78}},{"value":"/ builds with the `atomic` feature disabled, this uses `Cell`s and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299747,"byte_end":299815,"line_start":1184,"line_end":1184,"column_start":2,"column_end":70}},{"value":"/ forbids the produced subslices from leaving the current thread.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299817,"byte_end":299884,"line_start":1185,"line_end":1185,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299886,"byte_end":299889,"line_start":1186,"line_end":1186,"column_start":2,"column_end":5}},{"value":"/ See the [`BitStore`] documentation for more information.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299891,"byte_end":299951,"line_start":1187,"line_end":1187,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299953,"byte_end":299956,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299958,"byte_end":299970,"line_start":1189,"line_end":1189,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299972,"byte_end":299975,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":299977,"byte_end":300003,"line_start":1191,"line_end":1191,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300005,"byte_end":300008,"line_start":1192,"line_end":1192,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300010,"byte_end":300024,"line_start":1193,"line_end":1193,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300026,"byte_end":300029,"line_start":1194,"line_end":1194,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300031,"byte_end":300107,"line_start":1195,"line_end":1195,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300109,"byte_end":300184,"line_start":1196,"line_end":1196,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300186,"byte_end":300260,"line_start":1197,"line_end":1197,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300262,"byte_end":300335,"line_start":1198,"line_end":1198,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300337,"byte_end":300410,"line_start":1199,"line_end":1199,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300412,"byte_end":300415,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300417,"byte_end":300431,"line_start":1201,"line_end":1201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300433,"byte_end":300436,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300438,"byte_end":300449,"line_start":1203,"line_end":1203,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300451,"byte_end":300478,"line_start":1204,"line_end":1204,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300480,"byte_end":300483,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0; 8];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300485,"byte_end":300526,"line_start":1206,"line_end":1206,"column_start":2,"column_end":43}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300528,"byte_end":300581,"line_start":1207,"line_end":1207,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300583,"byte_end":300588,"line_start":1208,"line_end":1208,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = bits.split_at_mut(3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300590,"byte_end":300637,"line_start":1209,"line_end":1209,"column_start":2,"column_end":49}},{"value":"/   *left.get_mut(1).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300639,"byte_end":300678,"line_start":1210,"line_end":1210,"column_start":2,"column_end":41}},{"value":"/   *right.get_mut(2).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300680,"byte_end":300720,"line_start":1211,"line_end":1211,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300722,"byte_end":300727,"line_start":1212,"line_end":1212,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b010_00100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300729,"byte_end":300777,"line_start":1213,"line_end":1213,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300779,"byte_end":300786,"line_start":1214,"line_end":1214,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300788,"byte_end":300791,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: ../store/trait.BitStore.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300793,"byte_end":300839,"line_start":1216,"line_end":1216,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300841,"byte_end":300850,"line_start":1217,"line_end":1217,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":300964,"byte_end":300997,"line_start":1220,"line_end":1220,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303062,"byte_end":303067,"line_start":1288,"line_end":1288,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301251,"byte_end":301326,"line_start":1231,"line_end":1231,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301328,"byte_end":301382,"line_start":1232,"line_end":1232,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301384,"byte_end":301387,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301389,"byte_end":301403,"line_start":1234,"line_end":1234,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301405,"byte_end":301408,"line_start":1235,"line_end":1235,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/std/primitive.slice.html#method.split)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301410,"byte_end":301495,"line_start":1236,"line_end":1236,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301497,"byte_end":301500,"line_start":1237,"line_end":1237,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301502,"byte_end":301523,"line_start":1238,"line_end":1238,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301525,"byte_end":301528,"line_start":1239,"line_end":1239,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301530,"byte_end":301598,"line_start":1240,"line_end":1240,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301600,"byte_end":301674,"line_start":1241,"line_end":1241,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301676,"byte_end":301686,"line_start":1242,"line_end":1242,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301688,"byte_end":301691,"line_start":1243,"line_end":1243,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301693,"byte_end":301707,"line_start":1244,"line_end":1244,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301709,"byte_end":301712,"line_start":1245,"line_end":1245,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301714,"byte_end":301725,"line_start":1246,"line_end":1246,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301727,"byte_end":301754,"line_start":1247,"line_end":1247,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301756,"byte_end":301759,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301761,"byte_end":301806,"line_start":1249,"line_end":1249,"column_start":2,"column_end":47}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301808,"byte_end":301856,"line_start":1250,"line_end":1250,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301858,"byte_end":301861,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301863,"byte_end":301913,"line_start":1252,"line_end":1252,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 4]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301915,"byte_end":301967,"line_start":1253,"line_end":1253,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":301969,"byte_end":302019,"line_start":1254,"line_end":1254,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302021,"byte_end":302056,"line_start":1255,"line_end":1255,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302058,"byte_end":302065,"line_start":1256,"line_end":1256,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302067,"byte_end":302070,"line_start":1257,"line_end":1257,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302072,"byte_end":302142,"line_start":1258,"line_end":1258,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last element in the slice is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302144,"byte_end":302220,"line_start":1259,"line_end":1259,"column_start":2,"column_end":78}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302222,"byte_end":302297,"line_start":1260,"line_end":1260,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302299,"byte_end":302302,"line_start":1261,"line_end":1261,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302304,"byte_end":302315,"line_start":1262,"line_end":1262,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302317,"byte_end":302344,"line_start":1263,"line_end":1263,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302346,"byte_end":302349,"line_start":1264,"line_end":1264,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302351,"byte_end":302384,"line_start":1265,"line_end":1265,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302386,"byte_end":302434,"line_start":1266,"line_end":1266,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302436,"byte_end":302439,"line_start":1267,"line_end":1267,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302441,"byte_end":302491,"line_start":1268,"line_end":1268,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302493,"byte_end":302538,"line_start":1269,"line_end":1269,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302540,"byte_end":302575,"line_start":1270,"line_end":1270,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302577,"byte_end":302584,"line_start":1271,"line_end":1271,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302586,"byte_end":302589,"line_start":1272,"line_end":1272,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302591,"byte_end":302660,"line_start":1273,"line_end":1273,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302662,"byte_end":302687,"line_start":1274,"line_end":1274,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302689,"byte_end":302692,"line_start":1275,"line_end":1275,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302694,"byte_end":302705,"line_start":1276,"line_end":1276,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302707,"byte_end":302734,"line_start":1277,"line_end":1277,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302736,"byte_end":302739,"line_start":1278,"line_end":1278,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1, 0, 0, 0, 0,];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302741,"byte_end":302787,"line_start":1279,"line_end":1279,"column_start":2,"column_end":48}},{"value":"/ let mut iter = bits.split(|pos, bit| *bit);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302789,"byte_end":302836,"line_start":1280,"line_end":1280,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302838,"byte_end":302841,"line_start":1281,"line_end":1281,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[0 .. 2]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302843,"byte_end":302895,"line_start":1282,"line_end":1282,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302897,"byte_end":302942,"line_start":1283,"line_end":1283,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 .. 8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302944,"byte_end":302996,"line_start":1284,"line_end":1284,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":302998,"byte_end":303033,"line_start":1285,"line_end":1285,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303035,"byte_end":303042,"line_start":1286,"line_end":1286,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303044,"byte_end":303053,"line_start":1287,"line_end":1287,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303942,"byte_end":303951,"line_start":1318,"line_end":1318,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303175,"byte_end":303250,"line_start":1293,"line_end":1293,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303252,"byte_end":303314,"line_start":1294,"line_end":1294,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303316,"byte_end":303319,"line_start":1295,"line_end":1295,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303321,"byte_end":303335,"line_start":1296,"line_end":1296,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303337,"byte_end":303340,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303342,"byte_end":303435,"line_start":1298,"line_end":1298,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303437,"byte_end":303440,"line_start":1299,"line_end":1299,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303442,"byte_end":303463,"line_start":1300,"line_end":1300,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303465,"byte_end":303468,"line_start":1301,"line_end":1301,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303470,"byte_end":303538,"line_start":1302,"line_end":1302,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303540,"byte_end":303614,"line_start":1303,"line_end":1303,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303616,"byte_end":303626,"line_start":1304,"line_end":1304,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303628,"byte_end":303631,"line_start":1305,"line_end":1305,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303633,"byte_end":303647,"line_start":1306,"line_end":1306,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303649,"byte_end":303652,"line_start":1307,"line_end":1307,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303654,"byte_end":303665,"line_start":1308,"line_end":1308,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303667,"byte_end":303694,"line_start":1309,"line_end":1309,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303696,"byte_end":303699,"line_start":1310,"line_end":1310,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303701,"byte_end":303760,"line_start":1311,"line_end":1311,"column_start":2,"column_end":61}},{"value":"/ for group in bits.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303762,"byte_end":303813,"line_start":1312,"line_end":1312,"column_start":2,"column_end":53}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303815,"byte_end":303855,"line_start":1313,"line_end":1313,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303857,"byte_end":303862,"line_start":1314,"line_end":1314,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_100_11);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303864,"byte_end":303913,"line_start":1315,"line_end":1315,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303915,"byte_end":303922,"line_start":1316,"line_end":1316,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":303924,"byte_end":303933,"line_start":1317,"line_end":1317,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305501,"byte_end":305507,"line_start":1366,"line_end":1366,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304081,"byte_end":304156,"line_start":1323,"line_end":1323,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304158,"byte_end":304233,"line_start":1324,"line_end":1324,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304235,"byte_end":304273,"line_start":1325,"line_end":1325,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304275,"byte_end":304278,"line_start":1326,"line_end":1326,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304280,"byte_end":304294,"line_start":1327,"line_end":1327,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304296,"byte_end":304299,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304301,"byte_end":304388,"line_start":1329,"line_end":1329,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304390,"byte_end":304393,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304395,"byte_end":304416,"line_start":1331,"line_end":1331,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304418,"byte_end":304421,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304423,"byte_end":304491,"line_start":1333,"line_end":1333,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304493,"byte_end":304567,"line_start":1334,"line_end":1334,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304569,"byte_end":304579,"line_start":1335,"line_end":1335,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304581,"byte_end":304584,"line_start":1336,"line_end":1336,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304586,"byte_end":304600,"line_start":1337,"line_end":1337,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304602,"byte_end":304605,"line_start":1338,"line_end":1338,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304607,"byte_end":304618,"line_start":1339,"line_end":1339,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304620,"byte_end":304647,"line_start":1340,"line_end":1340,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304649,"byte_end":304652,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 0, 1, 0, 0, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304654,"byte_end":304713,"line_start":1342,"line_end":1342,"column_start":2,"column_end":61}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304715,"byte_end":304764,"line_start":1343,"line_end":1343,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304766,"byte_end":304769,"line_start":1344,"line_end":1344,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304771,"byte_end":304821,"line_start":1345,"line_end":1345,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304823,"byte_end":304873,"line_start":1346,"line_end":1346,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304875,"byte_end":304910,"line_start":1347,"line_end":1347,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304912,"byte_end":304919,"line_start":1348,"line_end":1348,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304921,"byte_end":304924,"line_start":1349,"line_end":1349,"column_start":2,"column_end":5}},{"value":"/ As with `split()`, if the first or last bit is matched, an empty slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":304926,"byte_end":305000,"line_start":1350,"line_end":1350,"column_start":2,"column_end":76}},{"value":"/ will be the first (or last) item returned by the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305002,"byte_end":305064,"line_start":1351,"line_end":1351,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305066,"byte_end":305069,"line_start":1352,"line_end":1352,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305071,"byte_end":305082,"line_start":1353,"line_end":1353,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305084,"byte_end":305111,"line_start":1354,"line_end":1354,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305113,"byte_end":305116,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305118,"byte_end":305177,"line_start":1356,"line_end":1356,"column_start":2,"column_end":61}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305179,"byte_end":305228,"line_start":1357,"line_end":1357,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305230,"byte_end":305233,"line_start":1358,"line_end":1358,"column_start":2,"column_end":5}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305235,"byte_end":305280,"line_start":1359,"line_end":1359,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 .. 7]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305282,"byte_end":305334,"line_start":1360,"line_end":1360,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[1 .. 3]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305336,"byte_end":305388,"line_start":1361,"line_end":1361,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305390,"byte_end":305435,"line_start":1362,"line_end":1362,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305437,"byte_end":305472,"line_start":1363,"line_end":1363,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305474,"byte_end":305481,"line_start":1364,"line_end":1364,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305483,"byte_end":305492,"line_start":1365,"line_end":1365,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306448,"byte_end":306458,"line_start":1397,"line_end":1397,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305617,"byte_end":305692,"line_start":1371,"line_end":1371,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305694,"byte_end":305765,"line_start":1372,"line_end":1372,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305767,"byte_end":305817,"line_start":1373,"line_end":1373,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305819,"byte_end":305822,"line_start":1374,"line_end":1374,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305824,"byte_end":305838,"line_start":1375,"line_end":1375,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305840,"byte_end":305843,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305845,"byte_end":305940,"line_start":1377,"line_end":1377,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305942,"byte_end":305945,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305947,"byte_end":305968,"line_start":1379,"line_end":1379,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305970,"byte_end":305973,"line_start":1380,"line_end":1380,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":305975,"byte_end":306043,"line_start":1381,"line_end":1381,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306045,"byte_end":306119,"line_start":1382,"line_end":1382,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306121,"byte_end":306131,"line_start":1383,"line_end":1383,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306133,"byte_end":306136,"line_start":1384,"line_end":1384,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306138,"byte_end":306152,"line_start":1385,"line_end":1385,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306154,"byte_end":306157,"line_start":1386,"line_end":1386,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306159,"byte_end":306170,"line_start":1387,"line_end":1387,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306172,"byte_end":306199,"line_start":1388,"line_end":1388,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306201,"byte_end":306204,"line_start":1389,"line_end":1389,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306206,"byte_end":306265,"line_start":1390,"line_end":1390,"column_start":2,"column_end":61}},{"value":"/ for group in bits.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306267,"byte_end":306319,"line_start":1391,"line_end":1391,"column_start":2,"column_end":54}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306321,"byte_end":306361,"line_start":1392,"line_end":1392,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306363,"byte_end":306368,"line_start":1393,"line_end":1393,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_100_11);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306370,"byte_end":306419,"line_start":1394,"line_end":1394,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306421,"byte_end":306428,"line_start":1395,"line_end":1395,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306430,"byte_end":306439,"line_start":1396,"line_end":1396,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307507,"byte_end":307513,"line_start":1435,"line_end":1435,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306590,"byte_end":306665,"line_start":1402,"line_end":1402,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306667,"byte_end":306743,"line_start":1403,"line_end":1403,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306745,"byte_end":306766,"line_start":1404,"line_end":1404,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306768,"byte_end":306771,"line_start":1405,"line_end":1405,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306773,"byte_end":306849,"line_start":1406,"line_end":1406,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306851,"byte_end":306854,"line_start":1407,"line_end":1407,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306856,"byte_end":306870,"line_start":1408,"line_end":1408,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306872,"byte_end":306875,"line_start":1409,"line_end":1409,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306877,"byte_end":306964,"line_start":1410,"line_end":1410,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306966,"byte_end":306969,"line_start":1411,"line_end":1411,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306971,"byte_end":306992,"line_start":1412,"line_end":1412,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306994,"byte_end":306997,"line_start":1413,"line_end":1413,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":306999,"byte_end":307067,"line_start":1414,"line_end":1414,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307069,"byte_end":307143,"line_start":1415,"line_end":1415,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307145,"byte_end":307155,"line_start":1416,"line_end":1416,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307157,"byte_end":307160,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307162,"byte_end":307176,"line_start":1418,"line_end":1418,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307178,"byte_end":307181,"line_start":1419,"line_end":1419,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307183,"byte_end":307194,"line_start":1420,"line_end":1420,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307196,"byte_end":307223,"line_start":1421,"line_end":1421,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307225,"byte_end":307228,"line_start":1422,"line_end":1422,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 0, 0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307230,"byte_end":307275,"line_start":1423,"line_end":1423,"column_start":2,"column_end":47}},{"value":"/ for group in bits.splitn(2, |pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307277,"byte_end":307336,"line_start":1424,"line_end":1424,"column_start":2,"column_end":61}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307338,"byte_end":307369,"line_start":1425,"line_end":1425,"column_start":2,"column_end":33}},{"value":"/   println!(\"{}\", group.len());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307371,"byte_end":307405,"line_start":1426,"line_end":1426,"column_start":2,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307407,"byte_end":307414,"line_start":1427,"line_end":1427,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307416,"byte_end":307421,"line_start":1428,"line_end":1428,"column_start":2,"column_end":7}},{"value":"/ //  2","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307423,"byte_end":307432,"line_start":1429,"line_end":1429,"column_start":2,"column_end":11}},{"value":"/ //  5","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307434,"byte_end":307443,"line_start":1430,"line_end":1430,"column_start":2,"column_end":11}},{"value":"/ # //  [10]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307445,"byte_end":307459,"line_start":1431,"line_end":1431,"column_start":2,"column_end":16}},{"value":"/ # //  [00101]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307461,"byte_end":307478,"line_start":1432,"line_end":1432,"column_start":2,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307480,"byte_end":307487,"line_start":1433,"line_end":1433,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307489,"byte_end":307498,"line_start":1434,"line_end":1434,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308533,"byte_end":308543,"line_start":1468,"line_end":1468,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched element is not\n contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307636,"byte_end":307711,"line_start":1440,"line_end":1440,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched element is not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307713,"byte_end":307783,"line_start":1441,"line_end":1441,"column_start":2,"column_end":72}},{"value":"/ contained in the subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307785,"byte_end":307816,"line_start":1442,"line_end":1442,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307818,"byte_end":307821,"line_start":1443,"line_end":1443,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307823,"byte_end":307899,"line_start":1444,"line_end":1444,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307901,"byte_end":307904,"line_start":1445,"line_end":1445,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307906,"byte_end":307920,"line_start":1446,"line_end":1446,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307922,"byte_end":307925,"line_start":1447,"line_end":1447,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":307927,"byte_end":308022,"line_start":1448,"line_end":1448,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308024,"byte_end":308027,"line_start":1449,"line_end":1449,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308029,"byte_end":308050,"line_start":1450,"line_end":1450,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308052,"byte_end":308055,"line_start":1451,"line_end":1451,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308057,"byte_end":308125,"line_start":1452,"line_end":1452,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308127,"byte_end":308201,"line_start":1453,"line_end":1453,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308203,"byte_end":308213,"line_start":1454,"line_end":1454,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308215,"byte_end":308218,"line_start":1455,"line_end":1455,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308220,"byte_end":308234,"line_start":1456,"line_end":1456,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308236,"byte_end":308239,"line_start":1457,"line_end":1457,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308241,"byte_end":308252,"line_start":1458,"line_end":1458,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308254,"byte_end":308281,"line_start":1459,"line_end":1459,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308283,"byte_end":308286,"line_start":1460,"line_end":1460,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308288,"byte_end":308347,"line_start":1461,"line_end":1461,"column_start":2,"column_end":61}},{"value":"/ for group in bits.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308349,"byte_end":308404,"line_start":1462,"line_end":1462,"column_start":2,"column_end":57}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308406,"byte_end":308446,"line_start":1463,"line_end":1463,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308448,"byte_end":308453,"line_start":1464,"line_end":1464,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_100_10);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308455,"byte_end":308504,"line_start":1465,"line_end":1465,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308506,"byte_end":308513,"line_start":1466,"line_end":1466,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308515,"byte_end":308524,"line_start":1467,"line_end":1467,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309680,"byte_end":309687,"line_start":1507,"line_end":1507,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`\n limited to returining at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308688,"byte_end":308762,"line_start":1473,"line_end":1473,"column_start":2,"column_end":76}},{"value":"/ limited to returining at most `n` items. This starts at the end of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308764,"byte_end":308838,"line_start":1474,"line_end":1474,"column_start":2,"column_end":76}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308840,"byte_end":308910,"line_start":1475,"line_end":1475,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308912,"byte_end":308926,"line_start":1476,"line_end":1476,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308928,"byte_end":308931,"line_start":1477,"line_end":1477,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":308933,"byte_end":309009,"line_start":1478,"line_end":1478,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309011,"byte_end":309014,"line_start":1479,"line_end":1479,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309016,"byte_end":309030,"line_start":1480,"line_end":1480,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309032,"byte_end":309035,"line_start":1481,"line_end":1481,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309037,"byte_end":309126,"line_start":1482,"line_end":1482,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309128,"byte_end":309131,"line_start":1483,"line_end":1483,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309133,"byte_end":309154,"line_start":1484,"line_end":1484,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309156,"byte_end":309159,"line_start":1485,"line_end":1485,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309161,"byte_end":309229,"line_start":1486,"line_end":1486,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309231,"byte_end":309305,"line_start":1487,"line_end":1487,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309307,"byte_end":309317,"line_start":1488,"line_end":1488,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309319,"byte_end":309322,"line_start":1489,"line_end":1489,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309324,"byte_end":309338,"line_start":1490,"line_end":1490,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309340,"byte_end":309343,"line_start":1491,"line_end":1491,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309345,"byte_end":309356,"line_start":1492,"line_end":1492,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309358,"byte_end":309385,"line_start":1493,"line_end":1493,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309387,"byte_end":309390,"line_start":1494,"line_end":1494,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![Msb0, u8; 1, 0, 1, 0, 0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309392,"byte_end":309447,"line_start":1495,"line_end":1495,"column_start":2,"column_end":57}},{"value":"/ for group in bits.rsplitn(2, |pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309449,"byte_end":309509,"line_start":1496,"line_end":1496,"column_start":2,"column_end":62}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309511,"byte_end":309542,"line_start":1497,"line_end":1497,"column_start":2,"column_end":33}},{"value":"/   println!(\"{}\", group.len());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309544,"byte_end":309578,"line_start":1498,"line_end":1498,"column_start":2,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309580,"byte_end":309587,"line_start":1499,"line_end":1499,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309589,"byte_end":309594,"line_start":1500,"line_end":1500,"column_start":2,"column_end":7}},{"value":"/ //  2","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309596,"byte_end":309605,"line_start":1501,"line_end":1501,"column_start":2,"column_end":11}},{"value":"/ //  5","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309607,"byte_end":309616,"line_start":1502,"line_end":1502,"column_start":2,"column_end":11}},{"value":"/ # //  [10]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309618,"byte_end":309632,"line_start":1503,"line_end":1503,"column_start":2,"column_end":16}},{"value":"/ # //  [00101]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309634,"byte_end":309651,"line_start":1504,"line_end":1504,"column_start":2,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309653,"byte_end":309660,"line_start":1505,"line_end":1505,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309662,"byte_end":309671,"line_start":1506,"line_end":1506,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310769,"byte_end":310780,"line_start":1541,"line_end":1541,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309812,"byte_end":309886,"line_start":1512,"line_end":1512,"column_start":2,"column_end":76}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309888,"byte_end":309961,"line_start":1513,"line_end":1513,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":309963,"byte_end":310033,"line_start":1514,"line_end":1514,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310035,"byte_end":310049,"line_start":1515,"line_end":1515,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310051,"byte_end":310054,"line_start":1516,"line_end":1516,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310056,"byte_end":310132,"line_start":1517,"line_end":1517,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310134,"byte_end":310137,"line_start":1518,"line_end":1518,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310139,"byte_end":310153,"line_start":1519,"line_end":1519,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310155,"byte_end":310158,"line_start":1520,"line_end":1520,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310160,"byte_end":310257,"line_start":1521,"line_end":1521,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310259,"byte_end":310262,"line_start":1522,"line_end":1522,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310264,"byte_end":310285,"line_start":1523,"line_end":1523,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310287,"byte_end":310290,"line_start":1524,"line_end":1524,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310292,"byte_end":310360,"line_start":1525,"line_end":1525,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310362,"byte_end":310436,"line_start":1526,"line_end":1526,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310438,"byte_end":310448,"line_start":1527,"line_end":1527,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310450,"byte_end":310453,"line_start":1528,"line_end":1528,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310455,"byte_end":310469,"line_start":1529,"line_end":1529,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310471,"byte_end":310474,"line_start":1530,"line_end":1530,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310476,"byte_end":310487,"line_start":1531,"line_end":1531,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310489,"byte_end":310516,"line_start":1532,"line_end":1532,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310518,"byte_end":310521,"line_start":1533,"line_end":1533,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Msb0, u8; 0, 0, 1, 0, 0, 0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310523,"byte_end":310582,"line_start":1534,"line_end":1534,"column_start":2,"column_end":61}},{"value":"/ for group in bits.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310584,"byte_end":310640,"line_start":1535,"line_end":1535,"column_start":2,"column_end":58}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310642,"byte_end":310682,"line_start":1536,"line_end":1536,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310684,"byte_end":310689,"line_start":1537,"line_end":1537,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b101_000_11);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310691,"byte_end":310740,"line_start":1538,"line_end":1538,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310742,"byte_end":310749,"line_start":1539,"line_end":1539,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310751,"byte_end":310760,"line_start":1540,"line_end":1540,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312076,"byte_end":312084,"line_start":1581,"line_end":1581,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":310927,"byte_end":311001,"line_start":1546,"line_end":1546,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311003,"byte_end":311012,"line_start":1547,"line_end":1547,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311014,"byte_end":311017,"line_start":1548,"line_end":1548,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311019,"byte_end":311033,"line_start":1549,"line_end":1549,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311035,"byte_end":311038,"line_start":1550,"line_end":1550,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/std/primitive.slice.html#method.contains)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311040,"byte_end":311131,"line_start":1551,"line_end":1551,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311133,"byte_end":311136,"line_start":1552,"line_end":1552,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311138,"byte_end":311159,"line_start":1553,"line_end":1553,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311161,"byte_end":311164,"line_start":1554,"line_end":1554,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311166,"byte_end":311232,"line_start":1555,"line_end":1555,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311234,"byte_end":311307,"line_start":1556,"line_end":1556,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311309,"byte_end":311383,"line_start":1557,"line_end":1557,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311385,"byte_end":311388,"line_start":1558,"line_end":1558,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311390,"byte_end":311460,"line_start":1559,"line_end":1559,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311462,"byte_end":311535,"line_start":1560,"line_end":1560,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311537,"byte_end":311550,"line_start":1561,"line_end":1561,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311552,"byte_end":311555,"line_start":1562,"line_end":1562,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311557,"byte_end":311571,"line_start":1563,"line_end":1563,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311573,"byte_end":311576,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311578,"byte_end":311589,"line_start":1565,"line_end":1565,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311591,"byte_end":311618,"line_start":1566,"line_end":1566,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311620,"byte_end":311623,"line_start":1567,"line_end":1567,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311625,"byte_end":311654,"line_start":1568,"line_end":1568,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311656,"byte_end":311700,"line_start":1569,"line_end":1569,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311702,"byte_end":311746,"line_start":1570,"line_end":1570,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311748,"byte_end":311798,"line_start":1571,"line_end":1571,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311800,"byte_end":311807,"line_start":1572,"line_end":1572,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311809,"byte_end":311812,"line_start":1573,"line_end":1573,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311814,"byte_end":311886,"line_start":1574,"line_end":1574,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311888,"byte_end":311964,"line_start":1575,"line_end":1575,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311966,"byte_end":311991,"line_start":1576,"line_end":1576,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311993,"byte_end":311996,"line_start":1577,"line_end":1577,"column_start":2,"column_end":5}},{"value":"/ [`any`]: #method.any","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":311998,"byte_end":312022,"line_start":1578,"line_end":1578,"column_start":2,"column_end":26}},{"value":"/ [`not_all`]: #method.not_all","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312024,"byte_end":312056,"line_start":1579,"line_end":1579,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312058,"byte_end":312067,"line_start":1580,"line_end":1580,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313132,"byte_end":313143,"line_start":1623,"line_end":1623,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312280,"byte_end":312336,"line_start":1593,"line_end":1593,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312338,"byte_end":312341,"line_start":1594,"line_end":1594,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312343,"byte_end":312357,"line_start":1595,"line_end":1595,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312359,"byte_end":312362,"line_start":1596,"line_end":1596,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312364,"byte_end":312461,"line_start":1597,"line_end":1597,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312463,"byte_end":312466,"line_start":1598,"line_end":1598,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312468,"byte_end":312482,"line_start":1599,"line_end":1599,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312484,"byte_end":312487,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312489,"byte_end":312500,"line_start":1601,"line_end":1601,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312502,"byte_end":312529,"line_start":1602,"line_end":1602,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312531,"byte_end":312534,"line_start":1603,"line_end":1603,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0100_1011u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312536,"byte_end":312565,"line_start":1604,"line_end":1604,"column_start":2,"column_end":31}},{"value":"/ let haystack = data.view_bits::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312567,"byte_end":312611,"line_start":1605,"line_end":1605,"column_start":2,"column_end":46}},{"value":"/ let needle = &data.view_bits::<Lsb0>()[2 .. 5];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312613,"byte_end":312664,"line_start":1606,"line_end":1606,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312666,"byte_end":312669,"line_start":1607,"line_end":1607,"column_start":2,"column_end":5}},{"value":"/ assert!(haystack.starts_with(&needle[.. 2]));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312671,"byte_end":312720,"line_start":1608,"line_end":1608,"column_start":2,"column_end":51}},{"value":"/ assert!(haystack.starts_with(needle));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312722,"byte_end":312764,"line_start":1609,"line_end":1609,"column_start":2,"column_end":44}},{"value":"/ assert!(!haystack.starts_with(&haystack[2 .. 4]));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312766,"byte_end":312820,"line_start":1610,"line_end":1610,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312822,"byte_end":312829,"line_start":1611,"line_end":1611,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312831,"byte_end":312834,"line_start":1612,"line_end":1612,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312836,"byte_end":312892,"line_start":1613,"line_end":1613,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312894,"byte_end":312897,"line_start":1614,"line_end":1614,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312899,"byte_end":312910,"line_start":1615,"line_end":1615,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312912,"byte_end":312939,"line_start":1616,"line_end":1616,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312941,"byte_end":312944,"line_start":1617,"line_end":1617,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":312946,"byte_end":313000,"line_start":1618,"line_end":1618,"column_start":2,"column_end":56}},{"value":"/ assert!(0u8.view_bits::<LocalBits>().starts_with(empty));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313002,"byte_end":313063,"line_start":1619,"line_end":1619,"column_start":2,"column_end":63}},{"value":"/ assert!(empty.starts_with(empty));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313065,"byte_end":313103,"line_start":1620,"line_end":1620,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313105,"byte_end":313112,"line_start":1621,"line_end":1621,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313114,"byte_end":313123,"line_start":1622,"line_end":1622,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314176,"byte_end":314185,"line_start":1662,"line_end":1662,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313338,"byte_end":313394,"line_start":1632,"line_end":1632,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313396,"byte_end":313399,"line_start":1633,"line_end":1633,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313401,"byte_end":313415,"line_start":1634,"line_end":1634,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313417,"byte_end":313420,"line_start":1635,"line_end":1635,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313422,"byte_end":313515,"line_start":1636,"line_end":1636,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313517,"byte_end":313520,"line_start":1637,"line_end":1637,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313522,"byte_end":313536,"line_start":1638,"line_end":1638,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313538,"byte_end":313541,"line_start":1639,"line_end":1639,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313543,"byte_end":313554,"line_start":1640,"line_end":1640,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313556,"byte_end":313583,"line_start":1641,"line_end":1641,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313585,"byte_end":313588,"line_start":1642,"line_end":1642,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0100_1011u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313590,"byte_end":313619,"line_start":1643,"line_end":1643,"column_start":2,"column_end":31}},{"value":"/ let haystack = data.view_bits::<Lsb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313621,"byte_end":313665,"line_start":1644,"line_end":1644,"column_start":2,"column_end":46}},{"value":"/ let needle = &data.view_bits::<Msb0>()[3 .. 6];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313667,"byte_end":313718,"line_start":1645,"line_end":1645,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313720,"byte_end":313723,"line_start":1646,"line_end":1646,"column_start":2,"column_end":5}},{"value":"/ assert!(haystack.ends_with(&needle[1 ..]));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313725,"byte_end":313772,"line_start":1647,"line_end":1647,"column_start":2,"column_end":49}},{"value":"/ assert!(haystack.ends_with(needle));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313774,"byte_end":313814,"line_start":1648,"line_end":1648,"column_start":2,"column_end":42}},{"value":"/ assert!(!haystack.ends_with(&haystack[2 .. 4]));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313816,"byte_end":313868,"line_start":1649,"line_end":1649,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313870,"byte_end":313877,"line_start":1650,"line_end":1650,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313879,"byte_end":313882,"line_start":1651,"line_end":1651,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313884,"byte_end":313940,"line_start":1652,"line_end":1652,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313942,"byte_end":313945,"line_start":1653,"line_end":1653,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313947,"byte_end":313958,"line_start":1654,"line_end":1654,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313960,"byte_end":313987,"line_start":1655,"line_end":1655,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313989,"byte_end":313992,"line_start":1656,"line_end":1656,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":313994,"byte_end":314048,"line_start":1657,"line_end":1657,"column_start":2,"column_end":56}},{"value":"/ assert!(0u8.view_bits::<LocalBits>().ends_with(empty));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314050,"byte_end":314109,"line_start":1658,"line_end":1658,"column_start":2,"column_end":61}},{"value":"/ assert!(empty.ends_with(empty));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314111,"byte_end":314147,"line_start":1659,"line_end":1659,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314149,"byte_end":314156,"line_start":1660,"line_end":1660,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314158,"byte_end":314167,"line_start":1661,"line_end":1661,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315509,"byte_end":315520,"line_start":1713,"line_end":1713,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the front.\n After calling `rotate_left`, the bit previously at index `by` will\n become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314406,"byte_end":314479,"line_start":1672,"line_end":1672,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the front.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314481,"byte_end":314557,"line_start":1673,"line_end":1673,"column_start":2,"column_end":78}},{"value":"/ After calling `rotate_left`, the bit previously at index `by` will","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314559,"byte_end":314629,"line_start":1674,"line_end":1674,"column_start":2,"column_end":72}},{"value":"/ become the first bit in the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314631,"byte_end":314669,"line_start":1675,"line_end":1675,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314671,"byte_end":314674,"line_start":1676,"line_end":1676,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314676,"byte_end":314690,"line_start":1677,"line_end":1677,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314692,"byte_end":314695,"line_start":1678,"line_end":1678,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/std/primitive.slice.html#rotate_left)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314697,"byte_end":314787,"line_start":1679,"line_end":1679,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314789,"byte_end":314792,"line_start":1680,"line_end":1680,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314794,"byte_end":314806,"line_start":1681,"line_end":1681,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314808,"byte_end":314811,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314813,"byte_end":314883,"line_start":1683,"line_end":1683,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a no-op","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314885,"byte_end":314956,"line_start":1684,"line_end":1684,"column_start":2,"column_end":73}},{"value":"/ rotation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314958,"byte_end":314971,"line_start":1685,"line_end":1685,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314973,"byte_end":314976,"line_start":1686,"line_end":1686,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314978,"byte_end":314994,"line_start":1687,"line_end":1687,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":314996,"byte_end":314999,"line_start":1688,"line_end":1688,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in `self.len()`) time.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315001,"byte_end":315041,"line_start":1689,"line_end":1689,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315043,"byte_end":315046,"line_start":1690,"line_end":1690,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315048,"byte_end":315062,"line_start":1691,"line_end":1691,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315064,"byte_end":315067,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315069,"byte_end":315080,"line_start":1693,"line_end":1693,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315082,"byte_end":315109,"line_start":1694,"line_end":1694,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315111,"byte_end":315114,"line_start":1695,"line_end":1695,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315116,"byte_end":315142,"line_start":1696,"line_end":1696,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315144,"byte_end":315188,"line_start":1697,"line_end":1697,"column_start":2,"column_end":46}},{"value":"/ bits.rotate_left(2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315190,"byte_end":315214,"line_start":1698,"line_end":1698,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(data, 0xC3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315216,"byte_end":315243,"line_start":1699,"line_end":1699,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315245,"byte_end":315252,"line_start":1700,"line_end":1700,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315254,"byte_end":315257,"line_start":1701,"line_end":1701,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315259,"byte_end":315283,"line_start":1702,"line_end":1702,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315285,"byte_end":315288,"line_start":1703,"line_end":1703,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315290,"byte_end":315301,"line_start":1704,"line_end":1704,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315303,"byte_end":315330,"line_start":1705,"line_end":1705,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315332,"byte_end":315335,"line_start":1706,"line_end":1706,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315337,"byte_end":315363,"line_start":1707,"line_end":1707,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315365,"byte_end":315409,"line_start":1708,"line_end":1708,"column_start":2,"column_end":46}},{"value":"/ bits[1 .. 5].rotate_left(1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315411,"byte_end":315443,"line_start":1709,"line_end":1709,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(data, 0b1_1101_000);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315445,"byte_end":315480,"line_start":1710,"line_end":1710,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315482,"byte_end":315489,"line_start":1711,"line_end":1711,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":315491,"byte_end":315500,"line_start":1712,"line_end":1712,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317859,"byte_end":317871,"line_start":1789,"line_end":1789,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `rotate_right`, the bit previously at index `self.len() -\n by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":316740,"byte_end":316816,"line_start":1748,"line_end":1748,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":316818,"byte_end":316891,"line_start":1749,"line_end":1749,"column_start":2,"column_end":75}},{"value":"/ After calling `rotate_right`, the bit previously at index `self.len() -","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":316893,"byte_end":316968,"line_start":1750,"line_end":1750,"column_start":2,"column_end":77}},{"value":"/ by` will become the first bit in the slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":316970,"byte_end":317017,"line_start":1751,"line_end":1751,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317019,"byte_end":317022,"line_start":1752,"line_end":1752,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317024,"byte_end":317038,"line_start":1753,"line_end":1753,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317040,"byte_end":317043,"line_start":1754,"line_end":1754,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/std/primitive.slice.html#rotate_right)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317045,"byte_end":317137,"line_start":1755,"line_end":1755,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317139,"byte_end":317142,"line_start":1756,"line_end":1756,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317144,"byte_end":317156,"line_start":1757,"line_end":1757,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317158,"byte_end":317161,"line_start":1758,"line_end":1758,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317163,"byte_end":317233,"line_start":1759,"line_end":1759,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a no-op","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317235,"byte_end":317306,"line_start":1760,"line_end":1760,"column_start":2,"column_end":73}},{"value":"/ rotation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317308,"byte_end":317321,"line_start":1761,"line_end":1761,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317323,"byte_end":317326,"line_start":1762,"line_end":1762,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317328,"byte_end":317344,"line_start":1763,"line_end":1763,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317346,"byte_end":317349,"line_start":1764,"line_end":1764,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in `self.len()`) time.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317351,"byte_end":317391,"line_start":1765,"line_end":1765,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317393,"byte_end":317396,"line_start":1766,"line_end":1766,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317398,"byte_end":317412,"line_start":1767,"line_end":1767,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317414,"byte_end":317417,"line_start":1768,"line_end":1768,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317419,"byte_end":317430,"line_start":1769,"line_end":1769,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317432,"byte_end":317459,"line_start":1770,"line_end":1770,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317461,"byte_end":317464,"line_start":1771,"line_end":1771,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317466,"byte_end":317492,"line_start":1772,"line_end":1772,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317494,"byte_end":317538,"line_start":1773,"line_end":1773,"column_start":2,"column_end":46}},{"value":"/ bits.rotate_right(2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317540,"byte_end":317565,"line_start":1774,"line_end":1774,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(data, 0x3C);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317567,"byte_end":317594,"line_start":1775,"line_end":1775,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317596,"byte_end":317603,"line_start":1776,"line_end":1776,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317605,"byte_end":317608,"line_start":1777,"line_end":1777,"column_start":2,"column_end":5}},{"value":"/ Rotate a subslice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317610,"byte_end":317632,"line_start":1778,"line_end":1778,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317634,"byte_end":317637,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317639,"byte_end":317650,"line_start":1780,"line_end":1780,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317652,"byte_end":317679,"line_start":1781,"line_end":1781,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317681,"byte_end":317684,"line_start":1782,"line_end":1782,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317686,"byte_end":317712,"line_start":1783,"line_end":1783,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317714,"byte_end":317758,"line_start":1784,"line_end":1784,"column_start":2,"column_end":46}},{"value":"/ bits[1 .. 5].rotate_right(1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317760,"byte_end":317793,"line_start":1785,"line_end":1785,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(data, 0b1_0111_000);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317795,"byte_end":317830,"line_start":1786,"line_end":1786,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317832,"byte_end":317839,"line_start":1787,"line_end":1787,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":317841,"byte_end":317850,"line_start":1788,"line_end":1788,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320999,"byte_end":321018,"line_start":1889,"line_end":1889,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318485,"byte_end":318528,"line_start":1813,"line_end":1813,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318530,"byte_end":318533,"line_start":1814,"line_end":1814,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318535,"byte_end":318586,"line_start":1815,"line_end":1815,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318588,"byte_end":318591,"line_start":1816,"line_end":1816,"column_start":2,"column_end":5}},{"value":"/ If you are attempting to write an integer value into a `BitSlice`, see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318593,"byte_end":318667,"line_start":1817,"line_end":1817,"column_start":2,"column_end":76}},{"value":"/ the [`BitField::store`] trait function.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318669,"byte_end":318712,"line_start":1818,"line_end":1818,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318714,"byte_end":318717,"line_start":1819,"line_end":1819,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318719,"byte_end":318739,"line_start":1820,"line_end":1820,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318741,"byte_end":318744,"line_start":1821,"line_end":1821,"column_start":2,"column_end":5}},{"value":"/ This method is by necessity a bit-by-bit individual walk across both","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318746,"byte_end":318818,"line_start":1822,"line_end":1822,"column_start":2,"column_end":74}},{"value":"/ slices. Benchmarks indicate that where the slices share type parameters,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318820,"byte_end":318896,"line_start":1823,"line_end":1823,"column_start":2,"column_end":78}},{"value":"/ this is very close in performance to an element-wise `memcpy`. You","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318898,"byte_end":318968,"line_start":1824,"line_end":1824,"column_start":2,"column_end":72}},{"value":"/ should use this method as the default transfer behavior, and only switch","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":318970,"byte_end":319046,"line_start":1825,"line_end":1825,"column_start":2,"column_end":78}},{"value":"/ to [`.copy_from_bitslice()`] where you know that your performance is an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319048,"byte_end":319123,"line_start":1826,"line_end":1826,"column_start":2,"column_end":77}},{"value":"/ issue *and* you can demonstrate that `.copy_from_bitslice()` is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319125,"byte_end":319192,"line_start":1827,"line_end":1827,"column_start":2,"column_end":69}},{"value":"/ meaningfully better.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319194,"byte_end":319218,"line_start":1828,"line_end":1828,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319220,"byte_end":319223,"line_start":1829,"line_end":1829,"column_start":2,"column_end":5}},{"value":"/ Where `self` and `src` are not of the same type parameters, crate","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319225,"byte_end":319294,"line_start":1830,"line_end":1830,"column_start":2,"column_end":71}},{"value":"/ benchmarks show a roughly halved runtime performance.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319296,"byte_end":319353,"line_start":1831,"line_end":1831,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319355,"byte_end":319358,"line_start":1832,"line_end":1832,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319360,"byte_end":319374,"line_start":1833,"line_end":1833,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319376,"byte_end":319379,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319381,"byte_end":319488,"line_start":1835,"line_end":1835,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319490,"byte_end":319493,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319495,"byte_end":319516,"line_start":1837,"line_end":1837,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319518,"byte_end":319521,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319523,"byte_end":319597,"line_start":1839,"line_end":1839,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319599,"byte_end":319609,"line_start":1840,"line_end":1840,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319611,"byte_end":319614,"line_start":1841,"line_end":1841,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319616,"byte_end":319628,"line_start":1842,"line_end":1842,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319630,"byte_end":319633,"line_start":1843,"line_end":1843,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319635,"byte_end":319705,"line_start":1844,"line_end":1844,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319707,"byte_end":319710,"line_start":1845,"line_end":1845,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319712,"byte_end":319726,"line_start":1846,"line_end":1846,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319728,"byte_end":319731,"line_start":1847,"line_end":1847,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319733,"byte_end":319780,"line_start":1848,"line_end":1848,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319782,"byte_end":319785,"line_start":1849,"line_end":1849,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319787,"byte_end":319798,"line_start":1850,"line_end":1850,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319800,"byte_end":319827,"line_start":1851,"line_end":1851,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319829,"byte_end":319832,"line_start":1852,"line_end":1852,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319834,"byte_end":319857,"line_start":1853,"line_end":1853,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319859,"byte_end":319903,"line_start":1854,"line_end":1854,"column_start":2,"column_end":46}},{"value":"/ let src = 0x0Fu16.view_bits::<Lsb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319905,"byte_end":319947,"line_start":1855,"line_end":1855,"column_start":2,"column_end":44}},{"value":"/ bits[.. 2].clone_from_bitslice(&src[2 .. 4]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":319949,"byte_end":319998,"line_start":1856,"line_end":1856,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(data, 0xC0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320000,"byte_end":320027,"line_start":1857,"line_end":1857,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320029,"byte_end":320036,"line_start":1858,"line_end":1858,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320038,"byte_end":320041,"line_start":1859,"line_end":1859,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320043,"byte_end":320113,"line_start":1860,"line_end":1860,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320115,"byte_end":320185,"line_start":1861,"line_end":1861,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use `clone_from_bitslice` on a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320187,"byte_end":320259,"line_start":1862,"line_end":1862,"column_start":2,"column_end":74}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320261,"byte_end":320311,"line_start":1863,"line_end":1863,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320313,"byte_end":320316,"line_start":1864,"line_end":1864,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320318,"byte_end":320342,"line_start":1865,"line_end":1865,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320344,"byte_end":320371,"line_start":1866,"line_end":1866,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320373,"byte_end":320376,"line_start":1867,"line_end":1867,"column_start":2,"column_end":5}},{"value":"/ let mut data = 3u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320378,"byte_end":320401,"line_start":1868,"line_end":1868,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320403,"byte_end":320447,"line_start":1869,"line_end":1869,"column_start":2,"column_end":46}},{"value":"/ bits[.. 2].clone_from_bitslice(&bits[6 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320449,"byte_end":320497,"line_start":1870,"line_end":1870,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320499,"byte_end":320506,"line_start":1871,"line_end":1871,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320508,"byte_end":320511,"line_start":1872,"line_end":1872,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`split_at_mut`] to create two distinct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320513,"byte_end":320588,"line_start":1873,"line_end":1873,"column_start":2,"column_end":77}},{"value":"/ sub-slices from a slice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320590,"byte_end":320618,"line_start":1874,"line_end":1874,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320620,"byte_end":320623,"line_start":1875,"line_end":1875,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320625,"byte_end":320636,"line_start":1876,"line_end":1876,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320638,"byte_end":320665,"line_start":1877,"line_end":1877,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320667,"byte_end":320670,"line_start":1878,"line_end":1878,"column_start":2,"column_end":5}},{"value":"/ let mut data = 3u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320672,"byte_end":320695,"line_start":1879,"line_end":1879,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320697,"byte_end":320741,"line_start":1880,"line_end":1880,"column_start":2,"column_end":46}},{"value":"/ let (head, tail) = bits.split_at_mut(4);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320743,"byte_end":320787,"line_start":1881,"line_end":1881,"column_start":2,"column_end":46}},{"value":"/ head.clone_from_bitslice(tail);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320789,"byte_end":320824,"line_start":1882,"line_end":1882,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(data, 0x33);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320826,"byte_end":320853,"line_start":1883,"line_end":1883,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320855,"byte_end":320862,"line_start":1884,"line_end":1884,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320864,"byte_end":320867,"line_start":1885,"line_end":1885,"column_start":2,"column_end":5}},{"value":"/ [`BitField::store`]: ../field/trait.BitField.html#method.store","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320869,"byte_end":320935,"line_start":1886,"line_end":1886,"column_start":2,"column_end":68}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320937,"byte_end":320979,"line_start":1887,"line_end":1887,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":320981,"byte_end":320990,"line_start":1888,"line_end":1888,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321476,"byte_end":321492,"line_start":1911,"line_end":1911,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321340,"byte_end":321357,"line_start":1908,"line_end":1908,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321359,"byte_end":321389,"line_start":1909,"line_end":1909,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.clone_from_bitslice` to copy between bitslices\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321391,"byte_end":321467,"line_start":1910,"line_end":1910,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323262,"byte_end":323280,"line_start":1969,"line_end":1969,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321615,"byte_end":321658,"line_start":1919,"line_end":1919,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321660,"byte_end":321663,"line_start":1920,"line_end":1920,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321665,"byte_end":321716,"line_start":1921,"line_end":1921,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321718,"byte_end":321721,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ If you are attempting to write an integer value into a `BitSlice`, see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321723,"byte_end":321797,"line_start":1923,"line_end":1923,"column_start":2,"column_end":76}},{"value":"/ the [`BitField::store`] trait function.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321799,"byte_end":321842,"line_start":1924,"line_end":1924,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321844,"byte_end":321847,"line_start":1925,"line_end":1925,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321849,"byte_end":321869,"line_start":1926,"line_end":1926,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321871,"byte_end":321874,"line_start":1927,"line_end":1927,"column_start":2,"column_end":5}},{"value":"/ This method attempts to use `memcpy` element-wise copy acceleration","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321876,"byte_end":321947,"line_start":1928,"line_end":1928,"column_start":2,"column_end":73}},{"value":"/ where possible. This will only occur when both `src` and `self` are","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":321949,"byte_end":322020,"line_start":1929,"line_end":1929,"column_start":2,"column_end":73}},{"value":"/ exactly similar: in addition to having the same type parameters and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322022,"byte_end":322093,"line_start":1930,"line_end":1930,"column_start":2,"column_end":73}},{"value":"/ length, they must begin at the same offset in an element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322095,"byte_end":322156,"line_start":1931,"line_end":1931,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322158,"byte_end":322161,"line_start":1932,"line_end":1932,"column_start":2,"column_end":5}},{"value":"/ Benchmarks do not indicate that `memcpy` element-wise copy is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322163,"byte_end":322228,"line_start":1933,"line_end":1933,"column_start":2,"column_end":67}},{"value":"/ significantly faster than [`.clone_from_bitslice()`]’s bit-wise crawl.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322230,"byte_end":322306,"line_start":1934,"line_end":1934,"column_start":2,"column_end":76}},{"value":"/ This implementation is retained so that you have the ability to observe","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322308,"byte_end":322383,"line_start":1935,"line_end":1935,"column_start":2,"column_end":77}},{"value":"/ performance characteristics on your own targets and choose as","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322385,"byte_end":322450,"line_start":1936,"line_end":1936,"column_start":2,"column_end":67}},{"value":"/ appropriate.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322452,"byte_end":322468,"line_start":1937,"line_end":1937,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322470,"byte_end":322473,"line_start":1938,"line_end":1938,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322475,"byte_end":322489,"line_start":1939,"line_end":1939,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322491,"byte_end":322494,"line_start":1940,"line_end":1940,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/std/primitive.std.html#method.copy_from_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322496,"byte_end":322599,"line_start":1941,"line_end":1941,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322601,"byte_end":322604,"line_start":1942,"line_end":1942,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322606,"byte_end":322627,"line_start":1943,"line_end":1943,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322629,"byte_end":322632,"line_start":1944,"line_end":1944,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322634,"byte_end":322708,"line_start":1945,"line_end":1945,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322710,"byte_end":322720,"line_start":1946,"line_end":1946,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322722,"byte_end":322725,"line_start":1947,"line_end":1947,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322727,"byte_end":322739,"line_start":1948,"line_end":1948,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322741,"byte_end":322744,"line_start":1949,"line_end":1949,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322746,"byte_end":322816,"line_start":1950,"line_end":1950,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322818,"byte_end":322821,"line_start":1951,"line_end":1951,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322823,"byte_end":322837,"line_start":1952,"line_end":1952,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322839,"byte_end":322842,"line_start":1953,"line_end":1953,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322844,"byte_end":322891,"line_start":1954,"line_end":1954,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322893,"byte_end":322896,"line_start":1955,"line_end":1955,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322898,"byte_end":322909,"line_start":1956,"line_end":1956,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322911,"byte_end":322938,"line_start":1957,"line_end":1957,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322940,"byte_end":322943,"line_start":1958,"line_end":1958,"column_start":2,"column_end":5}},{"value":"/ let mut dst = bits![mut 0; 200];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322945,"byte_end":322981,"line_start":1959,"line_end":1959,"column_start":2,"column_end":38}},{"value":"/ let src = bits![1; 200];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":322983,"byte_end":323011,"line_start":1960,"line_end":1960,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323013,"byte_end":323016,"line_start":1961,"line_end":1961,"column_start":2,"column_end":5}},{"value":"/ assert!(dst.not_any());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323018,"byte_end":323045,"line_start":1962,"line_end":1962,"column_start":2,"column_end":29}},{"value":"/ dst.copy_from_bitslice(src);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323047,"byte_end":323079,"line_start":1963,"line_end":1963,"column_start":2,"column_end":34}},{"value":"/ assert!(dst.all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323081,"byte_end":323104,"line_start":1964,"line_end":1964,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323106,"byte_end":323113,"line_start":1965,"line_end":1965,"column_start":2,"column_end":9}},{"value":"/ [`BitField::store`]: ../field/trait.BitField.html#method.store","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323115,"byte_end":323181,"line_start":1966,"line_end":1966,"column_start":2,"column_end":68}},{"value":"/ [`.clone_from_bitslice()`]: #method.clone_from_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323183,"byte_end":323242,"line_start":1967,"line_end":1967,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":323244,"byte_end":323253,"line_start":1968,"line_end":1968,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324823,"byte_end":324838,"line_start":2031,"line_end":2031,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324688,"byte_end":324705,"line_start":2028,"line_end":2028,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324707,"byte_end":324737,"line_start":2029,"line_end":2029,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.copy_from_bitslice` to copy between bitslices\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324739,"byte_end":324814,"line_start":2030,"line_end":2030,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325806,"byte_end":325817,"line_start":2064,"line_end":2064,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324900,"byte_end":324969,"line_start":2035,"line_end":2035,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324971,"byte_end":324974,"line_start":2036,"line_end":2036,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":324976,"byte_end":325049,"line_start":2037,"line_end":2037,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325051,"byte_end":325124,"line_start":2038,"line_end":2038,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325126,"byte_end":325201,"line_start":2039,"line_end":2039,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to `self.len()`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325203,"byte_end":325250,"line_start":2040,"line_end":2040,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325252,"byte_end":325255,"line_start":2041,"line_end":2041,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325257,"byte_end":325271,"line_start":2042,"line_end":2042,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325273,"byte_end":325276,"line_start":2043,"line_end":2043,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325278,"byte_end":325375,"line_start":2044,"line_end":2044,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325377,"byte_end":325380,"line_start":2045,"line_end":2045,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325382,"byte_end":325394,"line_start":2046,"line_end":2046,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325396,"byte_end":325399,"line_start":2047,"line_end":2047,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325401,"byte_end":325475,"line_start":2048,"line_end":2048,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325477,"byte_end":325524,"line_start":2049,"line_end":2049,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325526,"byte_end":325529,"line_start":2050,"line_end":2050,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325531,"byte_end":325545,"line_start":2051,"line_end":2051,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325547,"byte_end":325550,"line_start":2052,"line_end":2052,"column_start":2,"column_end":5}},{"value":"/ Copying four bytes within a slice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325552,"byte_end":325590,"line_start":2053,"line_end":2053,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325592,"byte_end":325595,"line_start":2054,"line_end":2054,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325597,"byte_end":325608,"line_start":2055,"line_end":2055,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325610,"byte_end":325637,"line_start":2056,"line_end":2056,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325639,"byte_end":325642,"line_start":2057,"line_end":2057,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0x07u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325644,"byte_end":325670,"line_start":2058,"line_end":2058,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325672,"byte_end":325716,"line_start":2059,"line_end":2059,"column_start":2,"column_end":46}},{"value":"/ bits.copy_within(5 .., 0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325718,"byte_end":325748,"line_start":2060,"line_end":2060,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(data, 0xE7);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325750,"byte_end":325777,"line_start":2061,"line_end":2061,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325779,"byte_end":325786,"line_start":2062,"line_end":2062,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":325788,"byte_end":325797,"line_start":2063,"line_end":2063,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327121,"byte_end":327139,"line_start":2112,"line_end":2112,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326224,"byte_end":326275,"line_start":2077,"line_end":2077,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326277,"byte_end":326280,"line_start":2078,"line_end":2078,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326282,"byte_end":326335,"line_start":2079,"line_end":2079,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326337,"byte_end":326340,"line_start":2080,"line_end":2080,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326342,"byte_end":326356,"line_start":2081,"line_end":2081,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326358,"byte_end":326361,"line_start":2082,"line_end":2082,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326363,"byte_end":326468,"line_start":2083,"line_end":2083,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326470,"byte_end":326473,"line_start":2084,"line_end":2084,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326475,"byte_end":326496,"line_start":2085,"line_end":2085,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326498,"byte_end":326501,"line_start":2086,"line_end":2086,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326503,"byte_end":326577,"line_start":2087,"line_end":2087,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326579,"byte_end":326589,"line_start":2088,"line_end":2088,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326591,"byte_end":326594,"line_start":2089,"line_end":2089,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326596,"byte_end":326608,"line_start":2090,"line_end":2090,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326610,"byte_end":326613,"line_start":2091,"line_end":2091,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326615,"byte_end":326685,"line_start":2092,"line_end":2092,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326687,"byte_end":326690,"line_start":2093,"line_end":2093,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326692,"byte_end":326706,"line_start":2094,"line_end":2094,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326708,"byte_end":326711,"line_start":2095,"line_end":2095,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326713,"byte_end":326724,"line_start":2096,"line_end":2096,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326726,"byte_end":326753,"line_start":2097,"line_end":2097,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326755,"byte_end":326758,"line_start":2098,"line_end":2098,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326760,"byte_end":326793,"line_start":2099,"line_end":2099,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326795,"byte_end":326823,"line_start":2100,"line_end":2100,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326825,"byte_end":326872,"line_start":2101,"line_end":2101,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326874,"byte_end":326921,"line_start":2102,"line_end":2102,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326923,"byte_end":326926,"line_start":2103,"line_end":2103,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326928,"byte_end":326970,"line_start":2104,"line_end":2104,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326972,"byte_end":326975,"line_start":2105,"line_end":2105,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":326977,"byte_end":327011,"line_start":2106,"line_end":2106,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327013,"byte_end":327053,"line_start":2107,"line_end":2107,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327055,"byte_end":327083,"line_start":2108,"line_end":2108,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327085,"byte_end":327092,"line_start":2109,"line_end":2109,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327094,"byte_end":327101,"line_start":2110,"line_end":2110,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327103,"byte_end":327112,"line_start":2111,"line_end":2111,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327632,"byte_end":327647,"line_start":2133,"line_end":2133,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327497,"byte_end":327514,"line_start":2130,"line_end":2130,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327516,"byte_end":327546,"line_start":2131,"line_end":2131,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.swap_with_bitslice` to swap between bitslices\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327548,"byte_end":327623,"line_start":2132,"line_end":2132,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329769,"byte_end":329777,"line_start":2196,"line_end":2196,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bitslice to a bitslice of another type, ensuring alignment\n of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bitslice to a bitslice of another type, ensuring alignment","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327778,"byte_end":327854,"line_start":2141,"line_end":2141,"column_start":2,"column_end":78}},{"value":"/ of the types is maintained.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327856,"byte_end":327887,"line_start":2142,"line_end":2142,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327889,"byte_end":327892,"line_start":2143,"line_end":2143,"column_start":2,"column_end":5}},{"value":"/ This method splits the bitslice into three distinct bitslices: prefix,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327894,"byte_end":327968,"line_start":2144,"line_end":2144,"column_start":2,"column_end":76}},{"value":"/ correctly aligned middle bitslice of a new type, and the suffix","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":327970,"byte_end":328037,"line_start":2145,"line_end":2145,"column_start":2,"column_end":69}},{"value":"/ bitslice. The method may make the middle bitslice the greatest","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328039,"byte_end":328105,"line_start":2146,"line_end":2146,"column_start":2,"column_end":68}},{"value":"/ length possible for a given type and input bitslice, but only your","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328107,"byte_end":328177,"line_start":2147,"line_end":2147,"column_start":2,"column_end":72}},{"value":"/ algorithm's performance should depend on that, not its correctness. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328179,"byte_end":328253,"line_start":2148,"line_end":2148,"column_start":2,"column_end":76}},{"value":"/ is permissible for all of the input data to be returned as the prefix or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328255,"byte_end":328331,"line_start":2149,"line_end":2149,"column_start":2,"column_end":78}},{"value":"/ suffix bitslice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328333,"byte_end":328353,"line_start":2150,"line_end":2150,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328355,"byte_end":328358,"line_start":2151,"line_end":2151,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328360,"byte_end":328374,"line_start":2152,"line_end":2152,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328376,"byte_end":328379,"line_start":2153,"line_end":2153,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328381,"byte_end":328472,"line_start":2154,"line_end":2154,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328474,"byte_end":328477,"line_start":2155,"line_end":2155,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328479,"byte_end":328500,"line_start":2156,"line_end":2156,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328502,"byte_end":328505,"line_start":2157,"line_end":2157,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same type family as type `T`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328507,"byte_end":328577,"line_start":2158,"line_end":2158,"column_start":2,"column_end":72}},{"value":"/ Whatever `T` is of the fundamental integers, atomics, or `Cell`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328579,"byte_end":328646,"line_start":2159,"line_end":2159,"column_start":2,"column_end":69}},{"value":"/ wrappers, `U` must be a different width in the same family. Changing the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328648,"byte_end":328724,"line_start":2160,"line_end":2160,"column_start":2,"column_end":78}},{"value":"/ type family with this method is **unsound** and strictly forbidden.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328726,"byte_end":328797,"line_start":2161,"line_end":2161,"column_start":2,"column_end":73}},{"value":"/ Unfortunately, it cannot be guaranteed by this function, so you are","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328799,"byte_end":328870,"line_start":2162,"line_end":2162,"column_start":2,"column_end":73}},{"value":"/ required to abide by this limitation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328872,"byte_end":328913,"line_start":2163,"line_end":2163,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328915,"byte_end":328918,"line_start":2164,"line_end":2164,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328920,"byte_end":328932,"line_start":2165,"line_end":2165,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328934,"byte_end":328937,"line_start":2166,"line_end":2166,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a `transmute` with respect to the elements in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":328939,"byte_end":329015,"line_start":2167,"line_end":2167,"column_start":2,"column_end":78}},{"value":"/ the returned middle bitslice, so all the usual caveats pertaining to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329017,"byte_end":329089,"line_start":2168,"line_end":2168,"column_start":2,"column_end":74}},{"value":"/ `transmute::<T, U>` also apply here.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329091,"byte_end":329131,"line_start":2169,"line_end":2169,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329133,"byte_end":329136,"line_start":2170,"line_end":2170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329138,"byte_end":329152,"line_start":2171,"line_end":2171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329154,"byte_end":329157,"line_start":2172,"line_end":2172,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329159,"byte_end":329175,"line_start":2173,"line_end":2173,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329177,"byte_end":329180,"line_start":2174,"line_end":2174,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329182,"byte_end":329193,"line_start":2175,"line_end":2175,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329195,"byte_end":329222,"line_start":2176,"line_end":2176,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329224,"byte_end":329227,"line_start":2177,"line_end":2177,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329229,"byte_end":329241,"line_start":2178,"line_end":2178,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329243,"byte_end":329292,"line_start":2179,"line_end":2179,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329294,"byte_end":329342,"line_start":2180,"line_end":2180,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329344,"byte_end":329404,"line_start":2181,"line_end":2181,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329406,"byte_end":329432,"line_start":2182,"line_end":2182,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329434,"byte_end":329448,"line_start":2183,"line_end":2183,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329450,"byte_end":329492,"line_start":2184,"line_end":2184,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329494,"byte_end":329536,"line_start":2185,"line_end":2185,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329538,"byte_end":329548,"line_start":2186,"line_end":2186,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329550,"byte_end":329564,"line_start":2187,"line_end":2187,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329566,"byte_end":329607,"line_start":2188,"line_end":2188,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329609,"byte_end":329650,"line_start":2189,"line_end":2189,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329652,"byte_end":329662,"line_start":2190,"line_end":2190,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329664,"byte_end":329717,"line_start":2191,"line_end":2191,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329719,"byte_end":329726,"line_start":2192,"line_end":2192,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329728,"byte_end":329733,"line_start":2193,"line_end":2193,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329735,"byte_end":329742,"line_start":2194,"line_end":2194,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":329744,"byte_end":329753,"line_start":2195,"line_end":2195,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332450,"byte_end":332462,"line_start":2272,"line_end":2272,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bitslice to a bitslice of another type, ensuring alignment\n of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bitslice to a bitslice of another type, ensuring alignment","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":330716,"byte_end":330792,"line_start":2227,"line_end":2227,"column_start":2,"column_end":78}},{"value":"/ of the types is maintained.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":330794,"byte_end":330825,"line_start":2228,"line_end":2228,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":330827,"byte_end":330830,"line_start":2229,"line_end":2229,"column_start":2,"column_end":5}},{"value":"/ This method splits the bitslice into three distinct bitslices: prefix,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":330832,"byte_end":330906,"line_start":2230,"line_end":2230,"column_start":2,"column_end":76}},{"value":"/ correctly aligned middle bitslice of a new type, and the suffix","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":330908,"byte_end":330975,"line_start":2231,"line_end":2231,"column_start":2,"column_end":69}},{"value":"/ bitslice. The method may make the middle bitslice the greatest","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":330977,"byte_end":331043,"line_start":2232,"line_end":2232,"column_start":2,"column_end":68}},{"value":"/ length possible for a given type and input bitslice, but only your","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331045,"byte_end":331115,"line_start":2233,"line_end":2233,"column_start":2,"column_end":72}},{"value":"/ algorithm's performance should depend on that, not its correctness. It","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331117,"byte_end":331191,"line_start":2234,"line_end":2234,"column_start":2,"column_end":76}},{"value":"/ is permissible for all of the input data to be returned as the prefix or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331193,"byte_end":331269,"line_start":2235,"line_end":2235,"column_start":2,"column_end":78}},{"value":"/ suffix bitslice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331271,"byte_end":331291,"line_start":2236,"line_end":2236,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331293,"byte_end":331296,"line_start":2237,"line_end":2237,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331298,"byte_end":331312,"line_start":2238,"line_end":2238,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331314,"byte_end":331317,"line_start":2239,"line_end":2239,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331319,"byte_end":331410,"line_start":2240,"line_end":2240,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331412,"byte_end":331415,"line_start":2241,"line_end":2241,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331417,"byte_end":331438,"line_start":2242,"line_end":2242,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331440,"byte_end":331443,"line_start":2243,"line_end":2243,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same type family as type `T`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331445,"byte_end":331515,"line_start":2244,"line_end":2244,"column_start":2,"column_end":72}},{"value":"/ Whatever `T` is of the fundamental integers, atomics, or `Cell`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331517,"byte_end":331584,"line_start":2245,"line_end":2245,"column_start":2,"column_end":69}},{"value":"/ wrappers, `U` must be a different width in the same family. Changing the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331586,"byte_end":331662,"line_start":2246,"line_end":2246,"column_start":2,"column_end":78}},{"value":"/ type family with this method is **unsound** and strictly forbidden.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331664,"byte_end":331735,"line_start":2247,"line_end":2247,"column_start":2,"column_end":73}},{"value":"/ Unfortunately, it cannot be guaranteed by this function, so you are","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331737,"byte_end":331808,"line_start":2248,"line_end":2248,"column_start":2,"column_end":73}},{"value":"/ required to abide by this limitation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331810,"byte_end":331851,"line_start":2249,"line_end":2249,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331853,"byte_end":331856,"line_start":2250,"line_end":2250,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331858,"byte_end":331870,"line_start":2251,"line_end":2251,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331872,"byte_end":331875,"line_start":2252,"line_end":2252,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a `transmute` with respect to the elements in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331877,"byte_end":331953,"line_start":2253,"line_end":2253,"column_start":2,"column_end":78}},{"value":"/ the returned middle bitslice, so all the usual caveats pertaining to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":331955,"byte_end":332027,"line_start":2254,"line_end":2254,"column_start":2,"column_end":74}},{"value":"/ `transmute::<T, U>` also apply here.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332029,"byte_end":332069,"line_start":2255,"line_end":2255,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332071,"byte_end":332074,"line_start":2256,"line_end":2256,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332076,"byte_end":332090,"line_start":2257,"line_end":2257,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332092,"byte_end":332095,"line_start":2258,"line_end":2258,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332097,"byte_end":332113,"line_start":2259,"line_end":2259,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332115,"byte_end":332118,"line_start":2260,"line_end":2260,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332120,"byte_end":332131,"line_start":2261,"line_end":2261,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332133,"byte_end":332160,"line_start":2262,"line_end":2262,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332162,"byte_end":332165,"line_start":2263,"line_end":2263,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332167,"byte_end":332179,"line_start":2264,"line_end":2264,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332181,"byte_end":332234,"line_start":2265,"line_end":2265,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332236,"byte_end":332288,"line_start":2266,"line_end":2266,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332290,"byte_end":332354,"line_start":2267,"line_end":2267,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332356,"byte_end":332407,"line_start":2268,"line_end":2268,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332409,"byte_end":332414,"line_start":2269,"line_end":2269,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332416,"byte_end":332423,"line_start":2270,"line_end":2270,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332425,"byte_end":332434,"line_start":2271,"line_end":2271,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333238,"byte_end":333247,"line_start":2310,"line_end":2310,"column_start":9,"column_end":18},"name":"to_bitvec","qualname":"<BitSlice<O, T>>::to_bitvec","value":"pub fn to_bitvec(&Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new `BitVec`.","sig":null,"attributes":[{"value":"/ Copies `self` into a new `BitVec`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332844,"byte_end":332882,"line_start":2292,"line_end":2292,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332884,"byte_end":332887,"line_start":2293,"line_end":2293,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332889,"byte_end":332903,"line_start":2294,"line_end":2294,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332905,"byte_end":332908,"line_start":2295,"line_end":2295,"column_start":2,"column_end":5}},{"value":"/ [`slice::to_vec`](https://doc.rust-lang.org/std.primitive.html#method.to_vec)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332910,"byte_end":332991,"line_start":2296,"line_end":2296,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332993,"byte_end":332996,"line_start":2297,"line_end":2297,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332998,"byte_end":333012,"line_start":2298,"line_end":2298,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333014,"byte_end":333017,"line_start":2299,"line_end":2299,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333019,"byte_end":333030,"line_start":2300,"line_end":2300,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"stde\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333032,"byte_end":333064,"line_start":2301,"line_end":2301,"column_start":2,"column_end":34}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333066,"byte_end":333093,"line_start":2302,"line_end":2302,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333095,"byte_end":333098,"line_start":2303,"line_end":2303,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333100,"byte_end":333133,"line_start":2304,"line_end":2304,"column_start":2,"column_end":35}},{"value":"/ let bv = bits.to_bitvec();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333135,"byte_end":333165,"line_start":2305,"line_end":2305,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits, bv);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333167,"byte_end":333192,"line_start":2306,"line_end":2306,"column_start":2,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333194,"byte_end":333201,"line_start":2307,"line_end":2307,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333203,"byte_end":333210,"line_start":2308,"line_end":2308,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333212,"byte_end":333229,"line_start":2309,"line_end":2309,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333461,"byte_end":333467,"line_start":2318,"line_end":2318,"column_start":9,"column_end":15},"name":"to_vec","qualname":"<BitSlice<O, T>>::to_vec","value":"pub fn to_vec(&Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333324,"byte_end":333341,"line_start":2315,"line_end":2315,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333343,"byte_end":333373,"line_start":2316,"line_end":2316,"column_start":2,"column_end":32}},{"value":"deprecated(note = \"Use `.to_bitvec` to convert a bit slice into a vector\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333375,"byte_end":333452,"line_start":2317,"line_end":2317,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334167,"byte_end":334173,"line_start":2351,"line_end":2351,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitSlice<O, T>>::repeat","value":"pub fn repeat(&Self, usize) -> BitVec<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Creates a vector by repeating a slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a vector by repeating a slice `n` times.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333517,"byte_end":333569,"line_start":2322,"line_end":2322,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333571,"byte_end":333574,"line_start":2323,"line_end":2323,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333576,"byte_end":333590,"line_start":2324,"line_end":2324,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333592,"byte_end":333595,"line_start":2325,"line_end":2325,"column_start":2,"column_end":5}},{"value":"/ [`slice::repeat`](https://doc.rust-lang.org/std/primitive.slice.html#method.repeat)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333597,"byte_end":333684,"line_start":2326,"line_end":2326,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333686,"byte_end":333689,"line_start":2327,"line_end":2327,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333691,"byte_end":333703,"line_start":2328,"line_end":2328,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333705,"byte_end":333708,"line_start":2329,"line_end":2329,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333710,"byte_end":333770,"line_start":2330,"line_end":2330,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333772,"byte_end":333775,"line_start":2331,"line_end":2331,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333777,"byte_end":333791,"line_start":2332,"line_end":2332,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333793,"byte_end":333796,"line_start":2333,"line_end":2333,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333798,"byte_end":333814,"line_start":2334,"line_end":2334,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333816,"byte_end":333819,"line_start":2335,"line_end":2335,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333821,"byte_end":333832,"line_start":2336,"line_end":2336,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333834,"byte_end":333861,"line_start":2337,"line_end":2337,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333863,"byte_end":333866,"line_start":2338,"line_end":2338,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0, 1].repeat(3), bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333868,"byte_end":333931,"line_start":2339,"line_end":2339,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333933,"byte_end":333940,"line_start":2340,"line_end":2340,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333942,"byte_end":333945,"line_start":2341,"line_end":2341,"column_start":2,"column_end":5}},{"value":"/ A panic upon overflow:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333947,"byte_end":333973,"line_start":2342,"line_end":2342,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333975,"byte_end":333978,"line_start":2343,"line_end":2343,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":333980,"byte_end":334004,"line_start":2344,"line_end":2344,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334006,"byte_end":334033,"line_start":2345,"line_end":2345,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334035,"byte_end":334038,"line_start":2346,"line_end":2346,"column_start":2,"column_end":5}},{"value":"/ // this will panic at runtime","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334040,"byte_end":334073,"line_start":2347,"line_end":2347,"column_start":2,"column_end":35}},{"value":"/ bits![0, 1].repeat(BitSlice::<LocalBits, usize>::MAX_BITS);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334075,"byte_end":334138,"line_start":2348,"line_end":2348,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334140,"byte_end":334147,"line_start":2349,"line_end":2349,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334149,"byte_end":334158,"line_start":2350,"line_end":2350,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":1122},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335143,"byte_end":335151,"line_start":2385,"line_end":2385,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore +\nBitRegister","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a bitslice over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a bitslice over one element.\n\n# Original\n\n[`slice::from_ref`](https://doc.rust-lang.org/core/slice/fn.from_ref.html)\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":334929,"byte_end":335086,"line_start":2377,"line_end":2382,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335087,"byte_end":335104,"line_start":2383,"line_end":2383,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335105,"byte_end":335135,"line_start":2384,"line_end":2384,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1125},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335484,"byte_end":335492,"line_start":2401,"line_end":2401,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore + BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a bitslice over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a bitslice over one element.\n\n# Original\n\n[`slice::from_mut`](https://doc.rust-lang.org/core/slice/fn.from_mut.html)\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335270,"byte_end":335427,"line_start":2393,"line_end":2398,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335428,"byte_end":335445,"line_start":2399,"line_end":2399,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335446,"byte_end":335476,"line_start":2400,"line_end":2400,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1128},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":337851,"byte_end":337865,"line_start":2469,"line_end":2469,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(*const T, usize) -> &'a BitSlice<O, T>\nwhere O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Forms a bitslice from a pointer and a length.","sig":null,"attributes":[{"value":"* Forms a bitslice from a pointer and a length.\n\nThe `len` argument is the number of **elements**, not the number of bits.\n\n# Original\n\n[`slice::from_raw_parts`](https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":335856,"byte_end":336167,"line_start":2414,"line_end":2426,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for `len * mem::size_of::<T>()` many bytes, and it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336168,"byte_end":336247,"line_start":2427,"line_end":2427,"column_start":1,"column_end":80}},{"value":"/   must be properly aligned. This means in particular:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336248,"byte_end":336305,"line_start":2428,"line_end":2428,"column_start":1,"column_end":58}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336306,"byte_end":336385,"line_start":2429,"line_end":2429,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336386,"byte_end":336459,"line_start":2430,"line_end":2430,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336460,"byte_end":336476,"line_start":2431,"line_end":2431,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null and aligned even for zero-length slices. The","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336477,"byte_end":336553,"line_start":2432,"line_end":2432,"column_start":1,"column_end":77}},{"value":"/     `&BitSlice` pointer encoding requires this porperty to hold. You can","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336554,"byte_end":336630,"line_start":2433,"line_end":2433,"column_start":1,"column_end":77}},{"value":"/     obtain a pointer that is usable as `data` for zero-length slices using","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336631,"byte_end":336709,"line_start":2434,"line_end":2434,"column_start":1,"column_end":79}},{"value":"/     [`NonNull::dangling()`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336710,"byte_end":336742,"line_start":2435,"line_end":2435,"column_start":1,"column_end":33}},{"value":"/ - The memory referenced by the returned bitslice must not be mutated for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336743,"byte_end":336823,"line_start":2436,"line_end":2436,"column_start":1,"column_end":81}},{"value":"/   duration of the lifetime `'a`, except inside an `UnsafeCell`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336824,"byte_end":336891,"line_start":2437,"line_end":2437,"column_start":1,"column_end":68}},{"value":"/ - The total size `len * T::Mem::BITS` of the slice must be no larger than","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336892,"byte_end":336969,"line_start":2438,"line_end":2438,"column_start":1,"column_end":78}},{"value":"/   [`BitSlice::<_, T>::MAX_BITS`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":336970,"byte_end":337007,"line_start":2439,"line_end":2439,"column_start":1,"column_end":38}},{"value":"*\n\n# Caveat\n\nThe lifetime for the returned slice is inferred from its usage. To prevent\naccidental misuse, it's suggested to tie the lifetime to whichever source\nlifetime is safe in the context, such as by providing a helper function taking\nthe lifetime of a host value for the slice, or by explicit annotation.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\nuse bitvec::slice as bv_slice;\n\nlet x = 42u8;\nlet ptr = &x as *const _;\nlet bits = unsafe {\n  bv_slice::from_raw_parts::<LocalBits, u8>(ptr, 1)\n};\nassert_eq!(bits.count_ones(), 3);\n```\n\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n[`BitSlice::<_, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`NonNull::dangling()`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.dangling\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":337008,"byte_end":337795,"line_start":2440,"line_end":2466,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":337796,"byte_end":337805,"line_start":2467,"line_end":2467,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":337806,"byte_end":337836,"line_start":2468,"line_end":2468,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1133},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339793,"byte_end":339811,"line_start":2523,"line_end":2523,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(*mut T, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":"Performs the same functionality as [`from_raw_parts`], except that a mutable\nbitslice is returned.","sig":null,"attributes":[{"value":"*\nPerforms the same functionality as [`from_raw_parts`], except that a mutable\nbitslice is returned.\n\n# Original\n\n[`slice::from_raw_parts_mut`](https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338209,"byte_end":338505,"line_start":2487,"line_end":2498,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338506,"byte_end":338509,"line_start":2499,"line_end":2499,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for `len * mem::size_of::<T>()` many bytes, and it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338510,"byte_end":338589,"line_start":2500,"line_end":2500,"column_start":1,"column_end":80}},{"value":"/   must be properly aligned. This means in particular:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338590,"byte_end":338647,"line_start":2501,"line_end":2501,"column_start":1,"column_end":58}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338648,"byte_end":338727,"line_start":2502,"line_end":2502,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338728,"byte_end":338801,"line_start":2503,"line_end":2503,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338802,"byte_end":338818,"line_start":2504,"line_end":2504,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null and aligned even for zero-length slices. The","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338819,"byte_end":338895,"line_start":2505,"line_end":2505,"column_start":1,"column_end":77}},{"value":"/     `&BitSlice` pointer encoding requires this porperty to hold. You can","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338896,"byte_end":338972,"line_start":2506,"line_end":2506,"column_start":1,"column_end":77}},{"value":"/     obtain a pointer that is usable as `data` for zero-length slices using","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":338973,"byte_end":339051,"line_start":2507,"line_end":2507,"column_start":1,"column_end":79}},{"value":"/     [`NonNull::dangling()`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339052,"byte_end":339084,"line_start":2508,"line_end":2508,"column_start":1,"column_end":33}},{"value":"/ - The memory referenced by the returned bitslice must not be accessed","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339085,"byte_end":339158,"line_start":2509,"line_end":2509,"column_start":1,"column_end":74}},{"value":"/   through other pointer (not derived from the return value) for the duration","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339159,"byte_end":339239,"line_start":2510,"line_end":2510,"column_start":1,"column_end":81}},{"value":"/   of the lifetime `'a`. Both read and write accesses are forbidden.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339240,"byte_end":339311,"line_start":2511,"line_end":2511,"column_start":1,"column_end":72}},{"value":"/ - The total size `len * T::Mem::BITS` of the slice must be no larger than","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339312,"byte_end":339389,"line_start":2512,"line_end":2512,"column_start":1,"column_end":78}},{"value":"/   [`BitSlice::<_, T>::MAX_BITS`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339390,"byte_end":339427,"line_start":2513,"line_end":2513,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339428,"byte_end":339431,"line_start":2514,"line_end":2514,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/core/ptr/index.html#safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339432,"byte_end":339497,"line_start":2515,"line_end":2515,"column_start":1,"column_end":66}},{"value":"/ [`from_raw_parts`]: fn.from_raw_parts.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339498,"byte_end":339544,"line_start":2516,"line_end":2516,"column_start":1,"column_end":47}},{"value":"/ [`NonNull::dangling()`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.dangling","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339545,"byte_end":339644,"line_start":2517,"line_end":2517,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339645,"byte_end":339648,"line_start":2518,"line_end":2518,"column_start":1,"column_end":4}},{"value":"/ [`BitSlice::<_, T>::MAX_BITS`]:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339649,"byte_end":339684,"line_start":2519,"line_end":2519,"column_start":1,"column_end":36}},{"value":"/ struct.BitSlice.html#associatedconstant.MAX_BITS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339685,"byte_end":339737,"line_start":2520,"line_end":2520,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339738,"byte_end":339747,"line_start":2521,"line_end":2521,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":339748,"byte_end":339778,"line_start":2522,"line_end":2522,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1138},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341019,"byte_end":341032,"line_start":2562,"line_end":2562,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nfunctions. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since `bitvec` cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](https://doc.rust-lang.org/stable/core/slice/trait.SliceIndex.html)\n\n# API Differences\n\n`SliceIndex::Output` is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n`BitSlice` reference; the `usize` implementation defines them to be `&bool` and\nthe proxy type.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":340165,"byte_end":341008,"line_start":2541,"line_end":2561,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":1142},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341141,"byte_end":341146,"line_start":2568,"line_end":2568,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" The output type for immutable functions.\n","sig":null,"attributes":[{"value":"/ The output type for immutable functions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341090,"byte_end":341134,"line_start":2567,"line_end":2567,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1143},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341199,"byte_end":341202,"line_start":2571,"line_end":2571,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" The output type for mutable functions.\n","sig":null,"attributes":[{"value":"/ The output type for mutable functions.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341150,"byte_end":341192,"line_start":2570,"line_end":2570,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341409,"byte_end":341412,"line_start":2578,"line_end":2578,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341206,"byte_end":341282,"line_start":2573,"line_end":2573,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341284,"byte_end":341287,"line_start":2574,"line_end":2574,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341289,"byte_end":341303,"line_start":2575,"line_end":2575,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341305,"byte_end":341308,"line_start":2576,"line_end":2576,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341310,"byte_end":341404,"line_start":2577,"line_end":2577,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341689,"byte_end":341696,"line_start":2586,"line_end":2586,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341472,"byte_end":341541,"line_start":2580,"line_end":2580,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341543,"byte_end":341554,"line_start":2581,"line_end":2581,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341556,"byte_end":341559,"line_start":2582,"line_end":2582,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341561,"byte_end":341575,"line_start":2583,"line_end":2583,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341577,"byte_end":341580,"line_start":2584,"line_end":2584,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341582,"byte_end":341684,"line_start":2585,"line_end":2585,"column_start":2,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342513,"byte_end":342526,"line_start":2605,"line_end":2605,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341758,"byte_end":341828,"line_start":2588,"line_end":2588,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341830,"byte_end":341893,"line_start":2589,"line_end":2589,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341895,"byte_end":341964,"line_start":2590,"line_end":2590,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341966,"byte_end":341992,"line_start":2591,"line_end":2591,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341994,"byte_end":341997,"line_start":2592,"line_end":2592,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":341999,"byte_end":342013,"line_start":2593,"line_end":2593,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342015,"byte_end":342018,"line_start":2594,"line_end":2594,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_unchecked)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342020,"byte_end":342134,"line_start":2595,"line_end":2595,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342136,"byte_end":342139,"line_start":2596,"line_end":2596,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342141,"byte_end":342153,"line_start":2597,"line_end":2597,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342155,"byte_end":342158,"line_start":2598,"line_end":2598,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342160,"byte_end":342232,"line_start":2599,"line_end":2599,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342234,"byte_end":342308,"line_start":2600,"line_end":2600,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342310,"byte_end":342381,"line_start":2601,"line_end":2601,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342383,"byte_end":342398,"line_start":2602,"line_end":2602,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342400,"byte_end":342403,"line_start":2603,"line_end":2603,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342405,"byte_end":342501,"line_start":2604,"line_end":2604,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343342,"byte_end":343359,"line_start":2624,"line_end":2624,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342578,"byte_end":342649,"line_start":2607,"line_end":2607,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342651,"byte_end":342714,"line_start":2608,"line_end":2608,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342716,"byte_end":342785,"line_start":2609,"line_end":2609,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342787,"byte_end":342813,"line_start":2610,"line_end":2610,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342815,"byte_end":342818,"line_start":2611,"line_end":2611,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342820,"byte_end":342834,"line_start":2612,"line_end":2612,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342836,"byte_end":342839,"line_start":2613,"line_end":2613,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_unchecked_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342841,"byte_end":342963,"line_start":2614,"line_end":2614,"column_start":2,"column_end":124}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342965,"byte_end":342968,"line_start":2615,"line_end":2615,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342970,"byte_end":342982,"line_start":2616,"line_end":2616,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342984,"byte_end":342987,"line_start":2617,"line_end":2617,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":342989,"byte_end":343061,"line_start":2618,"line_end":2618,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343063,"byte_end":343137,"line_start":2619,"line_end":2619,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343139,"byte_end":343210,"line_start":2620,"line_end":2620,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343212,"byte_end":343227,"line_start":2621,"line_end":2621,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343229,"byte_end":343232,"line_start":2622,"line_end":2622,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343234,"byte_end":343330,"line_start":2623,"line_end":2623,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343647,"byte_end":343652,"line_start":2635,"line_end":2635,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343421,"byte_end":343496,"line_start":2629,"line_end":2629,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343498,"byte_end":343516,"line_start":2630,"line_end":2630,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343518,"byte_end":343521,"line_start":2631,"line_end":2631,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343523,"byte_end":343537,"line_start":2632,"line_end":2632,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343539,"byte_end":343542,"line_start":2633,"line_end":2633,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.index)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343544,"byte_end":343642,"line_start":2634,"line_end":2634,"column_start":2,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343939,"byte_end":343948,"line_start":2643,"line_end":2643,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343704,"byte_end":343780,"line_start":2637,"line_end":2637,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343782,"byte_end":343800,"line_start":2638,"line_end":2638,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343802,"byte_end":343805,"line_start":2639,"line_end":2639,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343807,"byte_end":343821,"line_start":2640,"line_end":2640,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343823,"byte_end":343826,"line_start":2641,"line_end":2641,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.index_mut)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":343828,"byte_end":343934,"line_start":2642,"line_end":2642,"column_start":2,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":3167},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":350753,"byte_end":350757,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":3171},{"krate":0,"index":3172},{"krate":0,"index":3173},{"krate":0,"index":3174},{"krate":0,"index":3175}],"decl_id":null,"docs":" Immutable slice iterator","sig":null,"attributes":[{"value":"* Immutable slice iterator\n\nThis struct is created by the [`iter`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](https://doc.rust-lang.org/core/slice/struct.Iter.html)\n\n# Examples\n\nBasic usage:\n\n```rust\n# #[cfg(feature = \"std\")] {\nuse bitvec::prelude::*;\n\n// First, we declare a type which has `iter` method to get the `Iter` struct (&BitSlice here):\nlet data = 129u8;\nlet bits = BitSlice::<LocalBits, _>::from_element(&data);\n\n// Then, we iterato over it:\nfor bit in bits.iter() {\n  println!(\"{}\", bit);\n}\n# }\n```\n\n[`BitSlice`]: struct.BitSlice.html\n[`iter`]: struct.BitSlice.html#method.iter\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":350117,"byte_end":350724,"line_start":29,"line_end":58,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353241,"byte_end":353252,"line_start":134,"line_end":134,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352032,"byte_end":352097,"line_start":95,"line_end":95,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352099,"byte_end":352102,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original bit slice, and so the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352104,"byte_end":352172,"line_start":97,"line_end":97,"column_start":2,"column_end":70}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352174,"byte_end":352229,"line_start":98,"line_end":98,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352231,"byte_end":352234,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352236,"byte_end":352250,"line_start":100,"line_end":100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352252,"byte_end":352255,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](https://doc.rust-lang.org/core/slice/struct.Iter.html#method.as_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352257,"byte_end":352350,"line_start":102,"line_end":102,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352352,"byte_end":352355,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352357,"byte_end":352378,"line_start":104,"line_end":104,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352380,"byte_end":352383,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ This is renamed, as its return type is not an element slice `&[T]` or","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352385,"byte_end":352458,"line_start":106,"line_end":106,"column_start":2,"column_end":75}},{"value":"/ `&[bool]` but a bit slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352460,"byte_end":352490,"line_start":107,"line_end":107,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352492,"byte_end":352495,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352497,"byte_end":352511,"line_start":109,"line_end":109,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352513,"byte_end":352516,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352518,"byte_end":352534,"line_start":111,"line_end":111,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352536,"byte_end":352539,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352541,"byte_end":352552,"line_start":113,"line_end":113,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352554,"byte_end":352585,"line_start":114,"line_end":114,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352587,"byte_end":352614,"line_start":115,"line_end":115,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352616,"byte_end":352619,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ // First, we declare a type which has the `iter` method to get the `Iter`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352621,"byte_end":352698,"line_start":117,"line_end":117,"column_start":2,"column_end":79}},{"value":"/ // struct (&BitSlice here):","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352700,"byte_end":352731,"line_start":118,"line_end":118,"column_start":2,"column_end":33}},{"value":"/ let data = 129u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352733,"byte_end":352754,"line_start":119,"line_end":119,"column_start":2,"column_end":23}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element(&data);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352756,"byte_end":352812,"line_start":120,"line_end":120,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352814,"byte_end":352817,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ // Then, we get the iterator:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352819,"byte_end":352852,"line_start":122,"line_end":122,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352854,"byte_end":352885,"line_start":123,"line_end":123,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns here, we have \"[1, 0, 0, 0, 0, 0, 0, 1]\":","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352887,"byte_end":352977,"line_start":124,"line_end":124,"column_start":2,"column_end":92}},{"value":"/ println!(\"{:?}\", iter.as_bitslice());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":352979,"byte_end":353020,"line_start":125,"line_end":125,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353022,"byte_end":353025,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353027,"byte_end":353083,"line_start":127,"line_end":127,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353085,"byte_end":353101,"line_start":128,"line_end":128,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[0, 0, 0, 0, 0, 0, 1]\":","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353103,"byte_end":353160,"line_start":129,"line_end":129,"column_start":2,"column_end":59}},{"value":"/ println!(\"{:?}\", iter.as_bitslice());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353162,"byte_end":353203,"line_start":130,"line_end":130,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353205,"byte_end":353212,"line_start":131,"line_end":131,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353214,"byte_end":353221,"line_start":132,"line_end":132,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353223,"byte_end":353232,"line_start":133,"line_end":133,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353806,"byte_end":353814,"line_start":152,"line_end":152,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353651,"byte_end":353660,"line_start":146,"line_end":146,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353678,"byte_end":353708,"line_start":148,"line_end":148,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.as_bitslice` on iterators to view the remaining data\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":353710,"byte_end":353797,"line_start":149,"line_end":151,"column_start":2,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3181},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":356436,"byte_end":356443,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":3185},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3189}],"decl_id":null,"docs":" Mutable bit slice iterator.","sig":null,"attributes":[{"value":"* Mutable bit slice iterator.\n\nThis struct is created by the [`iter_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](https://doc.rust-lang.org/core/slice/struct.IterMut.html)\n\n# API Differences\n\nIn addition to returning `BitMut` instead of `&mut bool`, all references\nproduced from this iterator are marked as aliasing. This is necessary because\nthe references receive the lifetime of the original slice, not of the iterator\nobject, and the iterator is able to produce multiple live references in the same\nscope.\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n// First, we declare a type which has `iter_mut` method to get the `IterMut`\n// struct (&BitSlice here):\nlet mut data = 0u8;\nlet bits = data.view_bits_mut::<Msb0>();\n\n// Then, we iterate over it and modify bits:\nfor (idx, mut bit) in bits.iter_mut().enumerate() {\n  *bit = idx % 3 == 0;\n}\nassert_eq!(data, 0b100_100_10);\n```\n\n[`BitSlice`]: struct.BitSlice.html\n[`iter_mut`]: struct.BitSlice.html#method.iter_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":355404,"byte_end":356407,"line_start":235,"line_end":271,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358547,"byte_end":358560,"line_start":342,"line_end":342,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357108,"byte_end":357173,"line_start":295,"line_end":295,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357175,"byte_end":357178,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias the same *bits*, this is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357180,"byte_end":357255,"line_start":297,"line_end":297,"column_start":2,"column_end":77}},{"value":"/ forced to consume the iterator.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357257,"byte_end":357292,"line_start":298,"line_end":298,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357294,"byte_end":357297,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357299,"byte_end":357313,"line_start":300,"line_end":300,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357315,"byte_end":357318,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_bitslice`](https://doc.rust-lang.org/core/slice/struct.IterMut.html#method.into_bitslice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357320,"byte_end":357429,"line_start":302,"line_end":302,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357431,"byte_end":357434,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357436,"byte_end":357457,"line_start":304,"line_end":304,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357459,"byte_end":357462,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ This is renamed, as its return type is not an element slice `&mut [T]`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357464,"byte_end":357538,"line_start":306,"line_end":306,"column_start":2,"column_end":76}},{"value":"/ or `&mut [bool]` but a bit slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357540,"byte_end":357577,"line_start":307,"line_end":307,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357579,"byte_end":357582,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357584,"byte_end":357598,"line_start":309,"line_end":309,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357600,"byte_end":357603,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357605,"byte_end":357621,"line_start":311,"line_end":311,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357623,"byte_end":357626,"line_start":312,"line_end":312,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357628,"byte_end":357639,"line_start":313,"line_end":313,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357641,"byte_end":357672,"line_start":314,"line_end":314,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357674,"byte_end":357701,"line_start":315,"line_end":315,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357703,"byte_end":357706,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ // First, we declare a type which has `iter_mut` method to get the `IterMut`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357708,"byte_end":357788,"line_start":317,"line_end":317,"column_start":2,"column_end":82}},{"value":"/ // struct (&BitSlice here):","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357790,"byte_end":357821,"line_start":318,"line_end":318,"column_start":2,"column_end":33}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357823,"byte_end":357846,"line_start":319,"line_end":319,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357848,"byte_end":357892,"line_start":320,"line_end":320,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357894,"byte_end":357897,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357899,"byte_end":357904,"line_start":322,"line_end":322,"column_start":2,"column_end":7}},{"value":"/   // Then, we get the iterator:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357906,"byte_end":357941,"line_start":323,"line_end":323,"column_start":2,"column_end":37}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357943,"byte_end":357980,"line_start":324,"line_end":324,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357982,"byte_end":358019,"line_start":325,"line_end":325,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358021,"byte_end":358039,"line_start":326,"line_end":326,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice` method returns here, we have","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358041,"byte_end":358114,"line_start":327,"line_end":327,"column_start":2,"column_end":75}},{"value":"/   // \"[0, 0, 0, 0, 0, 0, 0]\":","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358116,"byte_end":358149,"line_start":328,"line_end":328,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:?}\", iter.into_bitslice());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358151,"byte_end":358196,"line_start":329,"line_end":329,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358198,"byte_end":358203,"line_start":330,"line_end":330,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358205,"byte_end":358208,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ // Now let's modify a value of the slice:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358210,"byte_end":358255,"line_start":332,"line_end":332,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358257,"byte_end":358262,"line_start":333,"line_end":333,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358264,"byte_end":358304,"line_start":334,"line_end":334,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358306,"byte_end":358343,"line_start":335,"line_end":335,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of the slice returned by the `next` method:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358345,"byte_end":358434,"line_start":336,"line_end":336,"column_start":2,"column_end":91}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358436,"byte_end":358471,"line_start":337,"line_end":337,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358473,"byte_end":358478,"line_start":338,"line_end":338,"column_start":2,"column_end":7}},{"value":"/ // Now data is \"1\":","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358480,"byte_end":358503,"line_start":339,"line_end":339,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358505,"byte_end":358529,"line_start":340,"line_end":340,"column_start":2,"column_end":26}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":358531,"byte_end":358538,"line_start":341,"line_end":341,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":359282,"byte_end":359292,"line_start":367,"line_end":367,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":359098,"byte_end":359107,"line_start":362,"line_end":362,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":359125,"byte_end":359155,"line_start":364,"line_end":364,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.into_bitslice` on mutable iterators to view \\\n\t                     the remaining data\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":359157,"byte_end":359273,"line_start":365,"line_end":366,"column_start":2,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":3263},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":366962,"byte_end":366969,"line_start":723,"line_end":723,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":3267},{"krate":0,"index":3268}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`windows`] method on [bit slices].\n\n# Original\n\n[`slice::Windows`](https://doc.rust-lang.org/core/slice/struct.Windows.html)\n\n[bit slices]: struct.BitSlice.html\n[`windows`]: struct.BitSlice.html#method.windows\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":366620,"byte_end":366926,"line_start":711,"line_end":721,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":369093,"byte_end":369099,"line_start":811,"line_end":811,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":3306},{"krate":0,"index":3307}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`chunks`] method on [bit slices].\n\n# Original\n\n[`slice::Chunks`](https://doc.rust-lang.org/core/slice/struct.Chunks.html)\n\n[bit slices]: struct.BitSlice.html\n[`chunks`]: struct.BitSlice.html#method.chunks\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":368566,"byte_end":369057,"line_start":795,"line_end":809,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3341},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":371791,"byte_end":371800,"line_start":918,"line_end":918,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":3345},{"krate":0,"index":3346}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`chunks_mut`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksMut`](https://doc.rust-lang.org/core/slice/struct.ChunksMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`chunks_mut`]: struct.BitSlice.html#chunks_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":371174,"byte_end":371762,"line_start":898,"line_end":916,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3375},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":374668,"byte_end":374679,"line_start":1025,"line_end":1025,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size - 1` bits will be ommitted but can be retrieved from the\n[`remainder`] function from the iterator.\n\nThis struct is created by the [`chunks_exact`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksExact`](https://doc.rust-lang.org/core/slice/struct.ChunksExact.html)\n\n[bit slices]: struct.BitSlice.html\n[`chunks_exact`]: struct.BitSlice.html#method.chunks_exact\n[`remainder`]: #method.remainder\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":374012,"byte_end":374632,"line_start":1007,"line_end":1023,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375626,"byte_end":375635,"line_start":1062,"line_end":1062,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original bit slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original bit slice that is not going to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375310,"byte_end":375385,"line_start":1055,"line_end":1055,"column_start":2,"column_end":77}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375387,"byte_end":375462,"line_start":1056,"line_end":1056,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375464,"byte_end":375473,"line_start":1057,"line_end":1057,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375475,"byte_end":375478,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375480,"byte_end":375494,"line_start":1059,"line_end":1059,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375496,"byte_end":375499,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](https://doc.rust-lang.org/core/slice/struct.ChunksExact.html#method.remainder)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":375501,"byte_end":375617,"line_start":1061,"line_end":1061,"column_start":2,"column_end":118}}]},{"kind":"Struct","id":{"krate":0,"index":3415},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":377726,"byte_end":377740,"line_start":1146,"line_end":1146,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":3419},{"krate":0,"index":3420},{"krate":0,"index":3421}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`into_remainder`] function from the iterator.\n\nThis struct is created by the [`chunks_exact_mut`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksExactMut`](https://doc.rust-lang.org/core/slice/struct.ChunksExactMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`chunks_exact_mut`]: struct.BitSlice.html#method.chunks_exact_mut\n[`into_remainder`]: #method.into_remainder\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":376958,"byte_end":377697,"line_start":1124,"line_end":1144,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378876,"byte_end":378890,"line_start":1189,"line_end":1189,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378404,"byte_end":378475,"line_start":1176,"line_end":1176,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378477,"byte_end":378552,"line_start":1177,"line_end":1177,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378554,"byte_end":378563,"line_start":1178,"line_end":1178,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378565,"byte_end":378568,"line_start":1179,"line_end":1179,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378570,"byte_end":378584,"line_start":1180,"line_end":1180,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378586,"byte_end":378589,"line_start":1181,"line_end":1181,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`](https://doc.rust-lang.org/core/slice/struct.ChunksExactMut.html#method.into_remainder)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378591,"byte_end":378723,"line_start":1182,"line_end":1182,"column_start":2,"column_end":134}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378725,"byte_end":378728,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378730,"byte_end":378751,"line_start":1184,"line_end":1184,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378753,"byte_end":378756,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378758,"byte_end":378832,"line_start":1186,"line_end":1186,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378834,"byte_end":378856,"line_start":1187,"line_end":1187,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378858,"byte_end":378867,"line_start":1188,"line_end":1188,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3450},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":380874,"byte_end":380881,"line_start":1268,"line_end":1268,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":3454},{"krate":0,"index":3455}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`rchunks`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](https://doc.rust-lang.org/core/slice/struct.RChunks.html)\n\n[`BitSlice`]: struct.BitSlice.html\n[`rchunks`]: struct.BitSlice.html#method.rchunks\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":380347,"byte_end":380838,"line_start":1252,"line_end":1266,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3489},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":384166,"byte_end":384176,"line_start":1383,"line_end":1383,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":3493},{"krate":0,"index":3494}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`rchunks_mut`] method on [bit slices].\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`rchunks_mut`]: struct.BitSlice.html#method.rchunks_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":383640,"byte_end":384137,"line_start":1367,"line_end":1381,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3523},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":386831,"byte_end":386843,"line_start":1483,"line_end":1483,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":3527},{"krate":0,"index":3528},{"krate":0,"index":3529}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the [`remainder`]\nfunction from the iterator.\n\nThis struct is created by the [`rchunks_exact`] method on [bit slices].\n\n# Original\n\n[`slice::RChunksExact`](https://doc.rust-lang.org/core/slice/struct.RChunksExact.html)\n\n[bit slices]: struct.BitSlice.html\n[`rchunks_exact`]: struct.BitSlice.html#method.rchunks_exact\n[`remainder`]: #method.remainder\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":386179,"byte_end":386795,"line_start":1465,"line_end":1481,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387763,"byte_end":387772,"line_start":1520,"line_end":1520,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387438,"byte_end":387509,"line_start":1512,"line_end":1512,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387511,"byte_end":387586,"line_start":1513,"line_end":1513,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387588,"byte_end":387597,"line_start":1514,"line_end":1514,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387599,"byte_end":387602,"line_start":1515,"line_end":1515,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387604,"byte_end":387618,"line_start":1516,"line_end":1516,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387620,"byte_end":387623,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](https://doc.rust-lang.org/core/slice/struct.RChunksExact.html#method.remainder)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387625,"byte_end":387743,"line_start":1518,"line_end":1518,"column_start":2,"column_end":120}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387745,"byte_end":387754,"line_start":1519,"line_end":1519,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3563},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":389986,"byte_end":390001,"line_start":1605,"line_end":1605,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`into_remainder`] function from the iterator.\n\nThis struct is created by the [`rchunks_exact_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RChunksExactMut`](https://doc.rust-lang.org/core/slice/struct.RChunksExactMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`into_remainder`]: #method.into_remainder\n[`rchunks_exact_mut`]: struct.BitSlice.html#method.rchunks_exact_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":389219,"byte_end":389957,"line_start":1583,"line_end":1603,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":391103,"byte_end":391117,"line_start":1647,"line_end":1647,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390629,"byte_end":390700,"line_start":1634,"line_end":1634,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390702,"byte_end":390777,"line_start":1635,"line_end":1635,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390779,"byte_end":390788,"line_start":1636,"line_end":1636,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390790,"byte_end":390793,"line_start":1637,"line_end":1637,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390795,"byte_end":390809,"line_start":1638,"line_end":1638,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390811,"byte_end":390814,"line_start":1639,"line_end":1639,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`](https://doc.rust-lang.org/core/slice/struct.RChunksExactMut.html#method.into_remainder)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390816,"byte_end":390950,"line_start":1640,"line_end":1640,"column_start":2,"column_end":136}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390952,"byte_end":390955,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390957,"byte_end":390978,"line_start":1642,"line_end":1642,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390980,"byte_end":390983,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390985,"byte_end":391059,"line_start":1644,"line_end":1644,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":391061,"byte_end":391083,"line_start":1645,"line_end":1645,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":391085,"byte_end":391094,"line_start":1646,"line_end":1646,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3623},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":395452,"byte_end":395457,"line_start":1853,"line_end":1853,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3630}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`split`] method on [bit slices].\n\n# Original\n\n[`slice::Split`](https://doc.rust-lang.org/core/slice/struct.Split.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`split`]: struct.BitSlice.html#method.split\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":394943,"byte_end":395423,"line_start":1835,"line_end":1851,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1285},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":397031,"byte_end":397039,"line_start":1922,"line_end":1922,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292}],"decl_id":null,"docs":" An iterator over the mutable subslices of the slice which are separated by\nbits that match `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices of the slice which are separated by\nbits that match `pred`.\n\nThis struct is created by the [`split_mut`] method on [bit slices].\n\n# Original\n\n[`slice::SplitMut`](https://doc.rust-lang.org/core/slice/struct.SplitMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`split_mut`]: struct.BitSlice.html#method.split_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":396500,"byte_end":397019,"line_start":1905,"line_end":1921,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3713},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":398752,"byte_end":398758,"line_start":1999,"line_end":1999,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.\n\nThis struct is created by the [`rsplit`] method on [bit slices].\n\n# Original\n\n[`slice::RSplit`](https://doc.rust-lang.org/core/slice/struct.RSplit.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplit`]: struct.BitSlice.html#method.rsplit\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":398202,"byte_end":398723,"line_start":1981,"line_end":1997,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1293},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":400195,"byte_end":400204,"line_start":2056,"line_end":2056,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.\n\nThis struct is created by the [`rsplit_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RSplit`](https://doc.rust-lang.org/core/slice/struct.RSplit.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplit_mut`]: struct.BitSlice.html#method.rsplit_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":399650,"byte_end":400183,"line_start":2039,"line_end":2055,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1303},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":401857,"byte_end":401863,"line_start":2119,"line_end":2119,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn`] method on [bit slices].\n\n# Original\n\n[`slice::SplitN`](https://doc.rust-lang.org/core/slice/struct.SplitN.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`splitn`]: struct.BitSlice.html#method.splitn\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":401323,"byte_end":401845,"line_start":2102,"line_end":2118,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1310},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":402619,"byte_end":402628,"line_start":2148,"line_end":2148,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1316}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [bit slices].\n\n# Original\n\n[`slice::SplitNMut`](https://doc.rust-lang.org/core/slice/struct.SplitNMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`splitn_mut`]: struct.BitSlice.html#method.splitn_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":402067,"byte_end":402607,"line_start":2131,"line_end":2147,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1317},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":403410,"byte_end":403417,"line_start":2178,"line_end":2178,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.\n\nThis struct is created by the [`rsplitn`] method on [bit slices].\n\n# Original\n\n[`slice::RSplitN`](https://doc.rust-lang.org/core/slice/struct.RSplitN.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplitn`]: struct.BitSlice.html#method.rsplitn\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":402835,"byte_end":403398,"line_start":2160,"line_end":2177,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1324},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":404215,"byte_end":404225,"line_start":2208,"line_end":2208,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1330}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.\n\nThis struct is created by the [`rsplitn_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RSplitNMut`](https://doc.rust-lang.org/core/slice/struct.RSplitNMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplitn_mut`]: struct.BitSlice.html#method.rsplitn_mut\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":403622,"byte_end":404203,"line_start":2190,"line_end":2207,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1405},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":419147,"byte_end":419153,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"name":"BitMut","qualname":"::slice::proxy::BitMut","value":"BitMut {  }","parent":null,"children":[{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412}],"decl_id":null,"docs":" Proxy reference type, equivalent to `&mut bool`.","sig":null,"attributes":[{"value":"* Proxy reference type, equivalent to `&mut bool`.\n\nThis is a two-word structure capable of correctly referring to a single bit in\na memory element. Because Rust does not permit reference-like objects in the\nsame manner that C++ does – `&T` and `&mut T` values are required to be\nimmediately-valid pointers, not objects – `bitvec` cannot manifest encoded\n`&mut Bit` values in the same way that it can manifest `&mut BitSlice`.\n\nInstead, this type implements `Deref` and `DerefMut` to an internal `bool` slot,\nand in `Drop` commits the value of that `bool` to the proxied bit in the source\n`BitSlice` from which the `BitMut` value was created. The combination of Rust’s\nown exclusion rules and the aliasing type system in this library ensure that a\n`BitMut` value has unique access to the bit it proxies, and the memory element\nit uses will not have destructive data races from other views.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitMut`.\n\n# Type Parameters\n\n- `O`: The `BitOrder` type parameter from the source `&mut BitSlice`.\n- `T`: The `BitStore` type parameter from the source `&mut BitSlice`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":417630,"byte_end":419135,"line_start":42,"line_end":85,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420871,"byte_end":420874,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"set","qualname":"<BitMut>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420269,"byte_end":420341,"line_start":131,"line_end":131,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420343,"byte_end":420346,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420348,"byte_end":420420,"line_start":133,"line_end":133,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420422,"byte_end":420496,"line_start":134,"line_end":134,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary `DerefMut` proxying,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420498,"byte_end":420574,"line_start":135,"line_end":135,"column_start":2,"column_end":78}},{"value":"/ but the latter depends on compiler optimization.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420576,"byte_end":420628,"line_start":136,"line_end":136,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420630,"byte_end":420633,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420635,"byte_end":420651,"line_start":138,"line_end":138,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420653,"byte_end":420656,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420658,"byte_end":420731,"line_start":140,"line_end":140,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420733,"byte_end":420791,"line_start":141,"line_end":141,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420793,"byte_end":420851,"line_start":142,"line_end":142,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":420853,"byte_end":420862,"line_start":143,"line_end":143,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1617},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":5430},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":4005},{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4043},{"krate":0,"index":4044},{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4069},{"krate":0,"index":1644},{"krate":0,"index":1655},{"krate":0,"index":1657}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides a `BitStore` trait, which mediates how handles access\nmemory and perform analysis on the regions they describe.\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":439593,"byte_end":439751,"line_start":1,"line_end":5,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1630},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442844,"byte_end":442852,"line_start":82,"line_end":82,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: seal::Sealed + Sized + Debug","parent":null,"children":[{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1642}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is implemented on the fundamental integers no wider than the target\nprocessor word size, their `Cell` wrappers, and (if present) their `Atomic`\nvariants. Users provide this type as a parameter to their data structures in\norder to inform the structure of how it may access the memory it describes.\n\nCurrently, `bitvec` is only tested on 32- and 64- bit architectures. This means\nthat `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`, but\n`u64` will only do so on 64-bit targets, and will be unavailable on 32-bit\ntargets. This is a necessary restriction of `bitvec` internals. Please comment\non [Issue #76](https://github.com/myrrlyn/bitvec/issues/76) if this affects you.\n\nSpecifically, this has the davantage that a `BitSlice<_, Cell<_>>` knows that it\nhas a view of memory that will not undergo concurrent modification. As such, it\ncan forego atomic accesses, and just use ordinary load/store instructions\nwithout fear of causing observable race conditions.\n\nThe associated types `Mem` and `Alias` allow implementors to know the register\nwidth of the memory they describe (`Mem`) and to know the aliasing status of the\nregion.\n\n# Generic Programming\n\nGeneric programming with associated types is *hard*, especially when using them,\nas in this trait, to implement a closed graph of relationships between types.\n\nFor example, this trait is implemented such that for any given type `T`,\n`T::Alias::Mem` == `T::Mem` == `T::NoAlias::Mem`, `T::Alias::Alias == T::Alias`,\nand `T::NoAlias::NoAlias == T::NoAlias`. Unfortunately, the Rust type system\ndoes not allow these relationships to be described, so generic programming that\nperforms type transitions will *rapidly* become uncomfortable to use.\n\nInternally, `bitvec` makes use of type-manipulation functions that are known to\nbe correct with respect to the implementations of `BitStore` in order to ease\nimplementation of library methods.\n\nYou are not expected to do significant programming that is generic over the\n`BitStore` memory parameter. When using a concrete type, the compiler will\ngladly reduce the abstract type associations into their instantiated selections,\nallowing monomorphized code to be *much* more convenient than generic.\n\nIf you have a use case that involves generic programming over this trait, and\nyou are encountering difficulties dealing with the type associations, please\nfile an issue asking for support in this area.\n\n# Supertraits\n\nThis trait has trait requirements that better express its behavior:\n\n- `Sealed` prevents it from being implemented by downstream libraries (`Sealed`\n  is a public trait in a private module, that only this crate can name).\n- `Sized` instructs the compiler that values of this type can be used as\n  immediates.\n- `Debug` informs the compiler that other structures using this trait bound can\n  correctly derive `Debug`.\n  **/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":439927,"byte_end":442833,"line_start":25,"line_end":81,"column_start":1,"column_end":6}}]},{"kind":"Type","id":{"krate":0,"index":1631},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442946,"byte_end":442949,"line_start":84,"line_end":84,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + Into<Self>;","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The register type that the implementor describes.\n","sig":null,"attributes":[{"value":"/ The register type that the implementor describes.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442886,"byte_end":442939,"line_start":83,"line_end":83,"column_start":2,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":1632},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443055,"byte_end":443061,"line_start":87,"line_end":87,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem>;","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The modifier type over `Self::Mem` used to perform memory access.\n","sig":null,"attributes":[{"value":"/ The modifier type over `Self::Mem` used to perform memory access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442979,"byte_end":443048,"line_start":86,"line_end":86,"column_start":2,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":1633},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443705,"byte_end":443710,"line_start":100,"line_end":100,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore + Radium<Item = Self::Mem>;","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor that performs alias-aware memory\n access.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor that performs alias-aware memory","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443094,"byte_end":443163,"line_start":89,"line_end":89,"column_start":2,"column_end":71}},{"value":"/ access.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443165,"byte_end":443176,"line_start":90,"line_end":90,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443178,"byte_end":443181,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ While the associated type always has the same `Mem` concrete type as","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443183,"byte_end":443255,"line_start":92,"line_end":92,"column_start":2,"column_end":74}},{"value":"/ `Self`, attempting to encode this requirement as `<Mem = Self::Mem>","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443257,"byte_end":443328,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/ causes Rust to enter an infinite recursion in the trait solver.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443330,"byte_end":443397,"line_start":94,"line_end":94,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443399,"byte_end":443402,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ Instead, the two `Radium` bounds inform the compiler that the `Alias` is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443404,"byte_end":443480,"line_start":96,"line_end":96,"column_start":2,"column_end":78}},{"value":"/ irradiant over both the current memory and the destination memory types,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443482,"byte_end":443558,"line_start":97,"line_end":97,"column_start":2,"column_end":78}},{"value":"/ allowing generic type algebra to resolve correctly even though the fact","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443560,"byte_end":443635,"line_start":98,"line_end":98,"column_start":2,"column_end":77}},{"value":"/ that `Radium` is only implemented once is not guaranteed.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443637,"byte_end":443698,"line_start":99,"line_end":99,"column_start":2,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":1634},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444022,"byte_end":444032,"line_start":108,"line_end":108,"column_start":7,"column_end":17},"name":"Threadsafe","qualname":"::store::BitStore::Threadsafe","value":"type Threadsafe;","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Marker for the thread safety of the implementor.","sig":null,"attributes":[{"value":"/ Marker for the thread safety of the implementor.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443751,"byte_end":443803,"line_start":102,"line_end":102,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443805,"byte_end":443808,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ This is necessary because `Cell<T: Send>` is `Send`, but `Cell` does not","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443810,"byte_end":443886,"line_start":104,"line_end":104,"column_start":2,"column_end":78}},{"value":"/ use synchronization instructions and thus cannot be used for aliased","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443888,"byte_end":443960,"line_start":105,"line_end":105,"column_start":2,"column_end":74}},{"value":"/ parallelized memory manipulation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":443962,"byte_end":443999,"line_start":106,"line_end":106,"column_start":2,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":1635},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444121,"byte_end":444138,"line_start":112,"line_end":112,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444036,"byte_end":444097,"line_start":110,"line_end":110,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":1637},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444270,"byte_end":444283,"line_start":117,"line_end":117,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444151,"byte_end":444220,"line_start":114,"line_end":114,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444222,"byte_end":444246,"line_start":115,"line_end":115,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1639},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444468,"byte_end":444478,"line_start":128,"line_end":128,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Copies a memory element into the caller’s local context.","sig":null,"attributes":[{"value":"/ Copies a memory element into the caller’s local context.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444296,"byte_end":444358,"line_start":119,"line_end":119,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444360,"byte_end":444363,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444365,"byte_end":444381,"line_start":121,"line_end":121,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444383,"byte_end":444386,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444388,"byte_end":444401,"line_start":123,"line_end":123,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444403,"byte_end":444406,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444408,"byte_end":444421,"line_start":125,"line_end":125,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444423,"byte_end":444426,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ A copy of the value at `*self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444428,"byte_end":444463,"line_start":127,"line_end":127,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444818,"byte_end":444825,"line_start":144,"line_end":144,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Fetches the value of one bit in a memory element.","sig":null,"attributes":[{"value":"/ Fetches the value of one bit in a memory element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444502,"byte_end":444555,"line_start":130,"line_end":130,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444557,"byte_end":444560,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444562,"byte_end":444583,"line_start":132,"line_end":132,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444585,"byte_end":444588,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ - `O`: A bit ordering.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444590,"byte_end":444616,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444618,"byte_end":444621,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444623,"byte_end":444639,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444641,"byte_end":444644,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444646,"byte_end":444659,"line_start":138,"line_end":138,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to read.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444661,"byte_end":444725,"line_start":139,"line_end":139,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444727,"byte_end":444730,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444732,"byte_end":444745,"line_start":141,"line_end":141,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444747,"byte_end":444750,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` corresponding to `index`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444752,"byte_end":444813,"line_start":143,"line_end":143,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445589,"byte_end":445597,"line_start":167,"line_end":167,"column_start":5,"column_end":13},"name":"get_bits","qualname":"::store::BitStore::get_bits","value":"pub fn get_bits(&Self, BitMask<Self::Mem>) -> Self::Mem","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Fetches any number of bits from a memory element.","sig":null,"attributes":[{"value":"/ Fetches any number of bits from a memory element.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":444967,"byte_end":445020,"line_start":149,"line_end":149,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445022,"byte_end":445025,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445027,"byte_end":445101,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445103,"byte_end":445178,"line_start":152,"line_end":152,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445180,"byte_end":445242,"line_start":153,"line_end":153,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445244,"byte_end":445247,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445249,"byte_end":445265,"line_start":155,"line_end":155,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445267,"byte_end":445270,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445272,"byte_end":445285,"line_start":157,"line_end":157,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask of bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445287,"byte_end":445363,"line_start":158,"line_end":158,"column_start":2,"column_end":78}},{"value":"/   to read.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445365,"byte_end":445379,"line_start":159,"line_end":159,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445381,"byte_end":445384,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445386,"byte_end":445399,"line_start":161,"line_end":161,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445401,"byte_end":445404,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ A copy of the memory element at `*self`, with all bits not selected (set","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445406,"byte_end":445482,"line_start":163,"line_end":163,"column_start":2,"column_end":78}},{"value":"/ to `0`) in `mask` erased and all bits selected (set to `1`) in `mask`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445484,"byte_end":445557,"line_start":164,"line_end":164,"column_start":2,"column_end":75}},{"value":"/ preserved.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445559,"byte_end":445573,"line_start":165,"line_end":165,"column_start":2,"column_end":16}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":445575,"byte_end":445584,"line_start":166,"line_end":166,"column_start":2,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":1658},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448722,"byte_end":448728,"line_start":292,"line_end":292,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448354,"byte_end":448424,"line_start":285,"line_end":285,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448426,"byte_end":448429,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448431,"byte_end":448505,"line_start":287,"line_end":287,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448507,"byte_end":448583,"line_start":288,"line_end":288,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448585,"byte_end":448649,"line_start":289,"line_end":289,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448651,"byte_end":448694,"line_start":290,"line_end":290,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1659},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1682},{"krate":0,"index":1691},{"krate":0,"index":1700},{"krate":0,"index":4070},{"krate":0,"index":4080},{"krate":0,"index":4090},{"krate":0,"index":4100},{"krate":0,"index":4110},{"krate":0,"index":4120},{"krate":0,"index":4130},{"krate":0,"index":4140},{"krate":0,"index":4150},{"krate":0,"index":4160},{"krate":0,"index":4170},{"krate":0,"index":4180},{"krate":0,"index":4190},{"krate":0,"index":4200},{"krate":0,"index":4210},{"krate":0,"index":4220},{"krate":0,"index":4230},{"krate":0,"index":4240},{"krate":0,"index":4250},{"krate":0,"index":4260},{"krate":0,"index":4270},{"krate":0,"index":4280},{"krate":0,"index":4290},{"krate":0,"index":4300},{"krate":0,"index":4310},{"krate":0,"index":4320},{"krate":0,"index":4330},{"krate":0,"index":4340},{"krate":0,"index":4350},{"krate":0,"index":4360},{"krate":0,"index":4370},{"krate":0,"index":4380},{"krate":0,"index":4390},{"krate":0,"index":4400},{"krate":0,"index":4410},{"krate":0,"index":4420},{"krate":0,"index":4430},{"krate":0,"index":4440},{"krate":0,"index":4450},{"krate":0,"index":4460},{"krate":0,"index":4470},{"krate":0,"index":4480},{"krate":0,"index":4490},{"krate":0,"index":4500},{"krate":0,"index":4510},{"krate":0,"index":4520},{"krate":0,"index":4530},{"krate":0,"index":4540},{"krate":0,"index":4550},{"krate":0,"index":4560},{"krate":0,"index":4570},{"krate":0,"index":4580},{"krate":0,"index":4590},{"krate":0,"index":4600},{"krate":0,"index":4610},{"krate":0,"index":4620},{"krate":0,"index":4630},{"krate":0,"index":4640},{"krate":0,"index":4650},{"krate":0,"index":4660},{"krate":0,"index":4670},{"krate":0,"index":4680},{"krate":0,"index":4690},{"krate":0,"index":4700},{"krate":0,"index":1711},{"krate":0,"index":1715},{"krate":0,"index":1719},{"krate":0,"index":1724}],"decl_id":null,"docs":" View constructors for memory regions.","sig":null,"attributes":[{"value":"* View constructors for memory regions.\n\nThe `&BitSlice` type is a referential view over existing memory. The inherent\nconstructors are awkward to call, as they require function syntax rather than\nmethod syntax, and must provide a token for the memory type even though this is\nprovided by the prior binding.\n\nThis module provides a view trait, `ViewBits`, which provides `BitSlice`\nconstructors available in method-call syntax with only ordering type parameters.\n\nIn addition, the traits `AsBits` and `AsBitsMut` are analogues of [`AsRef`] and\n[`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitStore]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because `ViewBits` combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsMut`]: https://doc.rust-lang.org/core/convert/trait.AsMut.html\n[`AsRef`]: https://doc.rust-lang.org/core/convert/trait.AsRef.html\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":450828,"byte_end":452035,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1669},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452760,"byte_end":452767,"line_start":49,"line_end":49,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1681}],"decl_id":null,"docs":" Views a type that can store bits as a bit-slice.","sig":null,"attributes":[{"value":"* Views a type that can store bits as a bit-slice.\n\nThis trait is implemented on all `T: BitStore` types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitStore; 0 ..= 32]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a bit-storage type that can be viewed with this\ntrait, then you can implement this trait by forwarding to the interior view.\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452182,"byte_end":452749,"line_start":37,"line_end":48,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":1670},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452828,"byte_end":452833,"line_start":51,"line_end":51,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":" The access-control type of the storage region.\n","sig":null,"attributes":[{"value":"/ The access-control type of the storage region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452771,"byte_end":452821,"line_start":50,"line_end":50,"column_start":2,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":1671},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452909,"byte_end":452912,"line_start":54,"line_end":54,"column_start":7,"column_end":10},"name":"Mem","qualname":"::view::BitView::Mem","value":"type Mem: BitMemory;","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":" The underlying register type of the storage region.\n","sig":null,"attributes":[{"value":"/ The underlying register type of the storage region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452847,"byte_end":452902,"line_start":53,"line_end":53,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453217,"byte_end":453226,"line_start":69,"line_end":69,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":" Views a memory region as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views a memory region as a `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452927,"byte_end":452969,"line_start":56,"line_end":56,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452971,"byte_end":452974,"line_start":57,"line_end":57,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452976,"byte_end":452997,"line_start":58,"line_end":58,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":452999,"byte_end":453002,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453004,"byte_end":453052,"line_start":60,"line_end":60,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453054,"byte_end":453057,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453059,"byte_end":453075,"line_start":62,"line_end":62,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453077,"byte_end":453080,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453082,"byte_end":453135,"line_start":64,"line_end":64,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453137,"byte_end":453140,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453142,"byte_end":453155,"line_start":66,"line_end":66,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453157,"byte_end":453160,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453162,"byte_end":453212,"line_start":68,"line_end":68,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453446,"byte_end":453450,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"bits","qualname":"::view::BitView::bits","value":"pub fn bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453304,"byte_end":453321,"line_start":73,"line_end":73,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453323,"byte_end":453353,"line_start":74,"line_end":74,"column_start":2,"column_end":32}},{"value":"deprecated(since = \"0.18.0\", note =\n             \"The method is renamed to `.view_bits`\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453355,"byte_end":453441,"line_start":75,"line_end":78,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453850,"byte_end":453863,"line_start":97,"line_end":97,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable `BitSlice`.","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453540,"byte_end":453590,"line_start":84,"line_end":84,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453592,"byte_end":453595,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453597,"byte_end":453618,"line_start":86,"line_end":86,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453620,"byte_end":453623,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453625,"byte_end":453673,"line_start":88,"line_end":88,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453675,"byte_end":453678,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453680,"byte_end":453696,"line_start":90,"line_end":90,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453698,"byte_end":453701,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual mutable bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453703,"byte_end":453764,"line_start":92,"line_end":92,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453766,"byte_end":453769,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453771,"byte_end":453784,"line_start":94,"line_end":94,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453786,"byte_end":453789,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453791,"byte_end":453845,"line_start":96,"line_end":96,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454095,"byte_end":454103,"line_start":107,"line_end":107,"column_start":5,"column_end":13},"name":"bits_mut","qualname":"::view::BitView::bits_mut","value":"pub fn bits_mut<O>(&mut Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453949,"byte_end":453966,"line_start":101,"line_end":101,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":453968,"byte_end":453998,"line_start":102,"line_end":102,"column_start":2,"column_end":32}},{"value":"deprecated(since = \"0.18.0\", note =\n             \"The method is renamed to `.view_bits_mut`\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454000,"byte_end":454090,"line_start":103,"line_end":106,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454290,"byte_end":454300,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"name":"const_bits","qualname":"::view::BitView::const_bits","value":"pub fn const_bits() -> usize where Self: Sized","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":" Produces the number of bits that the implementing type can hold.\n","sig":null,"attributes":[{"value":"/ Produces the number of bits that the implementing type can hold.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454201,"byte_end":454269,"line_start":112,"line_end":112,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454511,"byte_end":454521,"line_start":121,"line_end":121,"column_start":5,"column_end":15},"name":"const_elts","qualname":"::view::BitView::const_elts","value":"pub fn const_elts() -> usize where Self: Sized","parent":{"krate":0,"index":1669},"children":[],"decl_id":null,"docs":" Produces the number of memory elements that the implementing type holds.\n","sig":null,"attributes":[{"value":"/ Produces the number of memory elements that the implementing type holds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454414,"byte_end":454490,"line_start":119,"line_end":119,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":1711},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458218,"byte_end":458224,"line_start":283,"line_end":283,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":1713}],"decl_id":null,"docs":" Views a region as an immutable bit-slice only.","sig":null,"attributes":[{"value":"* Views a region as an immutable bit-slice only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a bit-slice view\nwith either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nunsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: https://doc.rust-lang.org/core/convert/trait.AsRef.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":457239,"byte_end":458207,"line_start":257,"line_end":282,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458537,"byte_end":458544,"line_start":299,"line_end":299,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":1711},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458249,"byte_end":458295,"line_start":286,"line_end":286,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458297,"byte_end":458300,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458302,"byte_end":458323,"line_start":288,"line_end":288,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458325,"byte_end":458328,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458330,"byte_end":458378,"line_start":290,"line_end":290,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458380,"byte_end":458383,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458385,"byte_end":458401,"line_start":292,"line_end":292,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458403,"byte_end":458406,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a bit-slice view.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458408,"byte_end":458468,"line_start":294,"line_end":294,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458470,"byte_end":458473,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458475,"byte_end":458488,"line_start":296,"line_end":296,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458490,"byte_end":458493,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458495,"byte_end":458532,"line_start":298,"line_end":298,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":1715},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459563,"byte_end":459572,"line_start":329,"line_end":329,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":1717}],"decl_id":null,"docs":" Views a region as a mutable bit-slice.","sig":null,"attributes":[{"value":"* Views a region as a mutable bit-slice.\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a bit-slice\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nunsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: https://doc.rust-lang.org/core/convert/trait.AsMut.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":458597,"byte_end":459552,"line_start":303,"line_end":328,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459884,"byte_end":459895,"line_start":345,"line_end":345,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":1715},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459597,"byte_end":459641,"line_start":332,"line_end":332,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459643,"byte_end":459646,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459648,"byte_end":459669,"line_start":334,"line_end":334,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459671,"byte_end":459674,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459676,"byte_end":459724,"line_start":336,"line_end":336,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459726,"byte_end":459729,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459731,"byte_end":459747,"line_start":338,"line_end":338,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459749,"byte_end":459752,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a bit-slice view.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459754,"byte_end":459818,"line_start":340,"line_end":340,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459820,"byte_end":459823,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459825,"byte_end":459838,"line_start":342,"line_end":342,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459840,"byte_end":459843,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":459845,"byte_end":459879,"line_start":344,"line_end":344,"column_start":2,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":1729},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":5454},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1749},{"krate":0,"index":1767},{"krate":0,"index":1792},{"krate":0,"index":1876}],"decl_id":null,"docs":" A dynamically-allocated, fixed-size, buffer containing a `BitSlice` region.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6327,"byte_end":6352,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated, fixed-size, buffer containing a `BitSlice` region.\n\nYou can read the standard library’s [`alloc::boxed` module documentation][std]\nhere.\n\nThis module defines the [`BitBox`] buffer, and all of its associated support\ncode.\n\n`BitBox` is equivalent to `Box<[bool]>`, in its operation and in its\nrelationship to the `BitSlice` and [`BitVec`] types. Most of the interesting\nwork to be done on a bit-sequence is implemented in `BitSlice`, to which\n`BitBox` dereferences, and the box container itself only exists to maintain\nwonership and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\nThere is almost never a reason to use this type, as it is a mixture of\n[`BitArray`]’s fixed width and [`BitVec`]’s heap allocation. You should only use\nit when you have a bit-sequence whose width is either unknowable at compile-time\nor inexpressable in `BitArray`, and are constructing the sequence in a `BitVec`\nbefore freezing it.\n\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitBox`]: struct.BitBox.html\n[`BitSlice`]: ../slice/struct.BitSlice.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[std]: https://doc.rust-lang.org/alloc/boxed\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":460419,"byte_end":461602,"line_start":1,"line_end":27,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":461604,"byte_end":461630,"line_start":29,"line_end":29,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1745},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":464922,"byte_end":464928,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"BitBox","qualname":"::boxed::BitBox","value":"BitBox {  }","parent":null,"children":[{"krate":0,"index":1748}],"decl_id":null,"docs":" A frozen heap-allocated buffer of individual bits.","sig":null,"attributes":[{"value":"* A frozen heap-allocated buffer of individual bits.\n\nThis is essentially a [`BitVec`] that has frozen its allocation, and given up\nthe ability to change size. It is analagous to `Box<[bool]>`, and is written to\nbe as close as possible to drop-in replacable for it. This type contains almost\nno interesting behavior in its own right; it dereferences to [`BitSlice`] to\nmanipulate its contents, and it converts to and from `BitVec` for allocation\ncontrol.\n\nIf you know the length of your bit sequence at compile-time, and it is\nexpressible within the limits of [`BitArray`], you should prefer that type\ninstead. Large `BitArray`s can be `Box`ed normally as desired.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Box<[T]>`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html)\n\n# API Differences\n\nThe buffer type `Box<[bool]>` has no type parameters. `BitBox<O, T>` has the\nsame two type parameters as `BitSlice<O, T>`. Otherwise, `BitBox` is able to\nimplement the full API surface of `Box<[bool]>`.\n\n# Behavior\n\nBecause `BitBox` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some `BitSlice` behavior to be faster or more efficient.\n\n# Type Parameters\n\nThis takes the same two type parameters, `O: BitOrder` and `T: BitStore`, as\n`BitSlice`.\n\n# Safety\n\nLike `BitSlice`, `BitBox` is exactly equal in size to `Box<[bool]>`, and is also\nabsolutely representation-incompatible with it. You must never attempt to\ntype-cast between `Box<[bool]>` and `BitBox` in any way, nor attempt to modify\nthe memory value of a `BitBox` handle. Doing so will cause allocator and memory\nerrors in your program, likely inducing a panic.\n\nEverything in the `BitBox` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent items in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nIteration over the buffer is governed by the `BitSlice` characteristics on the\ntype parameter. You are generally better off using larger types when your buffer\nis a data collection rather than a specific I/O protocol buffer.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitbox!`] macro will\nconstruct an appropriate `BitSlice` buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitSlice`]: ../slice/struct.BitSlice.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[`bitbox!`]: ../macro.bitbox.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":461875,"byte_end":464889,"line_start":53,"line_end":126,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":464890,"byte_end":464910,"line_start":127,"line_end":127,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465795,"byte_end":465808,"line_start":164,"line_end":164,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitBox<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clones a `&BitSlice` into a `BitVec`.","sig":null,"attributes":[{"value":"/ Clones a `&BitSlice` into a `BitVec`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465156,"byte_end":465197,"line_start":142,"line_end":142,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465199,"byte_end":465202,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465204,"byte_end":465218,"line_start":144,"line_end":144,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465220,"byte_end":465223,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ [`<Box<T: Clone> as Clone>::clone`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-Clone)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465225,"byte_end":465330,"line_start":146,"line_end":146,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465332,"byte_end":465335,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465337,"byte_end":465350,"line_start":148,"line_end":148,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465352,"byte_end":465355,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ This performs a direct element-wise copy from the source slice to the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465357,"byte_end":465430,"line_start":150,"line_end":150,"column_start":2,"column_end":75}},{"value":"/ newly-allocated buffer, then sets the box to have the same starting bit","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465432,"byte_end":465507,"line_start":151,"line_end":151,"column_start":2,"column_end":77}},{"value":"/ as the slice did. This allows for faster behavior.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465509,"byte_end":465563,"line_start":152,"line_end":152,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465565,"byte_end":465568,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465570,"byte_end":465584,"line_start":154,"line_end":154,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465586,"byte_end":465589,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465591,"byte_end":465602,"line_start":156,"line_end":156,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465604,"byte_end":465631,"line_start":157,"line_end":157,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465633,"byte_end":465636,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465638,"byte_end":465683,"line_start":159,"line_end":159,"column_start":2,"column_end":47}},{"value":"/ let bb = BitBox::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465685,"byte_end":465733,"line_start":160,"line_end":160,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bb, bits[2 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465735,"byte_end":465766,"line_start":161,"line_end":161,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465768,"byte_end":465775,"line_start":162,"line_end":162,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465777,"byte_end":465786,"line_start":163,"line_end":163,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1753},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466575,"byte_end":466591,"line_start":196,"line_end":196,"column_start":9,"column_end":25},"name":"from_boxed_slice","qualname":"<BitBox<O, T>>::from_boxed_slice","value":"pub fn from_boxed_slice(Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465890,"byte_end":465966,"line_start":168,"line_end":168,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465968,"byte_end":465971,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465973,"byte_end":465989,"line_start":170,"line_end":170,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465991,"byte_end":465994,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: A boxed slice to view as bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465996,"byte_end":466041,"line_start":172,"line_end":172,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466043,"byte_end":466046,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466048,"byte_end":466061,"line_start":174,"line_end":174,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466063,"byte_end":466066,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ A `BitBox` over the `boxed` buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466068,"byte_end":466107,"line_start":176,"line_end":176,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466109,"byte_end":466112,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466114,"byte_end":466126,"line_start":178,"line_end":178,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466128,"byte_end":466131,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ This panics if `boxed` is too long to convert into a `BitBox`. See","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466133,"byte_end":466203,"line_start":180,"line_end":180,"column_start":2,"column_end":72}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466205,"byte_end":466232,"line_start":181,"line_end":181,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466234,"byte_end":466237,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466239,"byte_end":466253,"line_start":183,"line_end":183,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466255,"byte_end":466258,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466260,"byte_end":466271,"line_start":185,"line_end":185,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466273,"byte_end":466300,"line_start":186,"line_end":186,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466302,"byte_end":466305,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466307,"byte_end":466351,"line_start":188,"line_end":188,"column_start":2,"column_end":46}},{"value":"/ let bb = BitBox::<LocalBits, _>::from_boxed_slice(boxed);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466353,"byte_end":466414,"line_start":189,"line_end":189,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bb, bits![0; 32]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466416,"byte_end":466449,"line_start":190,"line_end":190,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466451,"byte_end":466458,"line_start":191,"line_end":191,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466460,"byte_end":466463,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466465,"byte_end":466492,"line_start":193,"line_end":193,"column_start":2,"column_end":29}},{"value":"/ ../slice/struct.BitSlice.html#associatedconstant.MAX_ELTS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466494,"byte_end":466555,"line_start":194,"line_end":194,"column_start":2,"column_end":63}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466557,"byte_end":466566,"line_start":195,"line_end":195,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467622,"byte_end":467642,"line_start":228,"line_end":228,"column_start":9,"column_end":29},"name":"try_from_boxed_slice","qualname":"<BitBox<O, T>>::try_from_boxed_slice","value":"pub fn try_from_boxed_slice(Box<[T]>) -> Result<Self, Box<[T]>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466725,"byte_end":466800,"line_start":201,"line_end":201,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466802,"byte_end":466805,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466807,"byte_end":466883,"line_start":203,"line_end":203,"column_start":2,"column_end":78}},{"value":"/ as a bit-box. Because `Box<[T]>` can be longer than `BitBox`es, this is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466885,"byte_end":466960,"line_start":204,"line_end":204,"column_start":2,"column_end":77}},{"value":"/ a fallible method, and the original box will be returned if it cannot be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":466962,"byte_end":467038,"line_start":205,"line_end":205,"column_start":2,"column_end":78}},{"value":"/ converted.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467040,"byte_end":467054,"line_start":206,"line_end":206,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467056,"byte_end":467059,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467061,"byte_end":467077,"line_start":208,"line_end":208,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467079,"byte_end":467082,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: Some boxed slice of memory, to be viewed as bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467084,"byte_end":467148,"line_start":210,"line_end":210,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467150,"byte_end":467153,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467155,"byte_end":467168,"line_start":212,"line_end":212,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467170,"byte_end":467173,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ If `boxed` is short enough to be viewed as a `BitBox`, then this returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467175,"byte_end":467251,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ a `BitBox` over the `boxed` buffer. If `boxed` is too long, then this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467253,"byte_end":467326,"line_start":215,"line_end":215,"column_start":2,"column_end":75}},{"value":"/ returns `boxed` unmodified.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467328,"byte_end":467359,"line_start":216,"line_end":216,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467361,"byte_end":467364,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467366,"byte_end":467380,"line_start":218,"line_end":218,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467382,"byte_end":467385,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467387,"byte_end":467398,"line_start":220,"line_end":220,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467400,"byte_end":467427,"line_start":221,"line_end":221,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467429,"byte_end":467432,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467434,"byte_end":467478,"line_start":223,"line_end":223,"column_start":2,"column_end":46}},{"value":"/ let bb = BitBox::<LocalBits, _>::try_from_boxed_slice(boxed).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467480,"byte_end":467554,"line_start":224,"line_end":224,"column_start":2,"column_end":76}},{"value":"/ assert_eq!(bb[..], bits![0; 32]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467556,"byte_end":467593,"line_start":225,"line_end":225,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467595,"byte_end":467602,"line_start":226,"line_end":226,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":467604,"byte_end":467613,"line_start":227,"line_end":227,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468531,"byte_end":468547,"line_start":271,"line_end":271,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitBox<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice back into an ordinary slice of memory elements.","sig":null,"attributes":[{"value":"/ Converts the slice back into an ordinary slice of memory elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468012,"byte_end":468082,"line_start":248,"line_end":248,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468084,"byte_end":468087,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ This does not affect the slice’s buffer, only the handle used to control","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468089,"byte_end":468167,"line_start":250,"line_end":250,"column_start":2,"column_end":78}},{"value":"/ it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468169,"byte_end":468176,"line_start":251,"line_end":251,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468178,"byte_end":468181,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468183,"byte_end":468199,"line_start":253,"line_end":253,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468201,"byte_end":468204,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468206,"byte_end":468218,"line_start":255,"line_end":255,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468220,"byte_end":468223,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468225,"byte_end":468238,"line_start":257,"line_end":257,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468240,"byte_end":468243,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ An ordinary boxed slice containing all of the bit-slice’s memory buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468245,"byte_end":468323,"line_start":259,"line_end":259,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468325,"byte_end":468328,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468330,"byte_end":468344,"line_start":261,"line_end":261,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468346,"byte_end":468349,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468351,"byte_end":468362,"line_start":263,"line_end":263,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468364,"byte_end":468391,"line_start":264,"line_end":264,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468393,"byte_end":468396,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 5];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468398,"byte_end":468425,"line_start":266,"line_end":266,"column_start":2,"column_end":29}},{"value":"/ let boxed = bb.into_boxed_slice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468427,"byte_end":468465,"line_start":267,"line_end":267,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(boxed[..], [0][..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468467,"byte_end":468502,"line_start":268,"line_end":268,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468504,"byte_end":468511,"line_start":269,"line_end":269,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468513,"byte_end":468522,"line_start":270,"line_end":270,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469100,"byte_end":469111,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitBox<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the buffer’s contents as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the buffer’s contents as a `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468663,"byte_end":468713,"line_start":276,"line_end":276,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468715,"byte_end":468718,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&bb[..]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468720,"byte_end":468756,"line_start":278,"line_end":278,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468758,"byte_end":468761,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468763,"byte_end":468777,"line_start":280,"line_end":280,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468779,"byte_end":468782,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsRef<[T]>>::as_ref`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsRef%3CT%3E)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468784,"byte_end":468897,"line_start":282,"line_end":282,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468899,"byte_end":468902,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468904,"byte_end":468918,"line_start":284,"line_end":284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468920,"byte_end":468923,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468925,"byte_end":468936,"line_start":286,"line_end":286,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468938,"byte_end":468965,"line_start":287,"line_end":287,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468967,"byte_end":468970,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":468972,"byte_end":469005,"line_start":289,"line_end":289,"column_start":2,"column_end":35}},{"value":"/ let bits = bb.as_bitslice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469007,"byte_end":469039,"line_start":290,"line_end":290,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469041,"byte_end":469048,"line_start":291,"line_end":291,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469050,"byte_end":469059,"line_start":292,"line_end":292,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469061,"byte_end":469091,"line_start":293,"line_end":293,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1757},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469648,"byte_end":469663,"line_start":317,"line_end":317,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitBox<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469179,"byte_end":469233,"line_start":298,"line_end":298,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469235,"byte_end":469238,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469240,"byte_end":469272,"line_start":300,"line_end":300,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469274,"byte_end":469277,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469279,"byte_end":469293,"line_start":302,"line_end":302,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469295,"byte_end":469298,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsMut<[T]>>::as_mut`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsMut%3CT%3E)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469300,"byte_end":469413,"line_start":304,"line_end":304,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469415,"byte_end":469418,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469420,"byte_end":469434,"line_start":306,"line_end":306,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469436,"byte_end":469439,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469441,"byte_end":469452,"line_start":308,"line_end":308,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469454,"byte_end":469481,"line_start":309,"line_end":309,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469483,"byte_end":469486,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469488,"byte_end":469525,"line_start":311,"line_end":311,"column_start":2,"column_end":39}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469527,"byte_end":469563,"line_start":312,"line_end":312,"column_start":2,"column_end":38}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469565,"byte_end":469587,"line_start":313,"line_end":313,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469589,"byte_end":469596,"line_start":314,"line_end":314,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469598,"byte_end":469607,"line_start":315,"line_end":315,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469609,"byte_end":469639,"line_start":316,"line_end":316,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470358,"byte_end":470366,"line_start":344,"line_end":344,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitBox<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts an element slice containing the entire box.","sig":null,"attributes":[{"value":"/ Extracts an element slice containing the entire box.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469739,"byte_end":469795,"line_start":321,"line_end":321,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469797,"byte_end":469800,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469802,"byte_end":469816,"line_start":323,"line_end":323,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469818,"byte_end":469821,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsRef<[T]>>::as_ref`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsRef%3CT%3E)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469823,"byte_end":469936,"line_start":325,"line_end":325,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469938,"byte_end":469941,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469943,"byte_end":469957,"line_start":327,"line_end":327,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469959,"byte_end":469962,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitslice`] for a `&BitBox -> &BitSlice` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":469964,"byte_end":470027,"line_start":329,"line_end":329,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470029,"byte_end":470032,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470034,"byte_end":470048,"line_start":331,"line_end":331,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470050,"byte_end":470053,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470055,"byte_end":470066,"line_start":333,"line_end":333,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470068,"byte_end":470099,"line_start":334,"line_end":334,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470101,"byte_end":470128,"line_start":335,"line_end":335,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470130,"byte_end":470161,"line_start":336,"line_end":336,"column_start":2,"column_end":33}},{"value":"/ let buffer = bitbox![Msb0, u8; 0, 1, 0, 1, 1, 0, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470163,"byte_end":470222,"line_start":337,"line_end":337,"column_start":2,"column_end":61}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470224,"byte_end":470273,"line_start":338,"line_end":338,"column_start":2,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470275,"byte_end":470282,"line_start":339,"line_end":339,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470284,"byte_end":470291,"line_start":340,"line_end":340,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470293,"byte_end":470296,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: #method.as_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470298,"byte_end":470338,"line_start":342,"line_end":342,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470340,"byte_end":470349,"line_start":343,"line_end":343,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471169,"byte_end":471181,"line_start":373,"line_end":373,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitBox<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire box.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire box.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470537,"byte_end":470584,"line_start":350,"line_end":350,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470586,"byte_end":470589,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470591,"byte_end":470605,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470607,"byte_end":470610,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ [`<Box<[T]> as AsMut<[T]>>::as_mut`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#impl-AsMut%3CT%3E)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470612,"byte_end":470725,"line_start":354,"line_end":354,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470727,"byte_end":470730,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470732,"byte_end":470746,"line_start":356,"line_end":356,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470748,"byte_end":470751,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitslice`] for a `&mut BitBox -> &mut BitSlice` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470753,"byte_end":470828,"line_start":358,"line_end":358,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470830,"byte_end":470833,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470835,"byte_end":470849,"line_start":360,"line_end":360,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470851,"byte_end":470854,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470856,"byte_end":470867,"line_start":362,"line_end":362,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470869,"byte_end":470900,"line_start":363,"line_end":363,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470902,"byte_end":470929,"line_start":364,"line_end":364,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470931,"byte_end":470961,"line_start":365,"line_end":365,"column_start":2,"column_end":32}},{"value":"/ let mut buffer = bitbox![Msb0, u8; 0; 24];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":470963,"byte_end":471009,"line_start":366,"line_end":366,"column_start":2,"column_end":48}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471011,"byte_end":471076,"line_start":367,"line_end":367,"column_start":2,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471078,"byte_end":471085,"line_start":368,"line_end":368,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471087,"byte_end":471094,"line_start":369,"line_end":369,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471096,"byte_end":471099,"line_start":370,"line_end":370,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitslice`]: #method.as_mut_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471101,"byte_end":471149,"line_start":371,"line_end":371,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471151,"byte_end":471160,"line_start":372,"line_end":372,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":472142,"byte_end":472159,"line_start":402,"line_end":402,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitBox<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the vector to a fixed value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471362,"byte_end":471425,"line_start":379,"line_end":379,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471427,"byte_end":471430,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471432,"byte_end":471506,"line_start":381,"line_end":381,"column_start":2,"column_end":76}},{"value":"/ the `self.as_bitslice()` view so that they have a consistent value. This","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471508,"byte_end":471584,"line_start":382,"line_end":382,"column_start":2,"column_end":78}},{"value":"/ can be used to zero the uninitialized memory so that when viewed as a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471586,"byte_end":471659,"line_start":383,"line_end":383,"column_start":2,"column_end":75}},{"value":"/ raw memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471661,"byte_end":471737,"line_start":384,"line_end":384,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471739,"byte_end":471742,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471744,"byte_end":471758,"line_start":386,"line_end":386,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471760,"byte_end":471763,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471765,"byte_end":471776,"line_start":388,"line_end":388,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471778,"byte_end":471805,"line_start":389,"line_end":389,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471807,"byte_end":471810,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ let mut bb = BitBox::new(&220u8.view_bits::<Lsb0>()[.. 4]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471812,"byte_end":471875,"line_start":391,"line_end":391,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(bb.count_ones(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471877,"byte_end":471912,"line_start":392,"line_end":392,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bb.as_slice(), &[220u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471914,"byte_end":471954,"line_start":393,"line_end":393,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471956,"byte_end":471959,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471961,"byte_end":471993,"line_start":395,"line_end":395,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bb.as_slice(), &[12u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":471995,"byte_end":472034,"line_start":396,"line_end":396,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":472036,"byte_end":472039,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":472041,"byte_end":472072,"line_start":398,"line_end":398,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bb.as_slice(), &[!3u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":472074,"byte_end":472113,"line_start":399,"line_end":399,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":472115,"byte_end":472122,"line_start":400,"line_end":400,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":472124,"byte_end":472133,"line_start":401,"line_end":401,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474833,"byte_end":474836,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<BitBox<O, T>>::new","value":"pub fn new(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates memory on the heap and copies `x` into it.","sig":null,"attributes":[{"value":"/ Allocates memory on the heap and copies `x` into it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474147,"byte_end":474203,"line_start":25,"line_end":25,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474205,"byte_end":474208,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ This doesn’t actually allocate if `x` is zero-length.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474210,"byte_end":474269,"line_start":27,"line_end":27,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474271,"byte_end":474274,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474276,"byte_end":474290,"line_start":29,"line_end":29,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474292,"byte_end":474295,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ [`Box::new`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.new)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474297,"byte_end":474379,"line_start":31,"line_end":31,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474381,"byte_end":474384,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474386,"byte_end":474407,"line_start":33,"line_end":33,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474409,"byte_end":474412,"line_start":34,"line_end":34,"column_start":2,"column_end":5}},{"value":"/ `Box::<[T]>::new` does not exist, because `new` cannot take unsized","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474414,"byte_end":474485,"line_start":35,"line_end":35,"column_start":2,"column_end":73}},{"value":"/ types by value. Instead, this takes a slice reference, and boxes the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474487,"byte_end":474559,"line_start":36,"line_end":36,"column_start":2,"column_end":74}},{"value":"/ referent slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474561,"byte_end":474580,"line_start":37,"line_end":37,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474582,"byte_end":474585,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474587,"byte_end":474601,"line_start":39,"line_end":39,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474603,"byte_end":474606,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474608,"byte_end":474619,"line_start":41,"line_end":41,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474621,"byte_end":474648,"line_start":42,"line_end":42,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474650,"byte_end":474653,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ let boxed = BitBox::new(bits![0; 5]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474655,"byte_end":474696,"line_start":44,"line_end":44,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474698,"byte_end":474705,"line_start":45,"line_end":45,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474707,"byte_end":474724,"line_start":46,"line_end":46,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474726,"byte_end":474756,"line_start":47,"line_end":47,"column_start":2,"column_end":32}},{"value":"deprecated(since = \"0.18.0\", note = \"Prefer `::from_bitslice`\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474758,"byte_end":474824,"line_start":48,"line_end":48,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475319,"byte_end":475322,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"pin","qualname":"<BitBox<O, T>>::pin","value":"pub fn pin(&BitSlice<O, T>) -> Pin<Self> where O: Unpin, T: Unpin","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<BitBox<O, T>>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<BitBox<O, T>>`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474897,"byte_end":474938,"line_start":53,"line_end":53,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474940,"byte_end":474943,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` is always `Unpin`, so this has no actual immobility effect.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474945,"byte_end":475019,"line_start":55,"line_end":55,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475021,"byte_end":475024,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475026,"byte_end":475040,"line_start":57,"line_end":57,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475042,"byte_end":475045,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ [`Box::pin`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.pin)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475047,"byte_end":475129,"line_start":59,"line_end":59,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475131,"byte_end":475134,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475136,"byte_end":475157,"line_start":61,"line_end":61,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475159,"byte_end":475162,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ As with `::new`, this only exists on `Box` when `T` is not unsized. This","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475164,"byte_end":475240,"line_start":63,"line_end":63,"column_start":2,"column_end":78}},{"value":"/ takes a slice reference, and pins the referent slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475242,"byte_end":475299,"line_start":64,"line_end":64,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475301,"byte_end":475310,"line_start":65,"line_end":65,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476628,"byte_end":476636,"line_start":108,"line_end":108,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<BitBox<O, T>>::from_raw","value":"pub unsafe fn from_raw(*mut BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a box from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs a box from a raw pointer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475440,"byte_end":475480,"line_start":74,"line_end":74,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475482,"byte_end":475485,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the raw pointer is owned by the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475487,"byte_end":475551,"line_start":76,"line_end":76,"column_start":2,"column_end":66}},{"value":"/ resulting `BitBox`. Specifically, the `Box` destructor will free the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475553,"byte_end":475625,"line_start":77,"line_end":77,"column_start":2,"column_end":74}},{"value":"/ allocated memory. For this to be safe, the memory must have been","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475627,"byte_end":475695,"line_start":78,"line_end":78,"column_start":2,"column_end":70}},{"value":"/ allocated in accordance with the [memory layout] used by `BitBox`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475697,"byte_end":475767,"line_start":79,"line_end":79,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475769,"byte_end":475772,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475774,"byte_end":475788,"line_start":81,"line_end":81,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475790,"byte_end":475793,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ [`Box::from_raw`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.from_raw)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475795,"byte_end":475887,"line_start":83,"line_end":83,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475889,"byte_end":475892,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475894,"byte_end":475906,"line_start":85,"line_end":85,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475908,"byte_end":475911,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ This function is unsafe because improper use may lead to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475913,"byte_end":475973,"line_start":87,"line_end":87,"column_start":2,"column_end":62}},{"value":"/ memory problems. For example, a double-free may occur if the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":475975,"byte_end":476039,"line_start":88,"line_end":88,"column_start":2,"column_end":66}},{"value":"/ function is called twice on the same raw pointer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476041,"byte_end":476094,"line_start":89,"line_end":89,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476096,"byte_end":476099,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476101,"byte_end":476115,"line_start":91,"line_end":91,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476117,"byte_end":476120,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ Recreate a `BitBox` which was previously converted to a raw pointer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476122,"byte_end":476193,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/ using [`BitBox::into_raw`]:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476195,"byte_end":476226,"line_start":94,"line_end":94,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476228,"byte_end":476231,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476233,"byte_end":476244,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476246,"byte_end":476273,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476275,"byte_end":476278,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ let x = bitbox![0; 10];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476280,"byte_end":476307,"line_start":99,"line_end":99,"column_start":2,"column_end":29}},{"value":"/ let ptr = BitBox::into_raw(x);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476309,"byte_end":476343,"line_start":100,"line_end":100,"column_start":2,"column_end":36}},{"value":"/ let x = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476345,"byte_end":476390,"line_start":101,"line_end":101,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476392,"byte_end":476399,"line_start":102,"line_end":102,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476401,"byte_end":476404,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ [memory layout]: https://doc.rust-lang.org/alloc/boxed/index.html#memory-layout","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476406,"byte_end":476489,"line_start":104,"line_end":104,"column_start":2,"column_end":85}},{"value":"/ [`Layout`]: https://doc.rust-lang.org/alloc/struct.Layout.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476491,"byte_end":476557,"line_start":105,"line_end":105,"column_start":2,"column_end":68}},{"value":"/ [`BitBox::into_raw`]: #method.into_raw","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476559,"byte_end":476601,"line_start":106,"line_end":106,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476603,"byte_end":476612,"line_start":107,"line_end":107,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478056,"byte_end":478064,"line_start":148,"line_end":148,"column_start":9,"column_end":17},"name":"into_raw","qualname":"<BitBox<O, T>>::into_raw","value":"pub fn into_raw(Self) -> *mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BitBox`, returning a wrapped raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `BitBox`, returning a wrapped raw pointer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476774,"byte_end":476833,"line_start":114,"line_end":114,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476835,"byte_end":476838,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ The pointer will be properly aligned and non-null.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476840,"byte_end":476894,"line_start":116,"line_end":116,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476896,"byte_end":476899,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the caller is responsible for the memory","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476901,"byte_end":476974,"line_start":118,"line_end":118,"column_start":2,"column_end":75}},{"value":"/ previously managed by the `BitBox`. In particular, the caller should","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":476976,"byte_end":477048,"line_start":119,"line_end":119,"column_start":2,"column_end":74}},{"value":"/ properly release the memory by converting the pointer back into a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477050,"byte_end":477119,"line_start":120,"line_end":120,"column_start":2,"column_end":71}},{"value":"/ `BitBox` with the [`BitBox::from_raw`] function, allowing the `BitBox`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477121,"byte_end":477195,"line_start":121,"line_end":121,"column_start":2,"column_end":76}},{"value":"/ destructor to perform the cleanup.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477197,"byte_end":477235,"line_start":122,"line_end":122,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477237,"byte_end":477240,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477242,"byte_end":477317,"line_start":124,"line_end":124,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::into_raw(b)` instead of `b.into_raw()`. This is to match","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477319,"byte_end":477394,"line_start":125,"line_end":125,"column_start":2,"column_end":77}},{"value":"/ layout with the standard library’s `Box` API; there will never be a name","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477396,"byte_end":477474,"line_start":126,"line_end":126,"column_start":2,"column_end":78}},{"value":"/ conflict with `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477476,"byte_end":477505,"line_start":127,"line_end":127,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477507,"byte_end":477510,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477512,"byte_end":477526,"line_start":129,"line_end":129,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477528,"byte_end":477531,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ [`Box::into_raw`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.into_raw)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477533,"byte_end":477625,"line_start":131,"line_end":131,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477627,"byte_end":477630,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477632,"byte_end":477646,"line_start":133,"line_end":133,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477648,"byte_end":477651,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ Converting the raw pointer back into a `BitBox` with","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477653,"byte_end":477709,"line_start":135,"line_end":135,"column_start":2,"column_end":58}},{"value":"/ [`BitBox::from_raw`] for automatic cleanup:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477711,"byte_end":477758,"line_start":136,"line_end":136,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477760,"byte_end":477763,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477765,"byte_end":477776,"line_start":138,"line_end":138,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477778,"byte_end":477805,"line_start":139,"line_end":139,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477807,"byte_end":477810,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ let b = BitBox::new(bits![Msb0, u32; 0; 32]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477812,"byte_end":477861,"line_start":141,"line_end":141,"column_start":2,"column_end":51}},{"value":"/ let ptr = BitBox::into_raw(b);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477863,"byte_end":477897,"line_start":142,"line_end":142,"column_start":2,"column_end":36}},{"value":"/ let b = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477899,"byte_end":477944,"line_start":143,"line_end":143,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477946,"byte_end":477953,"line_start":144,"line_end":144,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477955,"byte_end":477958,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: #method.from_raw","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":477960,"byte_end":478002,"line_start":146,"line_end":146,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478031,"byte_end":478045,"line_start":147,"line_end":147,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479440,"byte_end":479444,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitBox<O, T>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<O, T> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `BitBox`, returning a mutable reference,\n `&'a mut BitSlice<O, T>`. Note that the memory region `[T]` must outlive\n the chosen lifetime `'a`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `BitBox`, returning a mutable reference,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478120,"byte_end":478187,"line_start":152,"line_end":152,"column_start":2,"column_end":69}},{"value":"/ `&'a mut BitSlice<O, T>`. Note that the memory region `[T]` must outlive","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478189,"byte_end":478265,"line_start":153,"line_end":153,"column_start":2,"column_end":78}},{"value":"/ the chosen lifetime `'a`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478267,"byte_end":478296,"line_start":154,"line_end":154,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478298,"byte_end":478301,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ This function is mainly useful for bit regions that live for the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478303,"byte_end":478371,"line_start":156,"line_end":156,"column_start":2,"column_end":70}},{"value":"/ remainder of the program’s life. Dropping the returned reference will","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478373,"byte_end":478448,"line_start":157,"line_end":157,"column_start":2,"column_end":75}},{"value":"/ cause a memory leak. If this is not acceptable, the reference should","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478450,"byte_end":478522,"line_start":158,"line_end":158,"column_start":2,"column_end":74}},{"value":"/ first be wrapped with the [`BitBox::from_raw`] function, producing a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478524,"byte_end":478596,"line_start":159,"line_end":159,"column_start":2,"column_end":74}},{"value":"/ `BitBox`. This `BitBox` can then be dropped which will properly","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478598,"byte_end":478665,"line_start":160,"line_end":160,"column_start":2,"column_end":69}},{"value":"/ deallocate the memory.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478667,"byte_end":478693,"line_start":161,"line_end":161,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478695,"byte_end":478698,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478700,"byte_end":478775,"line_start":163,"line_end":163,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::leak(b)` instead of `b.leak()`. This is to match layout","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478777,"byte_end":478851,"line_start":164,"line_end":164,"column_start":2,"column_end":76}},{"value":"/ with the standard library’s `Box` API; there will never be a name","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478853,"byte_end":478924,"line_start":165,"line_end":165,"column_start":2,"column_end":71}},{"value":"/ conflict with `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478926,"byte_end":478955,"line_start":166,"line_end":166,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478957,"byte_end":478960,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478962,"byte_end":478976,"line_start":168,"line_end":168,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478978,"byte_end":478981,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.leak)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":478983,"byte_end":479067,"line_start":170,"line_end":170,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479069,"byte_end":479072,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479074,"byte_end":479088,"line_start":172,"line_end":172,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479090,"byte_end":479093,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ Simple usage:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479095,"byte_end":479112,"line_start":174,"line_end":174,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479114,"byte_end":479117,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479119,"byte_end":479130,"line_start":176,"line_end":176,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479132,"byte_end":479159,"line_start":177,"line_end":177,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479161,"byte_end":479164,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ let b = bitbox![LocalBits, u32; 0; 32];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479166,"byte_end":479209,"line_start":179,"line_end":179,"column_start":2,"column_end":45}},{"value":"/ let static_ref: &'static mut BitSlice<LocalBits, u32> = BitBox::leak(b);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479211,"byte_end":479287,"line_start":180,"line_end":180,"column_start":2,"column_end":78}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479289,"byte_end":479317,"line_start":181,"line_end":181,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(static_ref.count_ones(), 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479319,"byte_end":479362,"line_start":182,"line_end":182,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479364,"byte_end":479371,"line_start":183,"line_end":183,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479373,"byte_end":479376,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: #method.from_raw","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479378,"byte_end":479420,"line_start":185,"line_end":185,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479422,"byte_end":479431,"line_start":186,"line_end":186,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480600,"byte_end":480611,"line_start":230,"line_end":230,"column_start":9,"column_end":20},"name":"into_bitvec","qualname":"<BitBox<O, T>>::into_bitvec","value":"pub fn into_bitvec(Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without clones or allocation.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without clones or allocation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479559,"byte_end":479622,"line_start":192,"line_end":192,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479624,"byte_end":479627,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The resulting vector can be converted back into a box via `BitVec<O,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479629,"byte_end":479701,"line_start":194,"line_end":194,"column_start":2,"column_end":74}},{"value":"/ T>`’s `into_boxed_bitslice` method.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479703,"byte_end":479744,"line_start":195,"line_end":195,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479746,"byte_end":479749,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479751,"byte_end":479765,"line_start":197,"line_end":197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479767,"byte_end":479770,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ [`slice::into_vec`](https://doc.rust-lang.org/std/primitive.slice.html#method.into_vec)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479772,"byte_end":479863,"line_start":199,"line_end":199,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479865,"byte_end":479868,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479870,"byte_end":479891,"line_start":201,"line_end":201,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479893,"byte_end":479896,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ Despite taking a `Box<[T]>` receiver, this function is written in an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479898,"byte_end":479970,"line_start":203,"line_end":203,"column_start":2,"column_end":74}},{"value":"/ `impl<T> [T]` block.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479972,"byte_end":479996,"line_start":204,"line_end":204,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":479998,"byte_end":480001,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ Rust does not allow the text","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480003,"byte_end":480035,"line_start":206,"line_end":206,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480037,"byte_end":480040,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480042,"byte_end":480060,"line_start":208,"line_end":208,"column_start":2,"column_end":20}},{"value":"/ impl<O, T> BitSlice<O, T> {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480062,"byte_end":480093,"line_start":209,"line_end":209,"column_start":2,"column_end":33}},{"value":"/   fn into_bitvec(self: BitBox<O, T>);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480095,"byte_end":480136,"line_start":210,"line_end":210,"column_start":2,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480138,"byte_end":480143,"line_start":211,"line_end":211,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480145,"byte_end":480152,"line_start":212,"line_end":212,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480154,"byte_end":480157,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ to be written, and `BitBox` exists specifically because","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480159,"byte_end":480218,"line_start":214,"line_end":214,"column_start":2,"column_end":61}},{"value":"/ `Box<BitSlice<>>` cannot be written either, so this function must be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480220,"byte_end":480292,"line_start":215,"line_end":215,"column_start":2,"column_end":74}},{"value":"/ implemented directly on `BitBox` rather than on `BitSlice` with a boxed","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480294,"byte_end":480369,"line_start":216,"line_end":216,"column_start":2,"column_end":77}},{"value":"/ receiver.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480371,"byte_end":480384,"line_start":217,"line_end":217,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480386,"byte_end":480389,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480391,"byte_end":480405,"line_start":219,"line_end":219,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480407,"byte_end":480410,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480412,"byte_end":480423,"line_start":221,"line_end":221,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480425,"byte_end":480452,"line_start":222,"line_end":222,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480454,"byte_end":480457,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480459,"byte_end":480492,"line_start":224,"line_end":224,"column_start":2,"column_end":35}},{"value":"/ let bv = bb.into_bitvec();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480494,"byte_end":480524,"line_start":225,"line_end":225,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480526,"byte_end":480529,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bitvec![0, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480531,"byte_end":480571,"line_start":227,"line_end":227,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480573,"byte_end":480580,"line_start":228,"line_end":228,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":480582,"byte_end":480591,"line_start":229,"line_end":229,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":2029},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":5582},{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2054},{"krate":0,"index":2079},{"krate":0,"index":2151},{"krate":0,"index":2340},{"krate":0,"index":2424},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2589}],"decl_id":null,"docs":" A dynamically-allocated buffer containing a `BitSlice<O, T>` region.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6369,"byte_end":6394,"line_start":174,"line_end":174,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated buffer containing a `BitSlice<O, T>` region.\n\nYou can read the standard library’s [`alloc::vec` module documentation][std]\nhere.\n\nThis module defines the [`BitVec`] buffer, and all of its associated support\ncode.\n\n`BitVec` is equivalent to `Vec<bool>`, in its operation and in its relationship\nto the `BitSlice` type. Most of the interesting work to be done on a\nbit-sequence is implemented in `BitSlice`, to which `BitVec` dereferences, and\nthe vector container itself only exists to maintain ownership, implement dynamic\nresizing, and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\n[`BitVec`]: struct.BitVec.html\n[std]: https://doc.rust-lang.org/alloc/vec\n!*/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":492427,"byte_end":493149,"line_start":1,"line_end":18,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":493151,"byte_end":493177,"line_start":20,"line_end":20,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2049},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":496878,"byte_end":496884,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::vec::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":2052},{"krate":0,"index":2053}],"decl_id":null,"docs":" A vector of individual bits, allocated on the heap.","sig":null,"attributes":[{"value":"* A vector of individual bits, allocated on the heap.\n\nThis is a managed, heap-allocated, buffer that contains a `BitSlice` region. It\nis analagous to `Vec<bool>`, and is written to be as close as possible to\ndrop-in replacabale for it. This type contains little interesting behavior in\nits own right, dereferencing instead to [`BitSlice`] for manipulation of the\nbuffer contents, and serves primarily as an interface to the allocator. If you\nrequire statically-allocated, fixed-size, owned buffers, you should use the\n[`BitArray`] type.\n\nBecause `BitVec` directly owns its memory, and can guarantee that no other\nobject in a program has access to its buffers, `BitVec` is able to override some\nbehavior from `BitSlice` in more efficient manners.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Vec<T>`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html)\n\n# API Differences\n\nThe buffer type `Vec<bool>` has no type parameters. `BitVec<O, T>` has the same\ntwo type parameters as `BitSlice<O, T>`. Otherwise, `BitVec` is able to\nimplement the full API surface of `Vec<bool>`.\n\n# Behavior\n\nBecause `BitVec` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some `BitSlice` behavior to be faster or more efficient.\n\n# Type Parameters\n\nThis takes the same two type parameters, `O: BitOrder` and `T: BitStore`, as\n`BitSlice`.\n\n# Safety\n\nLike `BitSlice`, `BitVec` is exactly equal in size to `Vec`, and is also\nabsolutely representation-incompatible with it. You must never attempt to\ntype-cast between `Vec<T>` and `BitVec` in any way, nor attempt to modify the\nmemory value of a `BitVec` handle. Doing so will cause allocator and memory\nerrors in your program, likely inducing a panic.\n\nEverything in the `BitVec` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent items in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nThe choice of `T: BitStore` type parameter can impact your vector’s performance,\nas the allocator operates in units of `T` rather than in bits. This means that\nlarger register types will increase the amount of memory reserved in each call\nto the allocator, meaning fewer calls to `.push()` will actually cause a\nreällocation. In addition, iteration over the vector is governed by the\n`BitSlice` characteristics on the type parameter. You are generally better off\nusing larger types when your vector is a data collection rather than a specific\nI/O protocol buffer.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitvec!`] macro will\nconstruct an appropriate `BitSlice` buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitSlice`]: ../slice/struct.BitSlice.html\n[`bitvec!`]: ../macro.bitvec.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":493476,"byte_end":496855,"line_start":50,"line_end":128,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":496856,"byte_end":496866,"line_start":129,"line_end":129,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497903,"byte_end":497909,"line_start":170,"line_end":170,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitVec<O, T>>::repeat","value":"pub fn repeat(bool, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitVec` from a value repeated many times.","sig":null,"attributes":[{"value":"/ Constructs a `BitVec` from a value repeated many times.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497260,"byte_end":497319,"line_start":147,"line_end":147,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497321,"byte_end":497324,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ This function is equivalent to the `bitvec![O, T; bit; len]` macro call,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497326,"byte_end":497402,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/ and is in fact the implementation of that macro syntax.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497404,"byte_end":497463,"line_start":150,"line_end":150,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497465,"byte_end":497468,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497470,"byte_end":497486,"line_start":152,"line_end":152,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497488,"byte_end":497491,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ - `bit`: The bit value to which all `len` allocated bits will be set.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497493,"byte_end":497566,"line_start":154,"line_end":154,"column_start":2,"column_end":75}},{"value":"/ - `len`: The number of live bits in the constructed `BitVec`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497568,"byte_end":497633,"line_start":155,"line_end":155,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497635,"byte_end":497638,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497640,"byte_end":497653,"line_start":157,"line_end":157,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497655,"byte_end":497658,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` with `len` live bits, all set to `bit`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497660,"byte_end":497714,"line_start":159,"line_end":159,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497716,"byte_end":497719,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497721,"byte_end":497735,"line_start":161,"line_end":161,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497737,"byte_end":497740,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497742,"byte_end":497753,"line_start":163,"line_end":163,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497755,"byte_end":497782,"line_start":164,"line_end":164,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497784,"byte_end":497787,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ let bv = BitVec::<Msb0, u8>::repeat(true, 20);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497789,"byte_end":497839,"line_start":166,"line_end":166,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(bv, bits![1; 20]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497841,"byte_end":497874,"line_start":167,"line_end":167,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497876,"byte_end":497883,"line_start":168,"line_end":168,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497885,"byte_end":497894,"line_start":169,"line_end":169,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498913,"byte_end":498926,"line_start":205,"line_end":205,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitVec<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clones a `&BitSlice` into a `BitVec`.","sig":null,"attributes":[{"value":"/ Clones a `&BitSlice` into a `BitVec`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498098,"byte_end":498139,"line_start":179,"line_end":179,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498141,"byte_end":498144,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498146,"byte_end":498160,"line_start":181,"line_end":181,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498162,"byte_end":498165,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ [`<Vec<T: Clone> as Clone>::clone`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-Clone)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498167,"byte_end":498270,"line_start":183,"line_end":183,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498272,"byte_end":498275,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498277,"byte_end":498290,"line_start":185,"line_end":185,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498292,"byte_end":498295,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ This performs a direct element-wise copy from the source slice to the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498297,"byte_end":498370,"line_start":187,"line_end":187,"column_start":2,"column_end":75}},{"value":"/ newly-allocated buffer, then sets the vector to have the same starting","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498372,"byte_end":498446,"line_start":188,"line_end":188,"column_start":2,"column_end":76}},{"value":"/ bit as the slice did. This allows for faster behavior. If you require","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498448,"byte_end":498521,"line_start":189,"line_end":189,"column_start":2,"column_end":75}},{"value":"/ that the vector start at the leading edge of the first element, use","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498523,"byte_end":498594,"line_start":190,"line_end":190,"column_start":2,"column_end":73}},{"value":"/ [`force_align`] to guarantee this.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498596,"byte_end":498634,"line_start":191,"line_end":191,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498636,"byte_end":498639,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498641,"byte_end":498655,"line_start":193,"line_end":193,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498657,"byte_end":498660,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498662,"byte_end":498673,"line_start":195,"line_end":195,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498675,"byte_end":498702,"line_start":196,"line_end":196,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498704,"byte_end":498707,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498709,"byte_end":498754,"line_start":198,"line_end":198,"column_start":2,"column_end":47}},{"value":"/ let bv = BitVec::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498756,"byte_end":498804,"line_start":199,"line_end":199,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bv, bits[2 ..]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498806,"byte_end":498837,"line_start":200,"line_end":200,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498839,"byte_end":498846,"line_start":201,"line_end":201,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498848,"byte_end":498851,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`force_align`]: #method.force_align","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498853,"byte_end":498893,"line_start":203,"line_end":203,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":498895,"byte_end":498904,"line_start":204,"line_end":204,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500078,"byte_end":500086,"line_start":254,"line_end":254,"column_start":9,"column_end":17},"name":"from_vec","qualname":"<BitVec<O, T>>::from_vec","value":"pub fn from_vec(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499434,"byte_end":499507,"line_start":226,"line_end":226,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499509,"byte_end":499512,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499514,"byte_end":499530,"line_start":228,"line_end":228,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499532,"byte_end":499535,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ - `vec`: A vector to view as bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499537,"byte_end":499575,"line_start":230,"line_end":230,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499577,"byte_end":499580,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499582,"byte_end":499595,"line_start":232,"line_end":232,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499597,"byte_end":499600,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` over the `vec` buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499602,"byte_end":499639,"line_start":234,"line_end":234,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499641,"byte_end":499644,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499646,"byte_end":499658,"line_start":236,"line_end":236,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499660,"byte_end":499663,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ This panics if `vec` is too long to convert into a `BitVec`. See","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499665,"byte_end":499733,"line_start":238,"line_end":238,"column_start":2,"column_end":70}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499735,"byte_end":499762,"line_start":239,"line_end":239,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499764,"byte_end":499767,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499769,"byte_end":499783,"line_start":241,"line_end":241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499785,"byte_end":499788,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499790,"byte_end":499801,"line_start":243,"line_end":243,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499803,"byte_end":499830,"line_start":244,"line_end":244,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499832,"byte_end":499835,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499837,"byte_end":499864,"line_start":246,"line_end":246,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::from_vec(vec);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499866,"byte_end":499917,"line_start":247,"line_end":247,"column_start":2,"column_end":53}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499919,"byte_end":499952,"line_start":248,"line_end":248,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499954,"byte_end":499961,"line_start":249,"line_end":249,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499963,"byte_end":499966,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499968,"byte_end":499995,"line_start":251,"line_end":251,"column_start":2,"column_end":29}},{"value":"/ ../slice/struct.BitSlice.html#associatedconstant.MAX_ELTS","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":499997,"byte_end":500058,"line_start":252,"line_end":252,"column_start":2,"column_end":63}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500060,"byte_end":500069,"line_start":253,"line_end":253,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501212,"byte_end":501224,"line_start":289,"line_end":289,"column_start":9,"column_end":21},"name":"try_from_vec","qualname":"<BitVec<O, T>>::try_from_vec","value":"pub fn try_from_vec(Vec<T>) -> Result<Self, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Vec<T>` into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500207,"byte_end":500280,"line_start":259,"line_end":259,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500282,"byte_end":500285,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500287,"byte_end":500363,"line_start":261,"line_end":261,"column_start":2,"column_end":78}},{"value":"/ as a bit-vector. Because `Vec` can be longer than `BitVec`s, this is a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500365,"byte_end":500439,"line_start":262,"line_end":262,"column_start":2,"column_end":76}},{"value":"/ fallible method, and the original vector will be returned if it cannot","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500441,"byte_end":500515,"line_start":263,"line_end":263,"column_start":2,"column_end":76}},{"value":"/ be converted.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500517,"byte_end":500534,"line_start":264,"line_end":264,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500536,"byte_end":500539,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500541,"byte_end":500557,"line_start":266,"line_end":266,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500559,"byte_end":500562,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ - `vec`: Some vector of memory, to be viewed as bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500564,"byte_end":500621,"line_start":268,"line_end":268,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500623,"byte_end":500626,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500628,"byte_end":500641,"line_start":270,"line_end":270,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500643,"byte_end":500646,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ If `vec` is short enough to be viewed as a `BitVec`, then this returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500648,"byte_end":500722,"line_start":272,"line_end":272,"column_start":2,"column_end":76}},{"value":"/ a `BitVec` over the `vec` buffer. If `vec` is too long, then this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500724,"byte_end":500793,"line_start":273,"line_end":273,"column_start":2,"column_end":71}},{"value":"/ returns `vec` unmodified.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500795,"byte_end":500824,"line_start":274,"line_end":274,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500826,"byte_end":500829,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500831,"byte_end":500845,"line_start":276,"line_end":276,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500847,"byte_end":500850,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500852,"byte_end":500863,"line_start":278,"line_end":278,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500865,"byte_end":500892,"line_start":279,"line_end":279,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500894,"byte_end":500897,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500899,"byte_end":500926,"line_start":281,"line_end":281,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::try_from_vec(vec).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500928,"byte_end":500992,"line_start":282,"line_end":282,"column_start":2,"column_end":66}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":500994,"byte_end":501027,"line_start":283,"line_end":283,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501029,"byte_end":501036,"line_start":284,"line_end":284,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501038,"byte_end":501041,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require an allocation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501043,"byte_end":501115,"line_start":286,"line_end":286,"column_start":2,"column_end":74}},{"value":"/ exceeding `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501117,"byte_end":501192,"line_start":287,"line_end":287,"column_start":2,"column_end":77}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501194,"byte_end":501203,"line_start":288,"line_end":288,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2062},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502408,"byte_end":502428,"line_start":337,"line_end":337,"column_start":9,"column_end":29},"name":"extend_from_bitslice","qualname":"<BitVec<O, T>>::extend_from_bitslice","value":"pub fn extend_from_bitslice(&mut Self, &BitSlice<O, T>)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits in a `BitSlice` into the `BitVec`.","sig":null,"attributes":[{"value":"/ Copies all bits in a `BitSlice` into the `BitVec`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501621,"byte_end":501675,"line_start":310,"line_end":310,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501677,"byte_end":501680,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ This is provided for API completeness; it has no performance benefits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501682,"byte_end":501755,"line_start":312,"line_end":312,"column_start":2,"column_end":75}},{"value":"/ compared to use of the [`Extend`] implementation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501757,"byte_end":501810,"line_start":313,"line_end":313,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501812,"byte_end":501815,"line_start":314,"line_end":314,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501817,"byte_end":501833,"line_start":315,"line_end":315,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501835,"byte_end":501838,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501840,"byte_end":501857,"line_start":317,"line_end":317,"column_start":2,"column_end":19}},{"value":"/ - `other`: A `BitSlice` reference of the same type parameters as `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501859,"byte_end":501935,"line_start":318,"line_end":318,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501937,"byte_end":501940,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501942,"byte_end":501956,"line_start":320,"line_end":320,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501958,"byte_end":501961,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ `self` is extended by the length of `other`, and then the contents of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":501963,"byte_end":502036,"line_start":322,"line_end":322,"column_start":2,"column_end":75}},{"value":"/ `other` are copied into the newly-allocated end of `self`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502038,"byte_end":502100,"line_start":323,"line_end":323,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502102,"byte_end":502105,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502107,"byte_end":502118,"line_start":325,"line_end":325,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502120,"byte_end":502147,"line_start":326,"line_end":326,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502149,"byte_end":502152,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502154,"byte_end":502185,"line_start":328,"line_end":328,"column_start":2,"column_end":33}},{"value":"/ bv.extend_from_bitslice(bits![1, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502187,"byte_end":502234,"line_start":329,"line_end":329,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502236,"byte_end":502239,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502241,"byte_end":502285,"line_start":331,"line_end":331,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502287,"byte_end":502294,"line_start":332,"line_end":332,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502296,"byte_end":502299,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ [`Extend`]: #impl-Extend<%26'a bool>","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502301,"byte_end":502341,"line_start":334,"line_end":334,"column_start":2,"column_end":42}},{"value":"/ [`.as_bitslice()`]: #method.as_bitslice()","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502343,"byte_end":502388,"line_start":335,"line_end":335,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502390,"byte_end":502399,"line_start":336,"line_end":336,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503138,"byte_end":503157,"line_start":364,"line_end":364,"column_start":9,"column_end":28},"name":"into_boxed_bitslice","qualname":"<BitVec<O, T>>::into_boxed_bitslice","value":"pub fn into_boxed_bitslice(Self) -> BitBox<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into [`BitBox<O, T>`].","sig":null,"attributes":[{"value":"/ Converts the vector into [`BitBox<O, T>`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502627,"byte_end":502673,"line_start":344,"line_end":344,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502675,"byte_end":502678,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502680,"byte_end":502729,"line_start":346,"line_end":346,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502731,"byte_end":502734,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502736,"byte_end":502750,"line_start":348,"line_end":348,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502752,"byte_end":502755,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.into_boxed_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502757,"byte_end":502863,"line_start":350,"line_end":350,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502865,"byte_end":502868,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502870,"byte_end":502884,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502886,"byte_end":502889,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502891,"byte_end":502902,"line_start":354,"line_end":354,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502904,"byte_end":502931,"line_start":355,"line_end":355,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502933,"byte_end":502936,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 50];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502938,"byte_end":502970,"line_start":357,"line_end":357,"column_start":2,"column_end":34}},{"value":"/ let bb: BitBox = bv.into_boxed_bitslice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":502972,"byte_end":503018,"line_start":358,"line_end":358,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(bb, bits![1; 50]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503020,"byte_end":503053,"line_start":359,"line_end":359,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503055,"byte_end":503062,"line_start":360,"line_end":360,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503064,"byte_end":503067,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ [`BitBox<O, T>`]: ../boxed/struct.BitBox.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503069,"byte_end":503118,"line_start":362,"line_end":362,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503120,"byte_end":503129,"line_start":363,"line_end":363,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503901,"byte_end":503909,"line_start":396,"line_end":396,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitVec<O, T>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector back into an ordinary vector of memory elements.","sig":null,"attributes":[{"value":"/ Converts the vector back into an ordinary vector of memory elements.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503403,"byte_end":503475,"line_start":373,"line_end":373,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503477,"byte_end":503480,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ This does not affect the vector’s buffer, only the handle used to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503482,"byte_end":503553,"line_start":375,"line_end":375,"column_start":2,"column_end":71}},{"value":"/ control it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503555,"byte_end":503570,"line_start":376,"line_end":376,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503572,"byte_end":503575,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503577,"byte_end":503593,"line_start":378,"line_end":378,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503595,"byte_end":503598,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503600,"byte_end":503612,"line_start":380,"line_end":380,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503614,"byte_end":503617,"line_start":381,"line_end":381,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503619,"byte_end":503632,"line_start":382,"line_end":382,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503634,"byte_end":503637,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ An ordinary vector containing all of the bit-vector’s memory buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503639,"byte_end":503713,"line_start":384,"line_end":384,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503715,"byte_end":503718,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503720,"byte_end":503734,"line_start":386,"line_end":386,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503736,"byte_end":503739,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503741,"byte_end":503752,"line_start":388,"line_end":388,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503754,"byte_end":503781,"line_start":389,"line_end":389,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503783,"byte_end":503786,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0; 5];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503788,"byte_end":503815,"line_start":391,"line_end":391,"column_start":2,"column_end":29}},{"value":"/ let vec = bv.into_vec();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503817,"byte_end":503845,"line_start":392,"line_end":392,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(vec, [0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503847,"byte_end":503872,"line_start":393,"line_end":393,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503874,"byte_end":503881,"line_start":394,"line_end":394,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":503883,"byte_end":503892,"line_start":395,"line_end":395,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2065},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504374,"byte_end":504382,"line_start":419,"line_end":419,"column_start":9,"column_end":17},"name":"elements","qualname":"<BitVec<O, T>>::elements","value":"pub fn elements(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of elements `T` that contain live bits of the vector.","sig":null,"attributes":[{"value":"/ Gets the number of elements `T` that contain live bits of the vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504118,"byte_end":504191,"line_start":408,"line_end":408,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504193,"byte_end":504196,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504198,"byte_end":504212,"line_start":410,"line_end":410,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504214,"byte_end":504217,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504219,"byte_end":504230,"line_start":412,"line_end":412,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504232,"byte_end":504259,"line_start":413,"line_end":413,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504261,"byte_end":504264,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![LocalBits, u16; 1; 50];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504266,"byte_end":504310,"line_start":415,"line_end":415,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bv.elements(), 4);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504312,"byte_end":504345,"line_start":416,"line_end":416,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504347,"byte_end":504354,"line_start":417,"line_end":417,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504356,"byte_end":504365,"line_start":418,"line_end":418,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505268,"byte_end":505285,"line_start":448,"line_end":448,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitVec<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the vector to a fixed value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504433,"byte_end":504496,"line_start":423,"line_end":423,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504498,"byte_end":504501,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504503,"byte_end":504577,"line_start":425,"line_end":425,"column_start":2,"column_end":76}},{"value":"/ the `self.as_bitslice()` view so that they have a consistent value. This","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504579,"byte_end":504655,"line_start":426,"line_end":426,"column_start":2,"column_end":78}},{"value":"/ can be used to zero the uninitialized memory so that when viewed as a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504657,"byte_end":504730,"line_start":427,"line_end":427,"column_start":2,"column_end":75}},{"value":"/ raw memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504732,"byte_end":504808,"line_start":428,"line_end":428,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504810,"byte_end":504813,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504815,"byte_end":504829,"line_start":430,"line_end":430,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504831,"byte_end":504834,"line_start":431,"line_end":431,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504836,"byte_end":504847,"line_start":432,"line_end":432,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504849,"byte_end":504876,"line_start":433,"line_end":433,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504878,"byte_end":504881,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ let mut bv = 220u8.view_bits::<Lsb0>().to_bitvec();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504883,"byte_end":504938,"line_start":435,"line_end":435,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(bv.as_slice(), &[220u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504940,"byte_end":504980,"line_start":436,"line_end":436,"column_start":2,"column_end":42}},{"value":"/ bv.truncate(4);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":504982,"byte_end":505001,"line_start":437,"line_end":437,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.count_ones(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505003,"byte_end":505038,"line_start":438,"line_end":438,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bv.as_slice(), &[220u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505040,"byte_end":505080,"line_start":439,"line_end":439,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505082,"byte_end":505085,"line_start":440,"line_end":440,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505087,"byte_end":505119,"line_start":441,"line_end":441,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv.as_slice(), &[12u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505121,"byte_end":505160,"line_start":442,"line_end":442,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505162,"byte_end":505165,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505167,"byte_end":505198,"line_start":444,"line_end":444,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bv.as_slice(), &[!3u8]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505200,"byte_end":505239,"line_start":445,"line_end":445,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505241,"byte_end":505248,"line_start":446,"line_end":446,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505250,"byte_end":505259,"line_start":447,"line_end":447,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506255,"byte_end":506266,"line_start":483,"line_end":483,"column_start":9,"column_end":20},"name":"force_align","qualname":"<BitVec<O, T>>::force_align","value":"pub fn force_align(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the live region of the vector’s contents begins at the\n leading edge of the buffer.","sig":null,"attributes":[{"value":"/ Ensures that the live region of the vector’s contents begins at the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505670,"byte_end":505743,"line_start":462,"line_end":462,"column_start":2,"column_end":73}},{"value":"/ leading edge of the buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505745,"byte_end":505776,"line_start":463,"line_end":463,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505778,"byte_end":505781,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505783,"byte_end":505797,"line_start":465,"line_end":465,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505799,"byte_end":505802,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505804,"byte_end":505815,"line_start":467,"line_end":467,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505817,"byte_end":505844,"line_start":468,"line_end":468,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505846,"byte_end":505849,"line_start":469,"line_end":469,"column_start":2,"column_end":5}},{"value":"/ let data = 0x3Cu8;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505851,"byte_end":505873,"line_start":470,"line_end":470,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505875,"byte_end":505915,"line_start":471,"line_end":471,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505917,"byte_end":505920,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bits[2 .. 6].to_bitvec();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505922,"byte_end":505964,"line_start":473,"line_end":473,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":505966,"byte_end":505999,"line_start":474,"line_end":474,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bv.as_slice()[0], data);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506001,"byte_end":506040,"line_start":475,"line_end":475,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506042,"byte_end":506045,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ bv.force_align();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506047,"byte_end":506068,"line_start":477,"line_end":477,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506070,"byte_end":506103,"line_start":478,"line_end":478,"column_start":2,"column_end":35}},{"value":"/ //  It is not specified what happens to bits that are no longer used.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506105,"byte_end":506178,"line_start":479,"line_end":479,"column_start":2,"column_end":75}},{"value":"/ assert_eq!(bv.as_slice()[0] & 0xF0, 0xF0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506180,"byte_end":506226,"line_start":480,"line_end":480,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506228,"byte_end":506235,"line_start":481,"line_end":481,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506237,"byte_end":506246,"line_start":482,"line_end":482,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507317,"byte_end":507329,"line_start":522,"line_end":522,"column_start":9,"column_end":21},"name":"set_elements","qualname":"<BitVec<O, T>>::set_elements","value":"pub fn set_elements(&mut Self, T::Mem)","parent":null,"children":[],"decl_id":null,"docs":" Writes a value into every element that the vector considers live.","sig":null,"attributes":[{"value":"/ Writes a value into every element that the vector considers live.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506572,"byte_end":506641,"line_start":497,"line_end":497,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506643,"byte_end":506646,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ This unconditionally writes `element` into each live location in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506648,"byte_end":506720,"line_start":499,"line_end":499,"column_start":2,"column_end":74}},{"value":"/ backing buffer, without altering the `BitVec`’s length or capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506722,"byte_end":506795,"line_start":500,"line_end":500,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506797,"byte_end":506800,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ It is unspecified what effects this has on the allocated but dead","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506802,"byte_end":506871,"line_start":502,"line_end":502,"column_start":2,"column_end":71}},{"value":"/ elements in the buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506873,"byte_end":506900,"line_start":503,"line_end":503,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506902,"byte_end":506905,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506907,"byte_end":506923,"line_start":505,"line_end":505,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506925,"byte_end":506928,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506930,"byte_end":506947,"line_start":507,"line_end":507,"column_start":2,"column_end":19}},{"value":"/ - `element`: The value which will be written to each live location in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":506949,"byte_end":507022,"line_start":508,"line_end":508,"column_start":2,"column_end":75}},{"value":"/   the vector’s buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507024,"byte_end":507052,"line_start":509,"line_end":509,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507054,"byte_end":507057,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507059,"byte_end":507073,"line_start":511,"line_end":511,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507075,"byte_end":507078,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507080,"byte_end":507091,"line_start":513,"line_end":513,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507093,"byte_end":507120,"line_start":514,"line_end":514,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507122,"byte_end":507125,"line_start":515,"line_end":515,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![LocalBits, u8; 0; 10];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507127,"byte_end":507174,"line_start":516,"line_end":516,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv.as_slice(), [0, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507176,"byte_end":507214,"line_start":517,"line_end":517,"column_start":2,"column_end":40}},{"value":"/ bv.set_elements(0xA5);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507216,"byte_end":507242,"line_start":518,"line_end":518,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv.as_slice(), [0xA5, 0xA5]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507244,"byte_end":507288,"line_start":519,"line_end":519,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507290,"byte_end":507297,"line_start":520,"line_end":520,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507299,"byte_end":507308,"line_start":521,"line_end":521,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507859,"byte_end":507870,"line_start":546,"line_end":546,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitVec<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the buffer’s contents as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the buffer’s contents as a `BitSlice`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507445,"byte_end":507495,"line_start":528,"line_end":528,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507497,"byte_end":507500,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&bv[..]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507502,"byte_end":507538,"line_start":530,"line_end":530,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507540,"byte_end":507543,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507545,"byte_end":507559,"line_start":532,"line_end":532,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507561,"byte_end":507564,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507566,"byte_end":507656,"line_start":534,"line_end":534,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507658,"byte_end":507661,"line_start":535,"line_end":535,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507663,"byte_end":507677,"line_start":536,"line_end":536,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507679,"byte_end":507682,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507684,"byte_end":507695,"line_start":538,"line_end":538,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507697,"byte_end":507724,"line_start":539,"line_end":539,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507726,"byte_end":507729,"line_start":540,"line_end":540,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507731,"byte_end":507764,"line_start":541,"line_end":541,"column_start":2,"column_end":35}},{"value":"/ let bits = bv.as_bitslice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507766,"byte_end":507798,"line_start":542,"line_end":542,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507800,"byte_end":507807,"line_start":543,"line_end":543,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507809,"byte_end":507818,"line_start":544,"line_end":544,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507820,"byte_end":507850,"line_start":545,"line_end":545,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508395,"byte_end":508410,"line_start":569,"line_end":569,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitVec<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507941,"byte_end":507995,"line_start":550,"line_end":550,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":507997,"byte_end":508000,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508002,"byte_end":508034,"line_start":552,"line_end":552,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508036,"byte_end":508039,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508041,"byte_end":508055,"line_start":554,"line_end":554,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508057,"byte_end":508060,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_mut_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508062,"byte_end":508160,"line_start":556,"line_end":556,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508162,"byte_end":508165,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508167,"byte_end":508181,"line_start":558,"line_end":558,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508183,"byte_end":508186,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508188,"byte_end":508199,"line_start":560,"line_end":560,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508201,"byte_end":508228,"line_start":561,"line_end":561,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508230,"byte_end":508233,"line_start":562,"line_end":562,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508235,"byte_end":508272,"line_start":563,"line_end":563,"column_start":2,"column_end":39}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508274,"byte_end":508310,"line_start":564,"line_end":564,"column_start":2,"column_end":38}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508312,"byte_end":508334,"line_start":565,"line_end":565,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508336,"byte_end":508343,"line_start":566,"line_end":566,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508345,"byte_end":508354,"line_start":567,"line_end":567,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508356,"byte_end":508386,"line_start":568,"line_end":568,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509637,"byte_end":509646,"line_start":605,"line_end":605,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitVec<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> *const BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the vector’s region.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the vector’s region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508493,"byte_end":508544,"line_start":573,"line_end":573,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508546,"byte_end":508549,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508551,"byte_end":508619,"line_start":575,"line_end":575,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508621,"byte_end":508696,"line_start":576,"line_end":576,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reallocated, which would also make","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508698,"byte_end":508774,"line_start":577,"line_end":577,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508776,"byte_end":508807,"line_start":578,"line_end":578,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508809,"byte_end":508812,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508814,"byte_end":508873,"line_start":580,"line_end":580,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is never written to (except inside an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508875,"byte_end":508945,"line_start":581,"line_end":581,"column_start":2,"column_end":72}},{"value":"/ `UnsafeCell`) using this pointer or any pointer derived from it. If you","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":508947,"byte_end":509022,"line_start":582,"line_end":582,"column_start":2,"column_end":77}},{"value":"/ need to mutate the contents of the region, use [`as_mut_bitptr`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509024,"byte_end":509093,"line_start":583,"line_end":583,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509095,"byte_end":509098,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ This pointer is an opaque crate-internal type. Its in-memory","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509100,"byte_end":509164,"line_start":585,"line_end":585,"column_start":2,"column_end":66}},{"value":"/ representation is unsafe to modify in any way. The only safe action to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509166,"byte_end":509240,"line_start":586,"line_end":586,"column_start":2,"column_end":76}},{"value":"/ take with this pointer is to pass it, unchanged, back into a `bitvec`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509242,"byte_end":509315,"line_start":587,"line_end":587,"column_start":2,"column_end":75}},{"value":"/ API.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509317,"byte_end":509325,"line_start":588,"line_end":588,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509327,"byte_end":509330,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509332,"byte_end":509346,"line_start":590,"line_end":590,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509348,"byte_end":509351,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509353,"byte_end":509364,"line_start":592,"line_end":592,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509366,"byte_end":509393,"line_start":593,"line_end":593,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509395,"byte_end":509398,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0; 20];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509400,"byte_end":509428,"line_start":595,"line_end":595,"column_start":2,"column_end":30}},{"value":"/ let ptr = bv.as_bitptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509430,"byte_end":509459,"line_start":596,"line_end":596,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509461,"byte_end":509464,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ let bits = unsafe { &*ptr };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509466,"byte_end":509498,"line_start":598,"line_end":598,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509500,"byte_end":509525,"line_start":599,"line_end":599,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509527,"byte_end":509534,"line_start":600,"line_end":600,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509536,"byte_end":509539,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitptr`]: #method.as_mut_bitptr","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509541,"byte_end":509585,"line_start":602,"line_end":602,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509587,"byte_end":509596,"line_start":603,"line_end":603,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509598,"byte_end":509628,"line_start":604,"line_end":604,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510566,"byte_end":510579,"line_start":634,"line_end":634,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitVec<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> *mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the vector’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the vector’s region.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509735,"byte_end":509798,"line_start":609,"line_end":609,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509800,"byte_end":509803,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509805,"byte_end":509873,"line_start":611,"line_end":611,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509875,"byte_end":509950,"line_start":612,"line_end":612,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reallocated, which would also make","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":509952,"byte_end":510028,"line_start":613,"line_end":613,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510030,"byte_end":510061,"line_start":614,"line_end":614,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510063,"byte_end":510066,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ This pointer is an opaque crate-internal type. Its in-memory","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510068,"byte_end":510132,"line_start":616,"line_end":616,"column_start":2,"column_end":66}},{"value":"/ representation is unsafe to modify in any way. The only safe action to","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510134,"byte_end":510208,"line_start":617,"line_end":617,"column_start":2,"column_end":76}},{"value":"/ take with this pointer is to pass it, unchanged, back into a `bitvec`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510210,"byte_end":510283,"line_start":618,"line_end":618,"column_start":2,"column_end":75}},{"value":"/ API.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510285,"byte_end":510293,"line_start":619,"line_end":619,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510295,"byte_end":510298,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510300,"byte_end":510314,"line_start":621,"line_end":621,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510316,"byte_end":510319,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510321,"byte_end":510332,"line_start":623,"line_end":623,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510334,"byte_end":510361,"line_start":624,"line_end":624,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510363,"byte_end":510366,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 20];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510368,"byte_end":510400,"line_start":626,"line_end":626,"column_start":2,"column_end":34}},{"value":"/ let ptr = bv.as_mut_bitptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510402,"byte_end":510435,"line_start":627,"line_end":627,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510437,"byte_end":510440,"line_start":628,"line_end":628,"column_start":2,"column_end":5}},{"value":"/ let bits = unsafe { &mut *ptr };","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510442,"byte_end":510478,"line_start":629,"line_end":629,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(bv, bits);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510480,"byte_end":510505,"line_start":630,"line_end":630,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510507,"byte_end":510514,"line_start":631,"line_end":631,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510516,"byte_end":510525,"line_start":632,"line_end":632,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":510527,"byte_end":510557,"line_start":633,"line_end":633,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513044,"byte_end":513047,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"name":"new","qualname":"<BitVec<O, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `BitVec<O, T>`.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `BitVec<O, T>`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512668,"byte_end":512711,"line_start":42,"line_end":42,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512713,"byte_end":512716,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ The vector will not allocate until bits are pushed into it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512718,"byte_end":512781,"line_start":44,"line_end":44,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512783,"byte_end":512786,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512788,"byte_end":512802,"line_start":46,"line_end":46,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512804,"byte_end":512807,"line_start":47,"line_end":47,"column_start":2,"column_end":5}},{"value":"/ [`Vec::new`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.new)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512809,"byte_end":512889,"line_start":48,"line_end":48,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512891,"byte_end":512894,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512896,"byte_end":512910,"line_start":50,"line_end":50,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512912,"byte_end":512915,"line_start":51,"line_end":51,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512917,"byte_end":512928,"line_start":52,"line_end":52,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512930,"byte_end":512957,"line_start":53,"line_end":53,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512959,"byte_end":512962,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<LocalBits, usize>::new();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512964,"byte_end":513015,"line_start":55,"line_end":55,"column_start":2,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513017,"byte_end":513024,"line_start":56,"line_end":56,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513026,"byte_end":513035,"line_start":57,"line_end":57,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514357,"byte_end":514370,"line_start":104,"line_end":104,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BitVec<O, T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `BitVec<O, T>` with the specified capacity.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `BitVec<O, T>` with the specified capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513139,"byte_end":513210,"line_start":65,"line_end":65,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513212,"byte_end":513215,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ The vector will be able to hold at least `capacity` bits without","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513217,"byte_end":513285,"line_start":67,"line_end":67,"column_start":2,"column_end":70}},{"value":"/ reällocating. If `capacity` is 0, the vector will not allocate.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513287,"byte_end":513355,"line_start":68,"line_end":68,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513357,"byte_end":513360,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ It is important to note that although the returned vector has the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513362,"byte_end":513431,"line_start":70,"line_end":70,"column_start":2,"column_end":71}},{"value":"/ *capacity* specified, the vector will have a zero *length*. For an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513433,"byte_end":513503,"line_start":71,"line_end":71,"column_start":2,"column_end":72}},{"value":"/ explanation of the difference between length and capacity, see","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513505,"byte_end":513571,"line_start":72,"line_end":72,"column_start":2,"column_end":68}},{"value":"/ *[Capacity and reällocation]*.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513573,"byte_end":513608,"line_start":73,"line_end":73,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513610,"byte_end":513613,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513615,"byte_end":513629,"line_start":75,"line_end":75,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513631,"byte_end":513634,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ [`Vec::with_capacity`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.with_capacity)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513636,"byte_end":513736,"line_start":77,"line_end":77,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513738,"byte_end":513741,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513743,"byte_end":513755,"line_start":79,"line_end":79,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513757,"byte_end":513760,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ Panics if the requested capacity exceeds the vector’s limits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513762,"byte_end":513829,"line_start":81,"line_end":81,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513831,"byte_end":513834,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513836,"byte_end":513850,"line_start":83,"line_end":83,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513852,"byte_end":513855,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513857,"byte_end":513868,"line_start":85,"line_end":85,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513870,"byte_end":513897,"line_start":86,"line_end":86,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513899,"byte_end":513902,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<LocalBits, usize>::with_capacity(10);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513904,"byte_end":513967,"line_start":88,"line_end":88,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513969,"byte_end":513972,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ // The vector contains no items, even though it has capacity for more","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":513974,"byte_end":514047,"line_start":90,"line_end":90,"column_start":2,"column_end":75}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514049,"byte_end":514077,"line_start":91,"line_end":91,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514079,"byte_end":514082,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ // These are all done without reallocating...","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514084,"byte_end":514133,"line_start":93,"line_end":93,"column_start":2,"column_end":51}},{"value":"/ for i in 0..10 {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514135,"byte_end":514155,"line_start":94,"line_end":94,"column_start":2,"column_end":22}},{"value":"/   bv.push(true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514157,"byte_end":514177,"line_start":95,"line_end":95,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514179,"byte_end":514184,"line_start":96,"line_end":96,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514186,"byte_end":514189,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ // ...but this may make the vector reallocate","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514191,"byte_end":514240,"line_start":98,"line_end":98,"column_start":2,"column_end":51}},{"value":"/ bv.push(false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514242,"byte_end":514261,"line_start":99,"line_end":99,"column_start":2,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514263,"byte_end":514270,"line_start":100,"line_end":100,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514272,"byte_end":514275,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ [Capacity and reällocation]: #capacity-and-reallocation","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514277,"byte_end":514337,"line_start":102,"line_end":102,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514339,"byte_end":514348,"line_start":103,"line_end":103,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518316,"byte_end":518330,"line_start":209,"line_end":209,"column_start":16,"column_end":30},"name":"from_raw_parts","qualname":"<BitVec<O, T>>::from_raw_parts","value":"pub unsafe fn from_raw_parts(*mut BitSlice<O, T>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitVec<O, T>` directly from the raw components of another\n bit-vector.","sig":null,"attributes":[{"value":"/ Creates a `BitVec<O, T>` directly from the raw components of another","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514817,"byte_end":514889,"line_start":121,"line_end":121,"column_start":2,"column_end":74}},{"value":"/ bit-vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514891,"byte_end":514906,"line_start":122,"line_end":122,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514908,"byte_end":514911,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514913,"byte_end":514927,"line_start":124,"line_end":124,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514929,"byte_end":514932,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ [`Vec::from_raw_parts`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.from_raw_parts)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":514934,"byte_end":515036,"line_start":126,"line_end":126,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515038,"byte_end":515041,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515043,"byte_end":515064,"line_start":128,"line_end":128,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515066,"byte_end":515069,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ Ordinary vectors decompose into their buffer pointer and element length","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515071,"byte_end":515146,"line_start":130,"line_end":130,"column_start":2,"column_end":77}},{"value":"/ separately; bit vectors must keep these two components bundled into the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515148,"byte_end":515223,"line_start":131,"line_end":131,"column_start":2,"column_end":77}},{"value":"/ `*BitSlice` region pointer. As such, this only accepts two components;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515225,"byte_end":515299,"line_start":132,"line_end":132,"column_start":2,"column_end":76}},{"value":"/ the slice pointer and the buffer capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515301,"byte_end":515347,"line_start":133,"line_end":133,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515349,"byte_end":515352,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ `Vec` could define its raw parts as `*[T]` and `usize` also, but Rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515354,"byte_end":515427,"line_start":135,"line_end":135,"column_start":2,"column_end":75}},{"value":"/ does not make working with raw slice pointers easy.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515429,"byte_end":515484,"line_start":136,"line_end":136,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515486,"byte_end":515489,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515491,"byte_end":515503,"line_start":138,"line_end":138,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515505,"byte_end":515508,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This function panics if `pointer` is the null pointer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515510,"byte_end":515568,"line_start":140,"line_end":140,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515570,"byte_end":515573,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515575,"byte_end":515587,"line_start":142,"line_end":142,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515589,"byte_end":515592,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ This is highly unsafe, due to the number of invariants that aren’t","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515594,"byte_end":515666,"line_start":144,"line_end":144,"column_start":2,"column_end":72}},{"value":"/ checked:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515668,"byte_end":515680,"line_start":145,"line_end":145,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515682,"byte_end":515685,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ - `pointer` needs to have been previously allocated via `BitVec<O, T>`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515687,"byte_end":515761,"line_start":147,"line_end":147,"column_start":2,"column_end":76}},{"value":"/   (at least, it’s highly likely to be incorrect if it wasn’t).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515763,"byte_end":515833,"line_start":148,"line_end":148,"column_start":2,"column_end":68}},{"value":"/ - `T` needs to have the same size and alignment as what `pointer` was","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515835,"byte_end":515908,"line_start":149,"line_end":149,"column_start":2,"column_end":75}},{"value":"/   allocated with. (`T` having a less strict alignment is not sufficient;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515910,"byte_end":515986,"line_start":150,"line_end":150,"column_start":2,"column_end":78}},{"value":"/   the alignment really needs to be equal to satisfy the [`dealloc`]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":515988,"byte_end":516059,"line_start":151,"line_end":151,"column_start":2,"column_end":73}},{"value":"/   requirement that memory must be allocated and deällocated with the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516061,"byte_end":516134,"line_start":152,"line_end":152,"column_start":2,"column_end":74}},{"value":"/   same layout.)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516136,"byte_end":516155,"line_start":153,"line_end":153,"column_start":2,"column_end":21}},{"value":"/ - `capacity` needs to be the capacity that the pointer was allocated","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516157,"byte_end":516229,"line_start":154,"line_end":154,"column_start":2,"column_end":74}},{"value":"/   with.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516231,"byte_end":516242,"line_start":155,"line_end":155,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516244,"byte_end":516247,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ In addition to the invariants inherited from `Vec::from_raw_parts`, the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516249,"byte_end":516324,"line_start":157,"line_end":157,"column_start":2,"column_end":77}},{"value":"/ fact that this function takes a bit-slice pointer adds another one:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516326,"byte_end":516397,"line_start":158,"line_end":158,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516399,"byte_end":516402,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ - **`pointer` MUST NOT have had its value modified in any way in the**","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516404,"byte_end":516478,"line_start":160,"line_end":160,"column_start":2,"column_end":76}},{"value":"/ **time when it was outside of a `bitvec` container type.**","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516480,"byte_end":516542,"line_start":161,"line_end":161,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516544,"byte_end":516547,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ Violating these *will* cause problems like corrupting the allocator’s","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516549,"byte_end":516624,"line_start":163,"line_end":163,"column_start":2,"column_end":75}},{"value":"/ internal data structures. For example it is **not** safe to build a","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516626,"byte_end":516697,"line_start":164,"line_end":164,"column_start":2,"column_end":73}},{"value":"/ `BitVec<_, u8>` from a pointer to a C `char` array with length `size_t`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516699,"byte_end":516775,"line_start":165,"line_end":165,"column_start":2,"column_end":78}},{"value":"/ It’s also not safe to build one from a `BitVec<_, u16>` and its length,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516777,"byte_end":516854,"line_start":166,"line_end":166,"column_start":2,"column_end":77}},{"value":"/ becauset the allocator cares about the alignment, and these two types","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516856,"byte_end":516929,"line_start":167,"line_end":167,"column_start":2,"column_end":75}},{"value":"/ have different alignments. The buffer was allocated with alignment 2","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":516931,"byte_end":517003,"line_start":168,"line_end":168,"column_start":2,"column_end":74}},{"value":"/ (for `u16`), but after turning it into a `BitVec<_, u8>`, it’ll be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517005,"byte_end":517077,"line_start":169,"line_end":169,"column_start":2,"column_end":72}},{"value":"/ deällocated with alignment 1.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517079,"byte_end":517113,"line_start":170,"line_end":170,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517115,"byte_end":517118,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ The ownership of `pointer` is effectively transferred to the `BitVec<O,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517120,"byte_end":517195,"line_start":172,"line_end":172,"column_start":2,"column_end":77}},{"value":"/ T>` which may then deällocate, reällocate, or change the contents of","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517197,"byte_end":517271,"line_start":173,"line_end":173,"column_start":2,"column_end":74}},{"value":"/ memory pointed to by the pointer at will. Ensure that nothing else uses","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517273,"byte_end":517348,"line_start":174,"line_end":174,"column_start":2,"column_end":77}},{"value":"/ the pointer after calling this function.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517350,"byte_end":517394,"line_start":175,"line_end":175,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517396,"byte_end":517399,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517401,"byte_end":517415,"line_start":177,"line_end":177,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517417,"byte_end":517420,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517422,"byte_end":517433,"line_start":179,"line_end":179,"column_start":2,"column_end":13}},{"value":"/ # extern crate core;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517435,"byte_end":517459,"line_start":180,"line_end":180,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517461,"byte_end":517488,"line_start":181,"line_end":181,"column_start":2,"column_end":29}},{"value":"/ use bitvec as bv;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517490,"byte_end":517511,"line_start":182,"line_end":182,"column_start":2,"column_end":23}},{"value":"/ use core::mem;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517513,"byte_end":517531,"line_start":183,"line_end":183,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517533,"byte_end":517536,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517538,"byte_end":517571,"line_start":185,"line_end":185,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517573,"byte_end":517576,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ // Prevent running `bv`’s destructor so we are in complete control","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517578,"byte_end":517650,"line_start":187,"line_end":187,"column_start":2,"column_end":72}},{"value":"/ // of the allocation.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517652,"byte_end":517677,"line_start":188,"line_end":188,"column_start":2,"column_end":27}},{"value":"/ let mut bv = mem::ManuallyDrop::new(bv);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517679,"byte_end":517723,"line_start":189,"line_end":189,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517725,"byte_end":517728,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ // Pull out the various important pieces of information about `bv`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517730,"byte_end":517800,"line_start":191,"line_end":191,"column_start":2,"column_end":72}},{"value":"/ let p = bv.as_mut_ptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517802,"byte_end":517830,"line_start":192,"line_end":192,"column_start":2,"column_end":30}},{"value":"/ let e = bv.elements();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517832,"byte_end":517858,"line_start":193,"line_end":193,"column_start":2,"column_end":28}},{"value":"/ let cap = bv.capacity();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517860,"byte_end":517888,"line_start":194,"line_end":194,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517890,"byte_end":517893,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517895,"byte_end":517907,"line_start":196,"line_end":196,"column_start":2,"column_end":14}},{"value":"/   let bits = bv::slice::from_raw_parts_mut::<LocalBits, _>(p, e);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517909,"byte_end":517978,"line_start":197,"line_end":197,"column_start":2,"column_end":71}},{"value":"/   let len = bits.len();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":517980,"byte_end":518007,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518009,"byte_end":518012,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/   // Overwrite memory with a new pattern","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518014,"byte_end":518058,"line_start":200,"line_end":200,"column_start":2,"column_end":46}},{"value":"/   bits.iter_mut().for_each(|mut b| *b = true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518060,"byte_end":518110,"line_start":201,"line_end":201,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518112,"byte_end":518115,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/   // Put everything back together into a BitVec","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518117,"byte_end":518168,"line_start":203,"line_end":203,"column_start":2,"column_end":53}},{"value":"/   let rebuilt = BitVec::from_raw_parts(bits as *mut _, cap);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518170,"byte_end":518234,"line_start":204,"line_end":204,"column_start":2,"column_end":66}},{"value":"/   assert_eq!(rebuilt.len(), len);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518236,"byte_end":518273,"line_start":205,"line_end":205,"column_start":2,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518275,"byte_end":518280,"line_start":206,"line_end":206,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518282,"byte_end":518289,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518291,"byte_end":518300,"line_start":208,"line_end":208,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519027,"byte_end":519035,"line_start":238,"line_end":238,"column_start":9,"column_end":17},"name":"capacity","qualname":"<BitVec<O, T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits the vector can hold without reällocating.","sig":null,"attributes":[{"value":"/ Returns the number of bits the vector can hold without reällocating.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518630,"byte_end":518703,"line_start":223,"line_end":223,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518705,"byte_end":518708,"line_start":224,"line_end":224,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518710,"byte_end":518724,"line_start":225,"line_end":225,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518726,"byte_end":518729,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ [`Vec::capacity`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.capacity)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518731,"byte_end":518821,"line_start":227,"line_end":227,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518823,"byte_end":518826,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518828,"byte_end":518842,"line_start":229,"line_end":229,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518844,"byte_end":518847,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518849,"byte_end":518860,"line_start":231,"line_end":231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518862,"byte_end":518889,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518891,"byte_end":518894,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ let bv: BitVec<LocalBits, usize> = BitVec::with_capacity(100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518896,"byte_end":518962,"line_start":234,"line_end":234,"column_start":2,"column_end":68}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":518964,"byte_end":518998,"line_start":235,"line_end":235,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519000,"byte_end":519007,"line_start":236,"line_end":236,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519009,"byte_end":519018,"line_start":237,"line_end":237,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520108,"byte_end":520115,"line_start":272,"line_end":272,"column_start":9,"column_end":16},"name":"reserve","qualname":"<BitVec<O, T>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more bits to be inserted in\n the given `BitVec<O, T>`. The collection may reserve more space to avoid\n frequent reällocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more bits to be inserted in","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519380,"byte_end":519455,"line_start":248,"line_end":248,"column_start":2,"column_end":77}},{"value":"/ the given `BitVec<O, T>`. The collection may reserve more space to avoid","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519457,"byte_end":519533,"line_start":249,"line_end":249,"column_start":2,"column_end":78}},{"value":"/ frequent reällocations. After calling `reserve`, capacity will be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519535,"byte_end":519605,"line_start":250,"line_end":250,"column_start":2,"column_end":71}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519607,"byte_end":519678,"line_start":251,"line_end":251,"column_start":2,"column_end":73}},{"value":"/ capacity is already sufficient.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519680,"byte_end":519715,"line_start":252,"line_end":252,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519717,"byte_end":519720,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519722,"byte_end":519736,"line_start":254,"line_end":254,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519738,"byte_end":519741,"line_start":255,"line_end":255,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.reserve)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519743,"byte_end":519831,"line_start":256,"line_end":256,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519833,"byte_end":519836,"line_start":257,"line_end":257,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519838,"byte_end":519850,"line_start":258,"line_end":258,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519852,"byte_end":519855,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the vector’s limits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519857,"byte_end":519918,"line_start":260,"line_end":260,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519920,"byte_end":519923,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519925,"byte_end":519939,"line_start":262,"line_end":262,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519941,"byte_end":519944,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519946,"byte_end":519957,"line_start":264,"line_end":264,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519959,"byte_end":519986,"line_start":265,"line_end":265,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519988,"byte_end":519991,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":519993,"byte_end":520021,"line_start":267,"line_end":267,"column_start":2,"column_end":30}},{"value":"/ bv.reserve(100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520023,"byte_end":520043,"line_start":268,"line_end":268,"column_start":2,"column_end":22}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520045,"byte_end":520079,"line_start":269,"line_end":269,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520081,"byte_end":520088,"line_start":270,"line_end":270,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520090,"byte_end":520099,"line_start":271,"line_end":271,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521700,"byte_end":521713,"line_start":322,"line_end":322,"column_start":9,"column_end":22},"name":"reserve_exact","qualname":"<BitVec<O, T>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more bits to be\n inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more bits to be","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520793,"byte_end":520867,"line_start":295,"line_end":295,"column_start":2,"column_end":76}},{"value":"/ inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520869,"byte_end":520941,"line_start":296,"line_end":296,"column_start":2,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":520943,"byte_end":521015,"line_start":297,"line_end":297,"column_start":2,"column_end":74}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521017,"byte_end":521072,"line_start":298,"line_end":298,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521074,"byte_end":521077,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521079,"byte_end":521149,"line_start":300,"line_end":300,"column_start":2,"column_end":72}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521151,"byte_end":521223,"line_start":301,"line_end":301,"column_start":2,"column_end":74}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521225,"byte_end":521289,"line_start":302,"line_end":302,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521291,"byte_end":521294,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521296,"byte_end":521310,"line_start":304,"line_end":304,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521312,"byte_end":521315,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve_exact`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.reserve_exact)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521317,"byte_end":521417,"line_start":306,"line_end":306,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521419,"byte_end":521422,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521424,"byte_end":521436,"line_start":308,"line_end":308,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521438,"byte_end":521441,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the vector’s limits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521443,"byte_end":521504,"line_start":310,"line_end":310,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521506,"byte_end":521509,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521511,"byte_end":521525,"line_start":312,"line_end":312,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521527,"byte_end":521530,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521532,"byte_end":521543,"line_start":314,"line_end":314,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521545,"byte_end":521572,"line_start":315,"line_end":315,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521574,"byte_end":521577,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521579,"byte_end":521607,"line_start":317,"line_end":317,"column_start":2,"column_end":30}},{"value":"/ bv.reserve_exact(100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521609,"byte_end":521635,"line_start":318,"line_end":318,"column_start":2,"column_end":28}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521637,"byte_end":521671,"line_start":319,"line_end":319,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521673,"byte_end":521680,"line_start":320,"line_end":320,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":521682,"byte_end":521691,"line_start":321,"line_end":321,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522907,"byte_end":522920,"line_start":363,"line_end":363,"column_start":9,"column_end":22},"name":"shrink_to_fit","qualname":"<BitVec<O, T>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector as much as possible.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522248,"byte_end":522307,"line_start":342,"line_end":342,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522309,"byte_end":522312,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ It will drop down as close as possible to the length but the allocator","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522314,"byte_end":522388,"line_start":344,"line_end":344,"column_start":2,"column_end":76}},{"value":"/ may still inform the vector that there is space for a few more bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522390,"byte_end":522462,"line_start":345,"line_end":345,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522464,"byte_end":522467,"line_start":346,"line_end":346,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522469,"byte_end":522483,"line_start":347,"line_end":347,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522485,"byte_end":522488,"line_start":348,"line_end":348,"column_start":2,"column_end":5}},{"value":"/ [`Vec::shrink_to_fit`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.shrink_to_fit)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522490,"byte_end":522590,"line_start":349,"line_end":349,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522592,"byte_end":522595,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522597,"byte_end":522611,"line_start":351,"line_end":351,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522613,"byte_end":522616,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522618,"byte_end":522629,"line_start":353,"line_end":353,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522631,"byte_end":522658,"line_start":354,"line_end":354,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522660,"byte_end":522663,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<LocalBits, usize>::with_capacity(100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522665,"byte_end":522729,"line_start":356,"line_end":356,"column_start":2,"column_end":66}},{"value":"/ bv.extend([false, true, false].iter().copied());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522731,"byte_end":522783,"line_start":357,"line_end":357,"column_start":2,"column_end":54}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522785,"byte_end":522819,"line_start":358,"line_end":358,"column_start":2,"column_end":36}},{"value":"/ bv.shrink_to_fit();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522821,"byte_end":522844,"line_start":359,"line_end":359,"column_start":2,"column_end":25}},{"value":"/ assert!(bv.capacity() >= 3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522846,"byte_end":522878,"line_start":360,"line_end":360,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522880,"byte_end":522887,"line_start":361,"line_end":361,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522889,"byte_end":522898,"line_start":362,"line_end":362,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523995,"byte_end":524011,"line_start":406,"line_end":406,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitVec<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into [`Box<[T]>`].","sig":null,"attributes":[{"value":"/ Converts the vector into [`Box<[T]>`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":522979,"byte_end":523021,"line_start":367,"line_end":367,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523023,"byte_end":523026,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523028,"byte_end":523077,"line_start":369,"line_end":369,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523079,"byte_end":523082,"line_start":370,"line_end":370,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523084,"byte_end":523098,"line_start":371,"line_end":371,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523100,"byte_end":523103,"line_start":372,"line_end":372,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.into_boxed_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523105,"byte_end":523211,"line_start":373,"line_end":373,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523213,"byte_end":523216,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523218,"byte_end":523232,"line_start":375,"line_end":375,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523234,"byte_end":523237,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ See [`into_boxed_bitslice`] for a `BitVec -> BitBox` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523239,"byte_end":523306,"line_start":377,"line_end":377,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523308,"byte_end":523311,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523313,"byte_end":523327,"line_start":379,"line_end":379,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523329,"byte_end":523332,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523334,"byte_end":523345,"line_start":381,"line_end":381,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523347,"byte_end":523374,"line_start":382,"line_end":382,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523376,"byte_end":523379,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523381,"byte_end":523411,"line_start":384,"line_end":384,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523413,"byte_end":523416,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ let slice = bv.into_boxed_slice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523418,"byte_end":523456,"line_start":386,"line_end":386,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(slice.len(), 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523458,"byte_end":523489,"line_start":387,"line_end":387,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523491,"byte_end":523498,"line_start":388,"line_end":388,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523500,"byte_end":523503,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ Any excess capacity is removed:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523505,"byte_end":523540,"line_start":390,"line_end":390,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523542,"byte_end":523545,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523547,"byte_end":523558,"line_start":392,"line_end":392,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523560,"byte_end":523587,"line_start":393,"line_end":393,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523589,"byte_end":523592,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523594,"byte_end":523646,"line_start":395,"line_end":395,"column_start":2,"column_end":54}},{"value":"/ bv.extend([false, true, false].iter().copied());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523648,"byte_end":523700,"line_start":396,"line_end":396,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523702,"byte_end":523705,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523707,"byte_end":523741,"line_start":398,"line_end":398,"column_start":2,"column_end":36}},{"value":"/ let slice = bv.into_boxed_slice();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523743,"byte_end":523781,"line_start":399,"line_end":399,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(slice.into_vec().capacity(), 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523783,"byte_end":523830,"line_start":400,"line_end":400,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523832,"byte_end":523839,"line_start":401,"line_end":401,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523841,"byte_end":523844,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ [`Box<[T]>`]: https://doc.rust-lang.org/alloc/boxed/struct.Box.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523846,"byte_end":523917,"line_start":403,"line_end":403,"column_start":2,"column_end":73}},{"value":"/ [`into_boxed_bitslice`]: #method.into_boxed_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523919,"byte_end":523975,"line_start":404,"line_end":404,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":523977,"byte_end":523986,"line_start":405,"line_end":405,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525597,"byte_end":525605,"line_start":465,"line_end":465,"column_start":9,"column_end":17},"name":"truncate","qualname":"<BitVec<O, T>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` bits and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` bits and dropping the rest.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524074,"byte_end":524150,"line_start":410,"line_end":410,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524152,"byte_end":524155,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ If `len` is greater than the vector’s current length, this has no","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524157,"byte_end":524228,"line_start":412,"line_end":412,"column_start":2,"column_end":71}},{"value":"/ effect.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524230,"byte_end":524241,"line_start":413,"line_end":413,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524243,"byte_end":524246,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ The [`drain`] method can emulate `truncate`, but causes the excess bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524248,"byte_end":524323,"line_start":415,"line_end":415,"column_start":2,"column_end":77}},{"value":"/ to be returned instead of dropped.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524325,"byte_end":524363,"line_start":416,"line_end":416,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524365,"byte_end":524368,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524370,"byte_end":524442,"line_start":418,"line_end":418,"column_start":2,"column_end":74}},{"value":"/ vector, **nor does it erase truncated memory**. Bits in the allocated","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524444,"byte_end":524517,"line_start":419,"line_end":419,"column_start":2,"column_end":75}},{"value":"/ memory that are outside of the `.as_bitslice()` view always have","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524519,"byte_end":524587,"line_start":420,"line_end":420,"column_start":2,"column_end":70}},{"value":"/ **unspecified** values, and cannot be relied upon to be zero.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524589,"byte_end":524654,"line_start":421,"line_end":421,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524656,"byte_end":524659,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524661,"byte_end":524675,"line_start":423,"line_end":423,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524677,"byte_end":524680,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ [`Vec::truncate`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.truncate)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524682,"byte_end":524772,"line_start":425,"line_end":425,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524774,"byte_end":524777,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524779,"byte_end":524793,"line_start":427,"line_end":427,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524795,"byte_end":524798,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ Truncating a five bit vector to two bits:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524800,"byte_end":524845,"line_start":429,"line_end":429,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524847,"byte_end":524850,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524852,"byte_end":524863,"line_start":431,"line_end":431,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524865,"byte_end":524892,"line_start":432,"line_end":432,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524894,"byte_end":524897,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 5];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524899,"byte_end":524930,"line_start":434,"line_end":434,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524932,"byte_end":524951,"line_start":435,"line_end":435,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524953,"byte_end":524981,"line_start":436,"line_end":436,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.as_slice()[0].count_ones() >= 5);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":524983,"byte_end":525031,"line_start":437,"line_end":437,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525033,"byte_end":525040,"line_start":438,"line_end":438,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525042,"byte_end":525045,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ No truncation occurs when `len` is greater than the vector’s current","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525047,"byte_end":525121,"line_start":440,"line_end":440,"column_start":2,"column_end":74}},{"value":"/ length:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525123,"byte_end":525134,"line_start":441,"line_end":441,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525136,"byte_end":525139,"line_start":442,"line_end":442,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525141,"byte_end":525152,"line_start":443,"line_end":443,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525154,"byte_end":525181,"line_start":444,"line_end":444,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525183,"byte_end":525186,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525188,"byte_end":525219,"line_start":446,"line_end":446,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(8);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525221,"byte_end":525240,"line_start":447,"line_end":447,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525242,"byte_end":525270,"line_start":448,"line_end":448,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525272,"byte_end":525279,"line_start":449,"line_end":449,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525281,"byte_end":525284,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ Truncating when `len == 0` is equivalent to calling the [`clear`]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525286,"byte_end":525355,"line_start":451,"line_end":451,"column_start":2,"column_end":71}},{"value":"/ method.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525357,"byte_end":525368,"line_start":452,"line_end":452,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525370,"byte_end":525373,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525375,"byte_end":525386,"line_start":454,"line_end":454,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525388,"byte_end":525415,"line_start":455,"line_end":455,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525417,"byte_end":525420,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 3];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525422,"byte_end":525453,"line_start":457,"line_end":457,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(0);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525455,"byte_end":525474,"line_start":458,"line_end":458,"column_start":2,"column_end":21}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525476,"byte_end":525503,"line_start":459,"line_end":459,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525505,"byte_end":525512,"line_start":460,"line_end":460,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525514,"byte_end":525517,"line_start":461,"line_end":461,"column_start":2,"column_end":5}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525519,"byte_end":525547,"line_start":462,"line_end":462,"column_start":2,"column_end":30}},{"value":"/ [`drain`]: #method.drain","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525549,"byte_end":525577,"line_start":463,"line_end":463,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525579,"byte_end":525588,"line_start":464,"line_end":464,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526327,"byte_end":526335,"line_start":495,"line_end":495,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitVec<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts an element slice containing the entire vector.","sig":null,"attributes":[{"value":"/ Extracts an element slice containing the entire vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525696,"byte_end":525755,"line_start":471,"line_end":471,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525757,"byte_end":525760,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525762,"byte_end":525776,"line_start":473,"line_end":473,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525778,"byte_end":525781,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525783,"byte_end":525873,"line_start":475,"line_end":475,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525875,"byte_end":525878,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525880,"byte_end":525894,"line_start":477,"line_end":477,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525896,"byte_end":525899,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitslice`] for a `&BitVec -> &BitSlice` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525901,"byte_end":525964,"line_start":479,"line_end":479,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525966,"byte_end":525969,"line_start":480,"line_end":480,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525971,"byte_end":525985,"line_start":481,"line_end":481,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525987,"byte_end":525990,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":525992,"byte_end":526003,"line_start":483,"line_end":483,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526005,"byte_end":526036,"line_start":484,"line_end":484,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526038,"byte_end":526065,"line_start":485,"line_end":485,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526067,"byte_end":526098,"line_start":486,"line_end":486,"column_start":2,"column_end":33}},{"value":"/ let buffer = bitvec![Msb0, u8; 0, 1, 0, 1, 1, 0, 0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526100,"byte_end":526159,"line_start":487,"line_end":487,"column_start":2,"column_end":61}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526161,"byte_end":526210,"line_start":488,"line_end":488,"column_start":2,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526212,"byte_end":526219,"line_start":489,"line_end":489,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526221,"byte_end":526228,"line_start":490,"line_end":490,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526230,"byte_end":526233,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: #method.as_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526235,"byte_end":526275,"line_start":492,"line_end":492,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526277,"byte_end":526286,"line_start":493,"line_end":493,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526288,"byte_end":526318,"line_start":494,"line_end":494,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527158,"byte_end":527170,"line_start":525,"line_end":525,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitVec<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526506,"byte_end":526556,"line_start":501,"line_end":501,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526558,"byte_end":526561,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526563,"byte_end":526577,"line_start":503,"line_end":503,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526579,"byte_end":526582,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_mut_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526584,"byte_end":526682,"line_start":505,"line_end":505,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526684,"byte_end":526687,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526689,"byte_end":526703,"line_start":507,"line_end":507,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526705,"byte_end":526708,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitslice`] for a `&mut BitVec -> &mut BitSlice` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526710,"byte_end":526785,"line_start":509,"line_end":509,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526787,"byte_end":526790,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526792,"byte_end":526806,"line_start":511,"line_end":511,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526808,"byte_end":526811,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526813,"byte_end":526824,"line_start":513,"line_end":513,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526826,"byte_end":526857,"line_start":514,"line_end":514,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526859,"byte_end":526886,"line_start":515,"line_end":515,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526888,"byte_end":526918,"line_start":516,"line_end":516,"column_start":2,"column_end":32}},{"value":"/ let mut buffer = bitvec![Msb0, u8; 0; 24];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526920,"byte_end":526966,"line_start":517,"line_end":517,"column_start":2,"column_end":48}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":526968,"byte_end":527033,"line_start":518,"line_end":518,"column_start":2,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527035,"byte_end":527042,"line_start":519,"line_end":519,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527044,"byte_end":527051,"line_start":520,"line_end":520,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527053,"byte_end":527056,"line_start":521,"line_end":521,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitslice`]: #method.as_mut_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527058,"byte_end":527106,"line_start":522,"line_end":522,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527108,"byte_end":527117,"line_start":523,"line_end":523,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527119,"byte_end":527149,"line_start":524,"line_end":524,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528425,"byte_end":528431,"line_start":565,"line_end":565,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitVec<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the vector’s buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527351,"byte_end":527402,"line_start":531,"line_end":531,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527404,"byte_end":527407,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527409,"byte_end":527477,"line_start":533,"line_end":533,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527479,"byte_end":527554,"line_start":534,"line_end":534,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reällocated, which would also make","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527556,"byte_end":527633,"line_start":535,"line_end":535,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527635,"byte_end":527666,"line_start":536,"line_end":536,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527668,"byte_end":527671,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527673,"byte_end":527732,"line_start":538,"line_end":538,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is never written to (except inside an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527734,"byte_end":527804,"line_start":539,"line_end":539,"column_start":2,"column_end":72}},{"value":"/ `UnsafeCell`) using this pointer or any pointer derived from it. If you","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527806,"byte_end":527881,"line_start":540,"line_end":540,"column_start":2,"column_end":77}},{"value":"/ need to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527883,"byte_end":527948,"line_start":541,"line_end":541,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527950,"byte_end":527953,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527955,"byte_end":527969,"line_start":543,"line_end":543,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527971,"byte_end":527974,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_ptr)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":527976,"byte_end":528062,"line_start":545,"line_end":545,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528064,"byte_end":528067,"line_start":546,"line_end":546,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528069,"byte_end":528083,"line_start":547,"line_end":547,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528085,"byte_end":528088,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitptr`] for a `&BitVec -> *const BitSlice` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528090,"byte_end":528157,"line_start":549,"line_end":549,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528159,"byte_end":528162,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528164,"byte_end":528178,"line_start":551,"line_end":551,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528180,"byte_end":528183,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528185,"byte_end":528196,"line_start":553,"line_end":553,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528198,"byte_end":528225,"line_start":554,"line_end":554,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528227,"byte_end":528230,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Lsb0; 0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528232,"byte_end":528271,"line_start":556,"line_end":556,"column_start":2,"column_end":41}},{"value":"/ let bv_ptr = bv.as_ptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528273,"byte_end":528302,"line_start":557,"line_end":557,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528304,"byte_end":528307,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528309,"byte_end":528321,"line_start":559,"line_end":559,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(*bv_ptr, 0b1010);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528323,"byte_end":528357,"line_start":560,"line_end":560,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528359,"byte_end":528364,"line_start":561,"line_end":561,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528366,"byte_end":528373,"line_start":562,"line_end":562,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528375,"byte_end":528384,"line_start":563,"line_end":563,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528386,"byte_end":528416,"line_start":564,"line_end":564,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529478,"byte_end":529488,"line_start":604,"line_end":604,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitVec<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the vector’s buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528495,"byte_end":528558,"line_start":569,"line_end":569,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528560,"byte_end":528563,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528565,"byte_end":528633,"line_start":571,"line_end":571,"column_start":2,"column_end":70}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528635,"byte_end":528710,"line_start":572,"line_end":572,"column_start":2,"column_end":77}},{"value":"/ the vector may cause its buffer to be reällocated, which would also make","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528712,"byte_end":528789,"line_start":573,"line_end":573,"column_start":2,"column_end":78}},{"value":"/ any pointers to it invalid.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528791,"byte_end":528822,"line_start":574,"line_end":574,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528824,"byte_end":528827,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528829,"byte_end":528843,"line_start":576,"line_end":576,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528845,"byte_end":528848,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.as_mut_ptr)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528850,"byte_end":528944,"line_start":578,"line_end":578,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528946,"byte_end":528949,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528951,"byte_end":528965,"line_start":580,"line_end":580,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528967,"byte_end":528970,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitptr`] for a `&mut BitVec -> *mut BitSlice` transform.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":528972,"byte_end":529045,"line_start":582,"line_end":582,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529047,"byte_end":529050,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ # Eaxmples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529052,"byte_end":529066,"line_start":584,"line_end":584,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529068,"byte_end":529071,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529073,"byte_end":529084,"line_start":586,"line_end":586,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529086,"byte_end":529113,"line_start":587,"line_end":587,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529115,"byte_end":529118,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ let size = 4;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529120,"byte_end":529137,"line_start":589,"line_end":589,"column_start":2,"column_end":19}},{"value":"/ let mut bv: BitVec<Msb0, usize> = BitVec::with_capacity(size);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529139,"byte_end":529205,"line_start":590,"line_end":590,"column_start":2,"column_end":68}},{"value":"/ let bv_ptr = bv.as_mut_ptr();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529207,"byte_end":529240,"line_start":591,"line_end":591,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529242,"byte_end":529245,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529247,"byte_end":529259,"line_start":593,"line_end":593,"column_start":2,"column_end":14}},{"value":"/   *bv_ptr = !0;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529261,"byte_end":529280,"line_start":594,"line_end":594,"column_start":2,"column_end":21}},{"value":"/   bv.set_len(size);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529282,"byte_end":529305,"line_start":595,"line_end":595,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529307,"byte_end":529312,"line_start":596,"line_end":596,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv.len(), 4);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529314,"byte_end":529342,"line_start":597,"line_end":597,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.all());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529344,"byte_end":529366,"line_start":598,"line_end":598,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529368,"byte_end":529375,"line_start":599,"line_end":599,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529377,"byte_end":529380,"line_start":600,"line_end":600,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_bitptr`]: #method.as_mut_bitptr","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529382,"byte_end":529426,"line_start":601,"line_end":601,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529428,"byte_end":529437,"line_start":602,"line_end":602,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529439,"byte_end":529469,"line_start":603,"line_end":603,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531499,"byte_end":531506,"line_start":668,"line_end":668,"column_start":16,"column_end":23},"name":"set_len","qualname":"<BitVec<O, T>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529552,"byte_end":529601,"line_start":608,"line_end":608,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529603,"byte_end":529606,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529608,"byte_end":529675,"line_start":610,"line_end":610,"column_start":2,"column_end":69}},{"value":"/ invariants of the type. Normally changing the length of a vector is done","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529677,"byte_end":529753,"line_start":611,"line_end":611,"column_start":2,"column_end":78}},{"value":"/ using one of the safe operations instead, such as [`truncate`],","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529755,"byte_end":529822,"line_start":612,"line_end":612,"column_start":2,"column_end":69}},{"value":"/ [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529824,"byte_end":529865,"line_start":613,"line_end":613,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529867,"byte_end":529870,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529872,"byte_end":529886,"line_start":615,"line_end":615,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529888,"byte_end":529891,"line_start":616,"line_end":616,"column_start":2,"column_end":5}},{"value":"/ [`Vec::set_len`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.set_len)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529893,"byte_end":529981,"line_start":617,"line_end":617,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529983,"byte_end":529986,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":529988,"byte_end":530000,"line_start":619,"line_end":619,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530002,"byte_end":530005,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530007,"byte_end":530068,"line_start":621,"line_end":621,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530070,"byte_end":530073,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530075,"byte_end":530089,"line_start":623,"line_end":623,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530091,"byte_end":530094,"line_start":624,"line_end":624,"column_start":2,"column_end":5}},{"value":"/ This method can be useful for situations in which the vector is serving","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530096,"byte_end":530171,"line_start":625,"line_end":625,"column_start":2,"column_end":77}},{"value":"/ as a buffer for other code, particularly over FFI:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530173,"byte_end":530227,"line_start":626,"line_end":626,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530229,"byte_end":530232,"line_start":627,"line_end":627,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530234,"byte_end":530245,"line_start":628,"line_end":628,"column_start":2,"column_end":13}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530247,"byte_end":530273,"line_start":629,"line_end":629,"column_start":2,"column_end":28}},{"value":"/ # #![allow(improper_ctypes)]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530275,"byte_end":530307,"line_start":630,"line_end":630,"column_start":2,"column_end":34}},{"value":"/ # const ERL_OK: i32 = 0;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530309,"byte_end":530337,"line_start":631,"line_end":631,"column_start":2,"column_end":30}},{"value":"/ # extern \"C\" {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530339,"byte_end":530357,"line_start":632,"line_end":632,"column_start":2,"column_end":20}},{"value":"/ #   fn erl_read_bits(","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530359,"byte_end":530384,"line_start":633,"line_end":633,"column_start":2,"column_end":27}},{"value":"/ #     bv: *mut BitVec<Msb0, u8>,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530386,"byte_end":530422,"line_start":634,"line_end":634,"column_start":2,"column_end":38}},{"value":"/ #     bits_reqd: usize,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530424,"byte_end":530451,"line_start":635,"line_end":635,"column_start":2,"column_end":29}},{"value":"/ #     bits_read: *mut usize,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530453,"byte_end":530485,"line_start":636,"line_end":636,"column_start":2,"column_end":34}},{"value":"/ #   ) -> i32;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530487,"byte_end":530504,"line_start":637,"line_end":637,"column_start":2,"column_end":19}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530506,"byte_end":530513,"line_start":638,"line_end":638,"column_start":2,"column_end":9}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530515,"byte_end":530542,"line_start":639,"line_end":639,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530544,"byte_end":530547,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ // `bitvec` could pair with `rustler` for a better bitstream","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530549,"byte_end":530613,"line_start":641,"line_end":641,"column_start":2,"column_end":66}},{"value":"/ type ErlBitstring = BitVec<Msb0, u8>;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530615,"byte_end":530656,"line_start":642,"line_end":642,"column_start":2,"column_end":43}},{"value":"/ # pub fn _test() {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530658,"byte_end":530680,"line_start":643,"line_end":643,"column_start":2,"column_end":24}},{"value":"/ let mut bits_read = 0;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530682,"byte_end":530708,"line_start":644,"line_end":644,"column_start":2,"column_end":28}},{"value":"/ // An imaginary Erlang function wants a large bit buffer.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530710,"byte_end":530771,"line_start":645,"line_end":645,"column_start":2,"column_end":63}},{"value":"/ let mut buf = ErlBitstring::with_capacity(32_768);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530773,"byte_end":530827,"line_start":646,"line_end":646,"column_start":2,"column_end":56}},{"value":"/ // SAFETY: When `erl_read_bits` returns `ERL_OK`, it holds that:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530829,"byte_end":530897,"line_start":647,"line_end":647,"column_start":2,"column_end":70}},{"value":"/ // 1. `bits_read` bits were initialized.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530899,"byte_end":530943,"line_start":648,"line_end":648,"column_start":2,"column_end":46}},{"value":"/ // 2. `bits_read` <= the capacity (32_768)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530945,"byte_end":530991,"line_start":649,"line_end":649,"column_start":2,"column_end":48}},{"value":"/ // which makes `set_len` safe to call.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":530993,"byte_end":531035,"line_start":650,"line_end":650,"column_start":2,"column_end":44}},{"value":"/ unsafe {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531037,"byte_end":531049,"line_start":651,"line_end":651,"column_start":2,"column_end":14}},{"value":"/   // Make the FFI call...","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531051,"byte_end":531080,"line_start":652,"line_end":652,"column_start":2,"column_end":31}},{"value":"/   let status = erl_read_bits(&mut buf, 10, &mut bits_read);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531082,"byte_end":531145,"line_start":653,"line_end":653,"column_start":2,"column_end":65}},{"value":"/   if status == ERL_OK {","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531147,"byte_end":531174,"line_start":654,"line_end":654,"column_start":2,"column_end":29}},{"value":"/     // ...and update the length to what was read in.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531176,"byte_end":531232,"line_start":655,"line_end":655,"column_start":2,"column_end":58}},{"value":"/     buf.set_len(bits_read);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531234,"byte_end":531265,"line_start":656,"line_end":656,"column_start":2,"column_end":33}},{"value":"/   }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531267,"byte_end":531274,"line_start":657,"line_end":657,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531276,"byte_end":531281,"line_start":658,"line_end":658,"column_start":2,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531283,"byte_end":531290,"line_start":659,"line_end":659,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531292,"byte_end":531299,"line_start":660,"line_end":660,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531301,"byte_end":531304,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531306,"byte_end":531342,"line_start":662,"line_end":662,"column_start":2,"column_end":38}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531344,"byte_end":531372,"line_start":663,"line_end":663,"column_start":2,"column_end":30}},{"value":"/ [`extend`]: #method.extend","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531374,"byte_end":531404,"line_start":664,"line_end":664,"column_start":2,"column_end":32}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531406,"byte_end":531436,"line_start":665,"line_end":665,"column_start":2,"column_end":32}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531438,"byte_end":531472,"line_start":666,"line_end":666,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531474,"byte_end":531483,"line_start":667,"line_end":667,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532638,"byte_end":532649,"line_start":717,"line_end":717,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<BitVec<O, T>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a bit from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes a bit from the vector and returns it.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":531981,"byte_end":532030,"line_start":690,"line_end":690,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532032,"byte_end":532035,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ The removed bit is replaced by the last bit of the vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532037,"byte_end":532099,"line_start":692,"line_end":692,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532101,"byte_end":532104,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532106,"byte_end":532155,"line_start":694,"line_end":694,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532157,"byte_end":532160,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532162,"byte_end":532176,"line_start":696,"line_end":696,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532178,"byte_end":532181,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ [`Vec::swap_remove`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.swap_remove)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532183,"byte_end":532279,"line_start":698,"line_end":698,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532281,"byte_end":532284,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532286,"byte_end":532298,"line_start":700,"line_end":700,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532300,"byte_end":532303,"line_start":701,"line_end":701,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532305,"byte_end":532344,"line_start":702,"line_end":702,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532346,"byte_end":532349,"line_start":703,"line_end":703,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532351,"byte_end":532365,"line_start":704,"line_end":704,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532367,"byte_end":532370,"line_start":705,"line_end":705,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532372,"byte_end":532383,"line_start":706,"line_end":706,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532385,"byte_end":532412,"line_start":707,"line_end":707,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532414,"byte_end":532417,"line_start":708,"line_end":708,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532419,"byte_end":532459,"line_start":709,"line_end":709,"column_start":2,"column_end":42}},{"value":"/ assert!(!bv.swap_remove(1));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532461,"byte_end":532493,"line_start":710,"line_end":710,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532495,"byte_end":532533,"line_start":711,"line_end":711,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532535,"byte_end":532538,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ assert!(!bv.swap_remove(0));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532540,"byte_end":532572,"line_start":713,"line_end":713,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532574,"byte_end":532609,"line_start":714,"line_end":714,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532611,"byte_end":532618,"line_start":715,"line_end":715,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532620,"byte_end":532629,"line_start":716,"line_end":716,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533505,"byte_end":533511,"line_start":752,"line_end":752,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitVec<O, T>>::insert","value":"pub fn insert(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a bit at position `index` within the vector, shifting all bits\n after it to the right.","sig":null,"attributes":[{"value":"/ Inserts a bit at position `index` within the vector, shifting all bits","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":532955,"byte_end":533029,"line_start":729,"line_end":729,"column_start":2,"column_end":76}},{"value":"/ after it to the right.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533031,"byte_end":533057,"line_start":730,"line_end":730,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533059,"byte_end":533062,"line_start":731,"line_end":731,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533064,"byte_end":533078,"line_start":732,"line_end":732,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533080,"byte_end":533083,"line_start":733,"line_end":733,"column_start":2,"column_end":5}},{"value":"/ [`Vec::insert`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.insert)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533085,"byte_end":533171,"line_start":734,"line_end":734,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533173,"byte_end":533176,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533178,"byte_end":533190,"line_start":736,"line_end":736,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533192,"byte_end":533195,"line_start":737,"line_end":737,"column_start":2,"column_end":5}},{"value":"/ Panics if `index > len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533197,"byte_end":533225,"line_start":738,"line_end":738,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533227,"byte_end":533230,"line_start":739,"line_end":739,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533232,"byte_end":533246,"line_start":740,"line_end":740,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533248,"byte_end":533251,"line_start":741,"line_end":741,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533253,"byte_end":533264,"line_start":742,"line_end":742,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533266,"byte_end":533293,"line_start":743,"line_end":743,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533295,"byte_end":533298,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 5];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533300,"byte_end":533331,"line_start":745,"line_end":745,"column_start":2,"column_end":33}},{"value":"/ bv.insert(4, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533333,"byte_end":533356,"line_start":746,"line_end":746,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 0, 0, 1, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533358,"byte_end":533402,"line_start":747,"line_end":747,"column_start":2,"column_end":46}},{"value":"/ bv.insert(2, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533404,"byte_end":533427,"line_start":748,"line_end":748,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 1, 0, 0, 1, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533429,"byte_end":533476,"line_start":749,"line_end":749,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533478,"byte_end":533485,"line_start":750,"line_end":750,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533487,"byte_end":533496,"line_start":751,"line_end":751,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534225,"byte_end":534231,"line_start":780,"line_end":780,"column_start":9,"column_end":15},"name":"remove","qualname":"<BitVec<O, T>>::remove","value":"pub fn remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the bit at position `index` within the vector,\n shifting all bits after it to the left.","sig":null,"attributes":[{"value":"/ Removes and returns the bit at position `index` within the vector,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533731,"byte_end":533801,"line_start":759,"line_end":759,"column_start":2,"column_end":72}},{"value":"/ shifting all bits after it to the left.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533803,"byte_end":533846,"line_start":760,"line_end":760,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533848,"byte_end":533851,"line_start":761,"line_end":761,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533853,"byte_end":533867,"line_start":762,"line_end":762,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533869,"byte_end":533872,"line_start":763,"line_end":763,"column_start":2,"column_end":5}},{"value":"/ [`Vec::remove`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.remove)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533874,"byte_end":533960,"line_start":764,"line_end":764,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533962,"byte_end":533965,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533967,"byte_end":533979,"line_start":766,"line_end":766,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533981,"byte_end":533984,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":533986,"byte_end":534025,"line_start":768,"line_end":768,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534027,"byte_end":534030,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534032,"byte_end":534046,"line_start":770,"line_end":770,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534048,"byte_end":534051,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534053,"byte_end":534064,"line_start":772,"line_end":772,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534066,"byte_end":534093,"line_start":773,"line_end":773,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534095,"byte_end":534098,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534100,"byte_end":534134,"line_start":775,"line_end":775,"column_start":2,"column_end":36}},{"value":"/ assert!(bv.remove(1));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534136,"byte_end":534162,"line_start":776,"line_end":776,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv, bits![0, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534164,"byte_end":534196,"line_start":777,"line_end":777,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534198,"byte_end":534205,"line_start":778,"line_end":778,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534207,"byte_end":534216,"line_start":779,"line_end":779,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535322,"byte_end":535328,"line_start":817,"line_end":817,"column_start":9,"column_end":15},"name":"retain","qualname":"<BitVec<O, T>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the bits specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the bits specified by the predicate.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534503,"byte_end":534556,"line_start":791,"line_end":791,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534558,"byte_end":534561,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ In other words, remove all bits `b` such that `func(idx(b), &b)` returns","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534563,"byte_end":534639,"line_start":793,"line_end":793,"column_start":2,"column_end":78}},{"value":"/ `false`. This method operates in place, visiting each bit exactly once","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534641,"byte_end":534715,"line_start":794,"line_end":794,"column_start":2,"column_end":76}},{"value":"/ in the original order, and preserves the order of the retained bits.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534717,"byte_end":534789,"line_start":795,"line_end":795,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534791,"byte_end":534794,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534796,"byte_end":534810,"line_start":797,"line_end":797,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534812,"byte_end":534815,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ [`Vec::retain`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.retain)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534817,"byte_end":534903,"line_start":799,"line_end":799,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534905,"byte_end":534908,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534910,"byte_end":534931,"line_start":801,"line_end":801,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534933,"byte_end":534936,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":534938,"byte_end":535006,"line_start":803,"line_end":803,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535008,"byte_end":535082,"line_start":804,"line_end":804,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535084,"byte_end":535094,"line_start":805,"line_end":805,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535096,"byte_end":535099,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535101,"byte_end":535115,"line_start":807,"line_end":807,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535117,"byte_end":535120,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535122,"byte_end":535133,"line_start":809,"line_end":809,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535135,"byte_end":535162,"line_start":810,"line_end":810,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535164,"byte_end":535167,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1, 0, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535169,"byte_end":535212,"line_start":812,"line_end":812,"column_start":2,"column_end":45}},{"value":"/ bv.retain(|i, b| (i % 2 == 0) ^ b);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535214,"byte_end":535253,"line_start":813,"line_end":813,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535255,"byte_end":535293,"line_start":814,"line_end":814,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535295,"byte_end":535302,"line_start":815,"line_end":815,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535304,"byte_end":535313,"line_start":816,"line_end":816,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535980,"byte_end":535984,"line_start":847,"line_end":847,"column_start":9,"column_end":13},"name":"push","qualname":"<BitVec<O, T>>::push","value":"pub fn push(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Appends a bit to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends a bit to the back of a collection.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535518,"byte_end":535564,"line_start":826,"line_end":826,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535566,"byte_end":535569,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535571,"byte_end":535585,"line_start":828,"line_end":828,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535587,"byte_end":535590,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ [`Vec::push`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.push)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535592,"byte_end":535674,"line_start":830,"line_end":830,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535676,"byte_end":535679,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535681,"byte_end":535693,"line_start":832,"line_end":832,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535695,"byte_end":535698,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits in the vector exceeds the maximum vector","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535700,"byte_end":535773,"line_start":834,"line_end":834,"column_start":2,"column_end":75}},{"value":"/ capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535775,"byte_end":535788,"line_start":835,"line_end":835,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535790,"byte_end":535793,"line_start":836,"line_end":836,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535795,"byte_end":535809,"line_start":837,"line_end":837,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535811,"byte_end":535814,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535816,"byte_end":535827,"line_start":839,"line_end":839,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535829,"byte_end":535856,"line_start":840,"line_end":840,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535858,"byte_end":535861,"line_start":841,"line_end":841,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535863,"byte_end":535894,"line_start":842,"line_end":842,"column_start":2,"column_end":33}},{"value":"/ bv.push(true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535896,"byte_end":535914,"line_start":843,"line_end":843,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv.count_ones(), 1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535916,"byte_end":535951,"line_start":844,"line_end":844,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535953,"byte_end":535960,"line_start":845,"line_end":845,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":535962,"byte_end":535971,"line_start":846,"line_end":846,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536973,"byte_end":536976,"line_start":888,"line_end":888,"column_start":9,"column_end":12},"name":"pop","qualname":"<BitVec<O, T>>::pop","value":"pub fn pop(&mut Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last bit from a vector and returns it, or [`None`] if it is\n empty.","sig":null,"attributes":[{"value":"/ Removes the last bit from a vector and returns it, or [`None`] if it is","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536485,"byte_end":536560,"line_start":869,"line_end":869,"column_start":2,"column_end":77}},{"value":"/ empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536562,"byte_end":536572,"line_start":870,"line_end":870,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536574,"byte_end":536577,"line_start":871,"line_end":871,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536579,"byte_end":536593,"line_start":872,"line_end":872,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536595,"byte_end":536598,"line_start":873,"line_end":873,"column_start":2,"column_end":5}},{"value":"/ [`Vec::pop`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.pop)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536600,"byte_end":536680,"line_start":874,"line_end":874,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536682,"byte_end":536685,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536687,"byte_end":536701,"line_start":876,"line_end":876,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536703,"byte_end":536706,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536708,"byte_end":536719,"line_start":878,"line_end":878,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536721,"byte_end":536748,"line_start":879,"line_end":879,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536750,"byte_end":536753,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536755,"byte_end":536789,"line_start":881,"line_end":881,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv.pop(), Some(true));","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536791,"byte_end":536828,"line_start":882,"line_end":882,"column_start":2,"column_end":39}},{"value":"/ assert!(bv.not_any());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536830,"byte_end":536856,"line_start":883,"line_end":883,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536858,"byte_end":536865,"line_start":884,"line_end":884,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536867,"byte_end":536870,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ [`None`]: https://doc.rust-lang.org/core/option/enum.Option.html#variant.None","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536872,"byte_end":536953,"line_start":886,"line_end":886,"column_start":2,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":536955,"byte_end":536964,"line_start":887,"line_end":887,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537715,"byte_end":537721,"line_start":922,"line_end":922,"column_start":9,"column_end":15},"name":"append","qualname":"<BitVec<O, T>>::append","value":"pub fn append<O2, T2>(&mut Self, &mut BitVec<O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves all the bits of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the bits of `other` into `self`, leaving `other` empty.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537157,"byte_end":537226,"line_start":898,"line_end":898,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537228,"byte_end":537231,"line_start":899,"line_end":899,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537233,"byte_end":537247,"line_start":900,"line_end":900,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537249,"byte_end":537252,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ [`Vec::append`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.append)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537254,"byte_end":537340,"line_start":902,"line_end":902,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537342,"byte_end":537345,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537347,"byte_end":537359,"line_start":904,"line_end":904,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537361,"byte_end":537364,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits overflows the maximum vector capacity.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537366,"byte_end":537437,"line_start":906,"line_end":906,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537439,"byte_end":537442,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537444,"byte_end":537458,"line_start":908,"line_end":908,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537460,"byte_end":537463,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537465,"byte_end":537476,"line_start":910,"line_end":910,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537478,"byte_end":537505,"line_start":911,"line_end":911,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537507,"byte_end":537510,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ let mut bv1 = bitvec![0; 10];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537512,"byte_end":537545,"line_start":913,"line_end":913,"column_start":2,"column_end":35}},{"value":"/ let mut bv2 = bitvec![1; 10];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537547,"byte_end":537580,"line_start":914,"line_end":914,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537582,"byte_end":537585,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ bv1.append(&mut bv2);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537587,"byte_end":537612,"line_start":916,"line_end":916,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537614,"byte_end":537617,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv1.count_ones(), 10);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537619,"byte_end":537656,"line_start":918,"line_end":918,"column_start":2,"column_end":39}},{"value":"/ assert!(bv2.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537658,"byte_end":537686,"line_start":919,"line_end":919,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537688,"byte_end":537695,"line_start":920,"line_end":920,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537697,"byte_end":537706,"line_start":921,"line_end":921,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2139},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538872,"byte_end":538877,"line_start":965,"line_end":965,"column_start":9,"column_end":14},"name":"drain","qualname":"<BitVec<O, T>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, O, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the\n vector and yields the removed items.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537871,"byte_end":537942,"line_start":931,"line_end":931,"column_start":2,"column_end":73}},{"value":"/ vector and yields the removed items.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537944,"byte_end":537984,"line_start":932,"line_end":932,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537986,"byte_end":537989,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ Note 1: The bit range is removed even if the iterator is only partially","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":537991,"byte_end":538066,"line_start":934,"line_end":934,"column_start":2,"column_end":77}},{"value":"/ consumed or not consumed at all.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538068,"byte_end":538104,"line_start":935,"line_end":935,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538106,"byte_end":538109,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ Note 2: It is unspecified how many bits are removed from the vector if","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538111,"byte_end":538185,"line_start":937,"line_end":937,"column_start":2,"column_end":76}},{"value":"/ the `Drain` value is leaked.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538187,"byte_end":538219,"line_start":938,"line_end":938,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538221,"byte_end":538224,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538226,"byte_end":538240,"line_start":940,"line_end":940,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538242,"byte_end":538245,"line_start":941,"line_end":941,"column_start":2,"column_end":5}},{"value":"/ [`Vec::drain`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.drain)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538247,"byte_end":538331,"line_start":942,"line_end":942,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538333,"byte_end":538336,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538338,"byte_end":538350,"line_start":944,"line_end":944,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538352,"byte_end":538355,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ Panics if the starting point is greater than the end point or if the end","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538357,"byte_end":538433,"line_start":946,"line_end":946,"column_start":2,"column_end":78}},{"value":"/ point is greater than the length of the vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538435,"byte_end":538486,"line_start":947,"line_end":947,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538488,"byte_end":538491,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538493,"byte_end":538507,"line_start":949,"line_end":949,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538509,"byte_end":538512,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538514,"byte_end":538525,"line_start":951,"line_end":951,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538527,"byte_end":538554,"line_start":952,"line_end":952,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538556,"byte_end":538559,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538561,"byte_end":538595,"line_start":954,"line_end":954,"column_start":2,"column_end":36}},{"value":"/ let bv2: BitVec = bv.drain(1 ..).collect();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538597,"byte_end":538644,"line_start":955,"line_end":955,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538646,"byte_end":538675,"line_start":956,"line_end":956,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![1, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538677,"byte_end":538710,"line_start":957,"line_end":957,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538712,"byte_end":538715,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ // A full range clears the vector","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538717,"byte_end":538754,"line_start":959,"line_end":959,"column_start":2,"column_end":39}},{"value":"/ bv.drain(..);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538756,"byte_end":538773,"line_start":960,"line_end":960,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(bv, bits![]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538775,"byte_end":538803,"line_start":961,"line_end":961,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538805,"byte_end":538812,"line_start":962,"line_end":962,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538814,"byte_end":538831,"line_start":963,"line_end":963,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538833,"byte_end":538863,"line_start":964,"line_end":964,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539457,"byte_end":539462,"line_start":991,"line_end":991,"column_start":9,"column_end":14},"name":"clear","qualname":"<BitVec<O, T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":538979,"byte_end":539022,"line_start":970,"line_end":970,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539024,"byte_end":539027,"line_start":971,"line_end":971,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539029,"byte_end":539101,"line_start":972,"line_end":972,"column_start":2,"column_end":74}},{"value":"/ vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539103,"byte_end":539114,"line_start":973,"line_end":973,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539116,"byte_end":539119,"line_start":974,"line_end":974,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539121,"byte_end":539135,"line_start":975,"line_end":975,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539137,"byte_end":539140,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ [`Vec::clear`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.clear)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539142,"byte_end":539226,"line_start":977,"line_end":977,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539228,"byte_end":539231,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539233,"byte_end":539247,"line_start":979,"line_end":979,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539249,"byte_end":539252,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539254,"byte_end":539265,"line_start":981,"line_end":981,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539267,"byte_end":539294,"line_start":982,"line_end":982,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539296,"byte_end":539299,"line_start":983,"line_end":983,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539301,"byte_end":539338,"line_start":984,"line_end":984,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539340,"byte_end":539343,"line_start":985,"line_end":985,"column_start":2,"column_end":5}},{"value":"/ bv.clear();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539345,"byte_end":539360,"line_start":986,"line_end":986,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539362,"byte_end":539365,"line_start":987,"line_end":987,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539367,"byte_end":539394,"line_start":988,"line_end":988,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539396,"byte_end":539403,"line_start":989,"line_end":989,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539432,"byte_end":539446,"line_start":990,"line_end":990,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540193,"byte_end":540202,"line_start":1022,"line_end":1022,"column_start":9,"column_end":18},"name":"split_off","qualname":"<BitVec<O, T>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539516,"byte_end":539570,"line_start":997,"line_end":997,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539572,"byte_end":539575,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ Returns a newly allocated vector containing the elements in range `[at,","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539577,"byte_end":539652,"line_start":999,"line_end":999,"column_start":2,"column_end":77}},{"value":"/ len)`. After the call, the original vector will be left containing the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539654,"byte_end":539728,"line_start":1000,"line_end":1000,"column_start":2,"column_end":76}},{"value":"/ bits `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539730,"byte_end":539786,"line_start":1001,"line_end":1001,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539788,"byte_end":539791,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539793,"byte_end":539807,"line_start":1003,"line_end":1003,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539809,"byte_end":539812,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ [`Vec::split_off`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.split_off)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539814,"byte_end":539906,"line_start":1005,"line_end":1005,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539908,"byte_end":539911,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539913,"byte_end":539925,"line_start":1007,"line_end":1007,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539927,"byte_end":539930,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539932,"byte_end":539957,"line_start":1009,"line_end":1009,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539959,"byte_end":539962,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539964,"byte_end":539978,"line_start":1011,"line_end":1011,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539980,"byte_end":539983,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539985,"byte_end":539996,"line_start":1013,"line_end":1013,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":539998,"byte_end":540025,"line_start":1014,"line_end":1014,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540027,"byte_end":540030,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540032,"byte_end":540066,"line_start":1016,"line_end":1016,"column_start":2,"column_end":36}},{"value":"/ let bv2 = bv.split_off(1);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540068,"byte_end":540098,"line_start":1017,"line_end":1017,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540100,"byte_end":540129,"line_start":1018,"line_end":1018,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540131,"byte_end":540164,"line_start":1019,"line_end":1019,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540166,"byte_end":540173,"line_start":1020,"line_end":1020,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540175,"byte_end":540184,"line_start":1021,"line_end":1021,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541992,"byte_end":542003,"line_start":1073,"line_end":1073,"column_start":9,"column_end":20},"name":"resize_with","qualname":"<BitVec<O, T>>::resize_with","value":"pub fn resize_with<F>(&mut Self, usize, F) where F: FnMut() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540531,"byte_end":540601,"line_start":1035,"line_end":1035,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540603,"byte_end":540606,"line_start":1036,"line_end":1036,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540608,"byte_end":540679,"line_start":1037,"line_end":1037,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with the result of calling","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540681,"byte_end":540756,"line_start":1038,"line_end":1038,"column_start":2,"column_end":77}},{"value":"/ the closure `func`. The return values from `func` will end up in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540758,"byte_end":540830,"line_start":1039,"line_end":1039,"column_start":2,"column_end":74}},{"value":"/ `BitVec` in the order they have been generated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540832,"byte_end":540883,"line_start":1040,"line_end":1040,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540885,"byte_end":540888,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540890,"byte_end":540957,"line_start":1042,"line_end":1042,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540959,"byte_end":540962,"line_start":1043,"line_end":1043,"column_start":2,"column_end":5}},{"value":"/ This method uses a closure to create new values on every push. If you’d","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":540964,"byte_end":541041,"line_start":1044,"line_end":1044,"column_start":2,"column_end":77}},{"value":"/ rather [`Clone`] a given bit, use [`resize`]. If you want to use the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541043,"byte_end":541115,"line_start":1045,"line_end":1045,"column_start":2,"column_end":74}},{"value":"/ [`Default`] trait to generate values, you can pass [`Default::default`]","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541117,"byte_end":541192,"line_start":1046,"line_end":1046,"column_start":2,"column_end":77}},{"value":"/ as the second argument.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541194,"byte_end":541221,"line_start":1047,"line_end":1047,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541223,"byte_end":541226,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541228,"byte_end":541242,"line_start":1049,"line_end":1049,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541244,"byte_end":541247,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize_with`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.resize_with)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541249,"byte_end":541345,"line_start":1051,"line_end":1051,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541347,"byte_end":541350,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541352,"byte_end":541366,"line_start":1053,"line_end":1053,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541368,"byte_end":541371,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541373,"byte_end":541384,"line_start":1055,"line_end":1055,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541386,"byte_end":541413,"line_start":1056,"line_end":1056,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541415,"byte_end":541418,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541420,"byte_end":541451,"line_start":1058,"line_end":1058,"column_start":2,"column_end":33}},{"value":"/ bv.resize_with(5, Default::default);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541453,"byte_end":541493,"line_start":1059,"line_end":1059,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(bv, bits![1, 1, 1, 0, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541495,"byte_end":541536,"line_start":1060,"line_end":1060,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541538,"byte_end":541541,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541543,"byte_end":541570,"line_start":1062,"line_end":1062,"column_start":2,"column_end":29}},{"value":"/ let mut p = 0;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541572,"byte_end":541590,"line_start":1063,"line_end":1063,"column_start":2,"column_end":20}},{"value":"/ bv.resize_with(4, || { p += 1; p % 2 == 0 });","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541592,"byte_end":541641,"line_start":1064,"line_end":1064,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541643,"byte_end":541681,"line_start":1065,"line_end":1065,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541683,"byte_end":541690,"line_start":1066,"line_end":1066,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541692,"byte_end":541695,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ [`Clone`]: https://doc.rust-lang.org/std/clone/trait.Clone.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541697,"byte_end":541764,"line_start":1068,"line_end":1068,"column_start":2,"column_end":69}},{"value":"/ [`Default`]: https://doc.rust-lang.org/std/default/trait.Default.html","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541766,"byte_end":541839,"line_start":1069,"line_end":1069,"column_start":2,"column_end":75}},{"value":"/ [`Default::default`]: https://doc.rust-lang.org/std/default/trait.Default.html#tymethod.default","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541841,"byte_end":541940,"line_start":1070,"line_end":1070,"column_start":2,"column_end":101}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541942,"byte_end":541972,"line_start":1071,"line_end":1071,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":541974,"byte_end":541983,"line_start":1072,"line_end":1072,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543159,"byte_end":543165,"line_start":1118,"line_end":1118,"column_start":9,"column_end":15},"name":"resize","qualname":"<BitVec<O, T>>::resize","value":"pub fn resize(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542311,"byte_end":542381,"line_start":1089,"line_end":1089,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542383,"byte_end":542386,"line_start":1090,"line_end":1090,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542388,"byte_end":542459,"line_start":1091,"line_end":1091,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with `value`. If `new_len`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542461,"byte_end":542536,"line_start":1092,"line_end":1092,"column_start":2,"column_end":77}},{"value":"/ is less than `len`, the `BitVec` is simply truncated.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542538,"byte_end":542595,"line_start":1093,"line_end":1093,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542597,"byte_end":542600,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ This method requires a single `bool` value. If you need more","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542602,"byte_end":542666,"line_start":1095,"line_end":1095,"column_start":2,"column_end":66}},{"value":"/ flexibility, use [`resize_with`].","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542668,"byte_end":542705,"line_start":1096,"line_end":1096,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542707,"byte_end":542710,"line_start":1097,"line_end":1097,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542712,"byte_end":542726,"line_start":1098,"line_end":1098,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542728,"byte_end":542731,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.resize)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542733,"byte_end":542819,"line_start":1100,"line_end":1100,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542821,"byte_end":542824,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542826,"byte_end":542840,"line_start":1102,"line_end":1102,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542842,"byte_end":542845,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542847,"byte_end":542858,"line_start":1104,"line_end":1104,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542860,"byte_end":542887,"line_start":1105,"line_end":1105,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542889,"byte_end":542892,"line_start":1106,"line_end":1106,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542894,"byte_end":542922,"line_start":1107,"line_end":1107,"column_start":2,"column_end":30}},{"value":"/ bv.resize(3, false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542924,"byte_end":542948,"line_start":1108,"line_end":1108,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542950,"byte_end":542985,"line_start":1109,"line_end":1109,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542987,"byte_end":542990,"line_start":1110,"line_end":1110,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 4];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":542992,"byte_end":543023,"line_start":1111,"line_end":1111,"column_start":2,"column_end":33}},{"value":"/ bv.resize(2, false);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543025,"byte_end":543049,"line_start":1112,"line_end":1112,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1; 2]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543051,"byte_end":543083,"line_start":1113,"line_end":1113,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543085,"byte_end":543092,"line_start":1114,"line_end":1114,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543094,"byte_end":543097,"line_start":1115,"line_end":1115,"column_start":2,"column_end":5}},{"value":"/ [`resize_with`]: #method.resize_with","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543099,"byte_end":543139,"line_start":1116,"line_end":1116,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543141,"byte_end":543150,"line_start":1117,"line_end":1117,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544959,"byte_end":544976,"line_start":1173,"line_end":1173,"column_start":9,"column_end":26},"name":"extend_from_slice","qualname":"<BitVec<O, T>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[bool])","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all `bool`s in a slice to the `BitVec`.","sig":null,"attributes":[{"value":"/ Clones and appends all `bool`s in a slice to the `BitVec`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":543985,"byte_end":544047,"line_start":1143,"line_end":1143,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544049,"byte_end":544052,"line_start":1144,"line_end":1144,"column_start":2,"column_end":5}},{"value":"/ Iterates over the slice `other`, clones each `bool`, and then appends it","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544054,"byte_end":544130,"line_start":1145,"line_end":1145,"column_start":2,"column_end":78}},{"value":"/ to the `BitVec`. The `other` slice is traversed in-order.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544132,"byte_end":544193,"line_start":1146,"line_end":1146,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544195,"byte_end":544198,"line_start":1147,"line_end":1147,"column_start":2,"column_end":5}},{"value":"/ Prefer the [`Extend`] implementation; this method is retained only for","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544200,"byte_end":544274,"line_start":1148,"line_end":1148,"column_start":2,"column_end":76}},{"value":"/ API compatibility, and offers no performance benefit.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544276,"byte_end":544333,"line_start":1149,"line_end":1149,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544335,"byte_end":544338,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544340,"byte_end":544354,"line_start":1151,"line_end":1151,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544356,"byte_end":544359,"line_start":1152,"line_end":1152,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.extend_from_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544361,"byte_end":544469,"line_start":1153,"line_end":1153,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544471,"byte_end":544474,"line_start":1154,"line_end":1154,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544476,"byte_end":544490,"line_start":1155,"line_end":1155,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544492,"byte_end":544495,"line_start":1156,"line_end":1156,"column_start":2,"column_end":5}},{"value":"/ See [`extend_from_bitslice`] for the method to append a bit-slice of the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544497,"byte_end":544573,"line_start":1157,"line_end":1157,"column_start":2,"column_end":78}},{"value":"/ same type parameters to a bit-vector.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544575,"byte_end":544616,"line_start":1158,"line_end":1158,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544618,"byte_end":544621,"line_start":1159,"line_end":1159,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544623,"byte_end":544637,"line_start":1160,"line_end":1160,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544639,"byte_end":544642,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544644,"byte_end":544655,"line_start":1162,"line_end":1162,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544657,"byte_end":544684,"line_start":1163,"line_end":1163,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544686,"byte_end":544689,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544691,"byte_end":544719,"line_start":1165,"line_end":1165,"column_start":2,"column_end":30}},{"value":"/ bv.extend_from_slice(&[true]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544721,"byte_end":544755,"line_start":1166,"line_end":1166,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv, bits![0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544757,"byte_end":544789,"line_start":1167,"line_end":1167,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544791,"byte_end":544798,"line_start":1168,"line_end":1168,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544800,"byte_end":544803,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ [`extend`]: #impl-Extend<%26'a bool>","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544805,"byte_end":544845,"line_start":1170,"line_end":1170,"column_start":2,"column_end":42}},{"value":"/ [`extend_from_bitslice`]: #method.extend_from_bitslice","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544847,"byte_end":544905,"line_start":1171,"line_end":1171,"column_start":2,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":544934,"byte_end":544948,"line_start":1172,"line_end":1172,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546314,"byte_end":546320,"line_start":1215,"line_end":1215,"column_start":9,"column_end":15},"name":"splice","qualname":"<BitVec<O, T>>::splice","value":"pub fn splice<R, I>(&mut Self, R, I) -> Splice<, O, T, I::IntoIter> where\nR: RangeBounds<usize>, I: IntoIterator<Item = bool>","parent":null,"children":[],"decl_id":null,"docs":" Creates a splicing iterator that replaces the specified range in the\n vector with the given `replace_with` iterator and yields the removed\n items. `replace_with` does not need to be the same length as `range`.","sig":null,"attributes":[{"value":"/ Creates a splicing iterator that replaces the specified range in the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545032,"byte_end":545104,"line_start":1177,"line_end":1177,"column_start":2,"column_end":74}},{"value":"/ vector with the given `replace_with` iterator and yields the removed","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545106,"byte_end":545178,"line_start":1178,"line_end":1178,"column_start":2,"column_end":74}},{"value":"/ items. `replace_with` does not need to be the same length as `range`.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545180,"byte_end":545253,"line_start":1179,"line_end":1179,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545255,"byte_end":545258,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ The element range is removed even if the iterator is not consumed until","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545260,"byte_end":545335,"line_start":1181,"line_end":1181,"column_start":2,"column_end":77}},{"value":"/ the end.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545337,"byte_end":545349,"line_start":1182,"line_end":1182,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545351,"byte_end":545354,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ It is unspecified how many bits are removed from the vector if the","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545356,"byte_end":545426,"line_start":1184,"line_end":1184,"column_start":2,"column_end":72}},{"value":"/ `Splice` value is leaked.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545428,"byte_end":545457,"line_start":1185,"line_end":1185,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545459,"byte_end":545462,"line_start":1186,"line_end":1186,"column_start":2,"column_end":5}},{"value":"/ The input iterator `replace_with` is only consumed when the `Splice`","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545464,"byte_end":545536,"line_start":1187,"line_end":1187,"column_start":2,"column_end":74}},{"value":"/ value is dropped.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545538,"byte_end":545559,"line_start":1188,"line_end":1188,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545561,"byte_end":545564,"line_start":1189,"line_end":1189,"column_start":2,"column_end":5}},{"value":"/ This is optimal if:","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545566,"byte_end":545589,"line_start":1190,"line_end":1190,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545591,"byte_end":545594,"line_start":1191,"line_end":1191,"column_start":2,"column_end":5}},{"value":"/ - the tail (bits in the vector after `range`) is empty","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545596,"byte_end":545654,"line_start":1192,"line_end":1192,"column_start":2,"column_end":60}},{"value":"/ - or `replace_with` yields fewer bits than `range`’s length","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545656,"byte_end":545721,"line_start":1193,"line_end":1193,"column_start":2,"column_end":65}},{"value":"/ - or the lower bound of its `size_hint()` is exact","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545723,"byte_end":545777,"line_start":1194,"line_end":1194,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545779,"byte_end":545782,"line_start":1195,"line_end":1195,"column_start":2,"column_end":5}},{"value":"/ Otherwise, a temporary vector is allocated and the tail is moved twice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545784,"byte_end":545859,"line_start":1196,"line_end":1196,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545861,"byte_end":545864,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545866,"byte_end":545880,"line_start":1198,"line_end":1198,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545882,"byte_end":545885,"line_start":1199,"line_end":1199,"column_start":2,"column_end":5}},{"value":"/ [`Vec::splice`](https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.splice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545887,"byte_end":545973,"line_start":1200,"line_end":1200,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545975,"byte_end":545978,"line_start":1201,"line_end":1201,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545980,"byte_end":545994,"line_start":1202,"line_end":1202,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":545996,"byte_end":545999,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546001,"byte_end":546012,"line_start":1204,"line_end":1204,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546014,"byte_end":546041,"line_start":1205,"line_end":1205,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546043,"byte_end":546046,"line_start":1206,"line_end":1206,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546048,"byte_end":546082,"line_start":1207,"line_end":1207,"column_start":2,"column_end":36}},{"value":"/ let new = bits![1, 0];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546084,"byte_end":546110,"line_start":1208,"line_end":1208,"column_start":2,"column_end":28}},{"value":"/ let old: BitVec = bv.splice(.. 2, new.iter().copied()).collect();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546112,"byte_end":546181,"line_start":1209,"line_end":1209,"column_start":2,"column_end":71}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546183,"byte_end":546218,"line_start":1210,"line_end":1210,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(old, bits![0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546220,"byte_end":546253,"line_start":1211,"line_end":1211,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546255,"byte_end":546262,"line_start":1212,"line_end":1212,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546264,"byte_end":546273,"line_start":1213,"line_end":1213,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":546275,"byte_end":546305,"line_start":1214,"line_end":1214,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4710},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":549948,"byte_end":549956,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4713},{"krate":0,"index":4714}],"decl_id":null,"docs":" An iterator that moves out of a vector.","sig":null,"attributes":[{"value":"* An iterator that moves out of a vector.\n\nThis `struct` is created by the `into_iter` method on [`BitVec`] (provided by\nthe [`IntoIterator`] trait).\n\n# Original\n\n[`vec::IntoIter`](https://doc.rust-lang.org/alloc/vec/struct.IntoIter.html)\n\n# API Differences\n\nThis explicitly requires that `O` and `T` type parameters are `'static`, which\nis not a bound present in the original. However, it is always *true*, so it will\nnot cause a compilation error.\n\n[`BitVec`]: struct.BitVec.html\n[`IntoIterator`]: https://doc.rust-lang.org/core/iter/trait.IntoIterator.html\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":549347,"byte_end":549912,"line_start":155,"line_end":172,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550866,"byte_end":550877,"line_start":210,"line_end":210,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a bitslice.","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a bitslice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550302,"byte_end":550364,"line_start":191,"line_end":191,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550366,"byte_end":550369,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550371,"byte_end":550385,"line_start":193,"line_end":193,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550387,"byte_end":550390,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.IntoIter.html#method.as_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550392,"byte_end":550497,"line_start":195,"line_end":195,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550499,"byte_end":550502,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550504,"byte_end":550518,"line_start":197,"line_end":197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550520,"byte_end":550523,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550525,"byte_end":550536,"line_start":199,"line_end":199,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550538,"byte_end":550565,"line_start":200,"line_end":200,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550567,"byte_end":550570,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550572,"byte_end":550605,"line_start":202,"line_end":202,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550607,"byte_end":550646,"line_start":203,"line_end":203,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550648,"byte_end":550707,"line_start":204,"line_end":204,"column_start":2,"column_end":61}},{"value":"/ let _ = into_iter.next().unwrap();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550709,"byte_end":550747,"line_start":205,"line_end":205,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550749,"byte_end":550805,"line_start":206,"line_end":206,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550807,"byte_end":550814,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550816,"byte_end":550825,"line_start":208,"line_end":208,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550827,"byte_end":550857,"line_start":209,"line_end":209,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551103,"byte_end":551111,"line_start":220,"line_end":220,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550953,"byte_end":550970,"line_start":215,"line_end":215,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550972,"byte_end":551002,"line_start":216,"line_end":216,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.as_bitslice()` on iterators to view the remaining data.\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551004,"byte_end":551094,"line_start":217,"line_end":219,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2224},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551816,"byte_end":551831,"line_start":245,"line_end":245,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a mutable slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551166,"byte_end":551233,"line_start":224,"line_end":224,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551235,"byte_end":551238,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551240,"byte_end":551254,"line_start":226,"line_end":226,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551256,"byte_end":551259,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_mut_slice`](https://doc.rust-lang.org/alloc/vec/struct.IntoIter.html#method.as_mut_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551261,"byte_end":551374,"line_start":228,"line_end":228,"column_start":2,"column_end":115}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551376,"byte_end":551379,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551381,"byte_end":551395,"line_start":230,"line_end":230,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551397,"byte_end":551400,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551402,"byte_end":551413,"line_start":232,"line_end":232,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551415,"byte_end":551442,"line_start":233,"line_end":233,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551444,"byte_end":551447,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551449,"byte_end":551482,"line_start":235,"line_end":235,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551484,"byte_end":551523,"line_start":236,"line_end":236,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551525,"byte_end":551584,"line_start":237,"line_end":237,"column_start":2,"column_end":61}},{"value":"/ into_iter.as_mut_bitslice().set(2, true);","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551586,"byte_end":551631,"line_start":238,"line_end":238,"column_start":2,"column_end":47}},{"value":"/ assert!(!into_iter.next().unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551633,"byte_end":551673,"line_start":239,"line_end":239,"column_start":2,"column_end":42}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551675,"byte_end":551714,"line_start":240,"line_end":240,"column_start":2,"column_end":41}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551716,"byte_end":551755,"line_start":241,"line_end":241,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551757,"byte_end":551764,"line_start":242,"line_end":242,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551766,"byte_end":551775,"line_start":243,"line_end":243,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551777,"byte_end":551807,"line_start":244,"line_end":244,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":552149,"byte_end":552161,"line_start":254,"line_end":254,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551961,"byte_end":551975,"line_start":249,"line_end":249,"column_start":37,"column_end":51}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":551995,"byte_end":552025,"line_start":251,"line_end":251,"column_start":2,"column_end":32}},{"value":"deprecated(note =\n             \"Use `.as_mut_bitslice()` on iterators to view the \\\n\t                     remaining data.\")","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":552027,"byte_end":552140,"line_start":252,"line_end":253,"column_start":2,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2247},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":553687,"byte_end":553692,"line_start":340,"line_end":340,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::iter::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253}],"decl_id":null,"docs":" A draining iterator for `BitVec<O, T>`.","sig":null,"attributes":[{"value":"* A draining iterator for `BitVec<O, T>`.\n\nThis `struct` is created by the [`drain`] method on [`BitVec`].\n\n# Original\n\n[`vec::Drain`](https://doc.rust-lang.org/alloc/vec/struct.Drain.html)\n\n[`BitVec`]: struct.BitVec.html\n[`drain`]: struct.BitVec.html#method.drain\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":553405,"byte_end":553675,"line_start":329,"line_end":339,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555459,"byte_end":555470,"line_start":403,"line_end":403,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Drain>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a bit-slice.","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a bit-slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555087,"byte_end":555150,"line_start":391,"line_end":391,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555152,"byte_end":555155,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555157,"byte_end":555171,"line_start":393,"line_end":393,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555173,"byte_end":555176,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ [`Drain::as_slice`](https://doc.rust-lang.org/alloc/vec/struct.Drain.html#method.as_slice)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555178,"byte_end":555272,"line_start":395,"line_end":395,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555274,"byte_end":555277,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555279,"byte_end":555300,"line_start":397,"line_end":397,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555302,"byte_end":555305,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it operates on a bit-slice rather than an","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555307,"byte_end":555379,"line_start":399,"line_end":399,"column_start":2,"column_end":74}},{"value":"/ element slice.","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555381,"byte_end":555399,"line_start":400,"line_end":400,"column_start":2,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555401,"byte_end":555418,"line_start":401,"line_end":401,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":555420,"byte_end":555450,"line_start":402,"line_end":402,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4745},"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":561894,"byte_end":561900,"line_start":668,"line_end":668,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::iter::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":4750},{"krate":0,"index":4751}],"decl_id":null,"docs":" A splicing iterator for `BitVec`.","sig":null,"attributes":[{"value":"* A splicing iterator for `BitVec`.\n\nThis struct is created by the [`splice()`] method on [`BitVec`]. See its\ndocumentation for more.\n\n# Original\n\n[`vec::Splice`](https://doc.rust-lang.org/alloc/vec/struct.Splice.html)\n\n[`BitVec`]: struct.BitVec.html\n[`splice()`]: struct.BitVec.html#method.splice\n**/","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":561562,"byte_end":561865,"line_start":655,"line_end":666,"column_start":1,"column_end":4}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","byte_start":38651,"byte_end":38652,"line_start":303,"line_end":303,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45010,"byte_end":45018,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":48607,"byte_end":48615,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":48906,"byte_end":48914,"line_start":41,"line_end":41,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":49161,"byte_end":49169,"line_start":54,"line_end":54,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":49457,"byte_end":49465,"line_start":70,"line_end":70,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":49711,"byte_end":49719,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50010,"byte_end":50018,"line_start":99,"line_end":99,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50255,"byte_end":50263,"line_start":112,"line_end":112,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50489,"byte_end":50497,"line_start":126,"line_end":126,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50676,"byte_end":50684,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50966,"byte_end":50974,"line_start":151,"line_end":151,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":51232,"byte_end":51240,"line_start":164,"line_end":164,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":51852,"byte_end":51860,"line_start":36,"line_end":36,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52081,"byte_end":52089,"line_start":48,"line_end":48,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52265,"byte_end":52273,"line_start":59,"line_end":59,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52376,"byte_end":52384,"line_start":67,"line_end":67,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52620,"byte_end":52628,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52853,"byte_end":52861,"line_start":92,"line_end":92,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53125,"byte_end":53133,"line_start":106,"line_end":106,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53395,"byte_end":53403,"line_start":119,"line_end":119,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53703,"byte_end":53711,"line_start":133,"line_end":133,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53928,"byte_end":53936,"line_start":145,"line_end":145,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":54144,"byte_end":54152,"line_start":157,"line_end":157,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":54325,"byte_end":54333,"line_start":168,"line_end":168,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":55791,"byte_end":55799,"line_start":227,"line_end":227,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":55968,"byte_end":55976,"line_start":239,"line_end":239,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56156,"byte_end":56164,"line_start":250,"line_end":250,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56517,"byte_end":56525,"line_start":271,"line_end":271,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56739,"byte_end":56747,"line_start":283,"line_end":283,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56960,"byte_end":56968,"line_start":295,"line_end":295,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":57181,"byte_end":57189,"line_start":307,"line_end":307,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":57401,"byte_end":57409,"line_start":319,"line_end":319,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58325,"byte_end":58333,"line_start":361,"line_end":361,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58573,"byte_end":58593,"line_start":374,"line_end":374,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58715,"byte_end":58735,"line_start":382,"line_end":382,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58917,"byte_end":58937,"line_start":390,"line_end":390,"column_start":28,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69541,"byte_end":69550,"line_start":342,"line_end":342,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69677,"byte_end":69686,"line_start":353,"line_end":353,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77089,"byte_end":77095,"line_start":614,"line_end":614,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77208,"byte_end":77214,"line_start":623,"line_end":623,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77864,"byte_end":77870,"line_start":651,"line_end":651,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":78496,"byte_end":78502,"line_start":677,"line_end":677,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":78775,"byte_end":78781,"line_start":691,"line_end":691,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":78829,"byte_end":78835,"line_start":695,"line_end":695,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90261,"byte_end":90269,"line_start":300,"line_end":300,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":94382,"byte_end":94390,"line_start":460,"line_end":460,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":97776,"byte_end":97784,"line_start":622,"line_end":622,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":98363,"byte_end":98369,"line_start":655,"line_end":655,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":98942,"byte_end":98948,"line_start":688,"line_end":688,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field/io.rs","byte_start":108349,"byte_end":108355,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":114429,"byte_end":114435,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":122394,"byte_end":122400,"line_start":409,"line_end":409,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":122600,"byte_end":122606,"line_start":419,"line_end":419,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":122857,"byte_end":122863,"line_start":431,"line_end":431,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":125941,"byte_end":125948,"line_start":546,"line_end":546,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":128607,"byte_end":128614,"line_start":648,"line_end":648,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":128866,"byte_end":128873,"line_start":660,"line_end":660,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130528,"byte_end":130534,"line_start":708,"line_end":708,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132744,"byte_end":132750,"line_start":804,"line_end":804,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":133001,"byte_end":133007,"line_start":816,"line_end":816,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134186,"byte_end":134192,"line_start":857,"line_end":857,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136112,"byte_end":136118,"line_start":937,"line_end":937,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136318,"byte_end":136324,"line_start":947,"line_end":947,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136570,"byte_end":136576,"line_start":959,"line_end":959,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137404,"byte_end":137411,"line_start":989,"line_end":989,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139342,"byte_end":139349,"line_start":1076,"line_end":1076,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139550,"byte_end":139557,"line_start":1086,"line_end":1086,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139804,"byte_end":139811,"line_start":1098,"line_end":1098,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139975,"byte_end":139982,"line_start":1107,"line_end":1107,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":140143,"byte_end":140150,"line_start":1116,"line_end":1116,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":140291,"byte_end":140298,"line_start":1126,"line_end":1126,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":140433,"byte_end":140440,"line_start":1136,"line_end":1136,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":154470,"byte_end":154474,"line_start":245,"line_end":245,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":155954,"byte_end":155958,"line_start":290,"line_end":290,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":164253,"byte_end":164260,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165254,"byte_end":165261,"line_start":108,"line_end":108,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165408,"byte_end":165415,"line_start":118,"line_end":118,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165579,"byte_end":165586,"line_start":128,"line_end":128,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165755,"byte_end":165762,"line_start":138,"line_end":138,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165926,"byte_end":165933,"line_start":148,"line_end":148,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":166091,"byte_end":166098,"line_start":158,"line_end":158,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":166288,"byte_end":166295,"line_start":168,"line_end":168,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":166452,"byte_end":166459,"line_start":177,"line_end":177,"column_start":18,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":172348,"byte_end":172354,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":194451,"byte_end":194457,"line_start":1021,"line_end":1021,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":194569,"byte_end":194575,"line_start":1029,"line_end":1029,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195102,"byte_end":195108,"line_start":1047,"line_end":1047,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195244,"byte_end":195250,"line_start":1057,"line_end":1057,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195429,"byte_end":195435,"line_start":1067,"line_end":1067,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195592,"byte_end":195598,"line_start":1076,"line_end":1076,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":215902,"byte_end":215910,"line_start":416,"line_end":416,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223152,"byte_end":223160,"line_start":654,"line_end":654,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":917},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":928},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":258908,"byte_end":258916,"line_start":1916,"line_end":1916,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259771,"byte_end":259779,"line_start":1946,"line_end":1946,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266475,"byte_end":266483,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1069},{"krate":0,"index":1071},{"krate":0,"index":1073},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332792,"byte_end":332800,"line_start":2287,"line_end":2287,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":349111,"byte_end":349120,"line_start":2869,"line_end":2869,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":351970,"byte_end":351974,"line_start":90,"line_end":90,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":354567,"byte_end":354571,"line_start":181,"line_end":181,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":354727,"byte_end":354731,"line_start":192,"line_end":192,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":355350,"byte_end":355354,"line_start":228,"line_end":228,"column_start":21,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357043,"byte_end":357050,"line_start":290,"line_end":290,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":360691,"byte_end":360695,"line_start":425,"line_end":425,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":361308,"byte_end":361315,"line_start":460,"line_end":460,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":374963,"byte_end":374974,"line_start":1038,"line_end":1038,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378046,"byte_end":378060,"line_start":1159,"line_end":1159,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387127,"byte_end":387139,"line_start":1496,"line_end":1496,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390307,"byte_end":390322,"line_start":1618,"line_end":1618,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":413598,"byte_end":413606,"line_start":32,"line_end":32,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":413862,"byte_end":413870,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":414126,"byte_end":414134,"line_start":56,"line_end":56,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":414381,"byte_end":414389,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":419549,"byte_end":419555,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421199,"byte_end":421205,"line_start":158,"line_end":158,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421569,"byte_end":421575,"line_start":174,"line_end":174,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421734,"byte_end":421740,"line_start":187,"line_end":187,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421889,"byte_end":421895,"line_start":198,"line_end":198,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":423212,"byte_end":423220,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":423285,"byte_end":423293,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":423795,"byte_end":423803,"line_start":69,"line_end":69,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":424656,"byte_end":424664,"line_start":115,"line_end":115,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":424913,"byte_end":424921,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":425489,"byte_end":425497,"line_start":149,"line_end":149,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":426522,"byte_end":426530,"line_start":198,"line_end":198,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":426788,"byte_end":426796,"line_start":211,"line_end":211,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1533}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":428144,"byte_end":428152,"line_start":288,"line_end":288,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":428424,"byte_end":428432,"line_start":304,"line_end":304,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":428911,"byte_end":428919,"line_start":322,"line_end":322,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434494,"byte_end":434502,"line_start":479,"line_end":479,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434699,"byte_end":434707,"line_start":493,"line_end":493,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434802,"byte_end":434810,"line_start":501,"line_end":501,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434927,"byte_end":434935,"line_start":510,"line_end":510,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":447470,"byte_end":447474,"line_start":247,"line_end":247,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448056,"byte_end":448060,"line_start":273,"line_end":273,"column_start":26,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454607,"byte_end":454608,"line_start":126,"line_end":126,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":460012,"byte_end":460013,"line_start":350,"line_end":350,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1722}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":460237,"byte_end":460238,"line_start":363,"line_end":363,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465106,"byte_end":465112,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474097,"byte_end":474103,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":482261,"byte_end":482267,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":482544,"byte_end":482550,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":482783,"byte_end":482789,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483063,"byte_end":483069,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483301,"byte_end":483307,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483584,"byte_end":483590,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483813,"byte_end":483819,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484031,"byte_end":484037,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484198,"byte_end":484204,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484469,"byte_end":484475,"line_start":154,"line_end":154,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484767,"byte_end":484773,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1870}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":485017,"byte_end":485023,"line_start":182,"line_end":182,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":485734,"byte_end":485740,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":485940,"byte_end":485946,"line_start":54,"line_end":54,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486142,"byte_end":486148,"line_start":66,"line_end":66,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486300,"byte_end":486306,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486402,"byte_end":486408,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486644,"byte_end":486652,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":487423,"byte_end":487429,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1947}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":487669,"byte_end":487677,"line_start":152,"line_end":152,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1951}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":487916,"byte_end":487922,"line_start":164,"line_end":164,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1956}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488196,"byte_end":488202,"line_start":177,"line_end":177,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488398,"byte_end":488404,"line_start":189,"line_end":189,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488619,"byte_end":488625,"line_start":201,"line_end":201,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1969}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488833,"byte_end":488839,"line_start":213,"line_end":213,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1973}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489032,"byte_end":489038,"line_start":225,"line_end":225,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489225,"byte_end":489231,"line_start":237,"line_end":237,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489475,"byte_end":489481,"line_start":251,"line_end":251,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489647,"byte_end":489653,"line_start":264,"line_end":264,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490006,"byte_end":490012,"line_start":285,"line_end":285,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1994}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490218,"byte_end":490224,"line_start":297,"line_end":297,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1998}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490431,"byte_end":490437,"line_start":309,"line_end":309,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490643,"byte_end":490649,"line_start":321,"line_end":321,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490854,"byte_end":490860,"line_start":333,"line_end":333,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491102,"byte_end":491108,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2014}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491313,"byte_end":491319,"line_start":358,"line_end":358,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491492,"byte_end":491498,"line_start":370,"line_end":370,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491571,"byte_end":491577,"line_start":377,"line_end":377,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491644,"byte_end":491650,"line_start":384,"line_end":384,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497210,"byte_end":497216,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2069},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512618,"byte_end":512624,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":546900,"byte_end":546906,"line_start":37,"line_end":37,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2179}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":547604,"byte_end":547610,"line_start":67,"line_end":67,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":547822,"byte_end":547828,"line_start":79,"line_end":79,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":548160,"byte_end":548166,"line_start":96,"line_end":96,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2197}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":548380,"byte_end":548386,"line_start":108,"line_end":108,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550250,"byte_end":550258,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":552284,"byte_end":552292,"line_start":260,"line_end":260,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":552866,"byte_end":552874,"line_start":294,"line_end":294,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":553202,"byte_end":553210,"line_start":311,"line_end":311,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":553351,"byte_end":553359,"line_start":322,"line_end":322,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":554100,"byte_end":554105,"line_start":354,"line_end":354,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2263}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":558650,"byte_end":558655,"line_start":504,"line_end":504,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":558843,"byte_end":558848,"line_start":516,"line_end":516,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2272}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":559102,"byte_end":559107,"line_start":530,"line_end":530,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":559688,"byte_end":559693,"line_start":564,"line_end":564,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2285},{"krate":0,"index":2286}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560027,"byte_end":560032,"line_start":581,"line_end":581,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2290}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560178,"byte_end":560183,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560260,"byte_end":560265,"line_start":599,"line_end":599,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560342,"byte_end":560347,"line_start":606,"line_end":606,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560417,"byte_end":560422,"line_start":613,"line_end":613,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2303}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":562134,"byte_end":562140,"line_start":680,"line_end":680,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":562494,"byte_end":562500,"line_start":694,"line_end":694,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":563806,"byte_end":563812,"line_start":741,"line_end":741,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2324},{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":564161,"byte_end":564167,"line_start":759,"line_end":759,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2330}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":564346,"byte_end":564352,"line_start":771,"line_end":771,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":564455,"byte_end":564461,"line_start":779,"line_end":779,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2339}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":566432,"byte_end":566438,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2366}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":566715,"byte_end":566721,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2371}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":566954,"byte_end":566960,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567234,"byte_end":567240,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567472,"byte_end":567478,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2387},{"krate":0,"index":2388}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567755,"byte_end":567761,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2393}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567984,"byte_end":567990,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2397},{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":568202,"byte_end":568208,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2402}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":568369,"byte_end":568375,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2406}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":568703,"byte_end":568709,"line_start":156,"line_end":156,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":569001,"byte_end":569007,"line_start":171,"line_end":171,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2418}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":569429,"byte_end":569435,"line_start":188,"line_end":188,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2422},{"krate":0,"index":2423}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":570143,"byte_end":570149,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":570349,"byte_end":570355,"line_start":56,"line_end":56,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2462}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":570520,"byte_end":570526,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2466},{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":571065,"byte_end":571071,"line_start":95,"line_end":95,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":571167,"byte_end":571173,"line_start":103,"line_end":103,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":571409,"byte_end":571417,"line_start":115,"line_end":115,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572188,"byte_end":572194,"line_start":157,"line_end":157,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2499}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572434,"byte_end":572442,"line_start":170,"line_end":170,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572681,"byte_end":572687,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2508}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572961,"byte_end":572967,"line_start":195,"line_end":195,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2512}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573163,"byte_end":573169,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573384,"byte_end":573390,"line_start":219,"line_end":219,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2521}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573603,"byte_end":573609,"line_start":231,"line_end":231,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2526}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573812,"byte_end":573818,"line_start":243,"line_end":243,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2530}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574007,"byte_end":574013,"line_start":255,"line_end":255,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574188,"byte_end":574194,"line_start":267,"line_end":267,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2538},{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574422,"byte_end":574428,"line_start":281,"line_end":281,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2543}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574555,"byte_end":574561,"line_start":292,"line_end":292,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2547}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574848,"byte_end":574854,"line_start":308,"line_end":308,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575060,"byte_end":575066,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2555}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575273,"byte_end":575279,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575485,"byte_end":575491,"line_start":344,"line_end":344,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2563}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575665,"byte_end":575671,"line_start":355,"line_end":355,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2567}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575970,"byte_end":575976,"line_start":371,"line_end":371,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2571}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576181,"byte_end":576187,"line_start":383,"line_end":383,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2575}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576360,"byte_end":576366,"line_start":395,"line_end":395,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576439,"byte_end":576445,"line_start":402,"line_end":402,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576512,"byte_end":576518,"line_start":409,"line_end":409,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6142,"byte_end":6148,"line_start":156,"line_end":156,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/macros.rs","byte_start":6629,"byte_end":6637,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6171,"byte_end":6176,"line_start":159,"line_end":159,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6186,"byte_end":6192,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":298}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6202,"byte_end":6207,"line_start":161,"line_end":161,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":356}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6217,"byte_end":6222,"line_start":162,"line_end":162,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":494}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6232,"byte_end":6235,"line_start":163,"line_end":163,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":630}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6245,"byte_end":6250,"line_start":164,"line_end":164,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":649}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6273,"byte_end":6280,"line_start":166,"line_end":166,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":811}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6290,"byte_end":6295,"line_start":167,"line_end":167,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":861}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6305,"byte_end":6310,"line_start":168,"line_end":168,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1617}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6320,"byte_end":6324,"line_start":169,"line_end":169,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1659}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6361,"byte_end":6366,"line_start":172,"line_end":172,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1729}},{"kind":"Mod","span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/lib.rs","byte_start":6403,"byte_end":6406,"line_start":175,"line_end":175,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2029}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","byte_start":30776,"byte_end":30781,"line_start":39,"line_end":39,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","byte_start":30784,"byte_end":30790,"line_start":39,"line_end":39,"column_start":30,"column_end":36},"kind":"SuperTrait","from":{"krate":18,"index":27},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","byte_start":30793,"byte_end":30798,"line_start":39,"line_end":39,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/access.rs","byte_start":38651,"byte_end":38652,"line_start":303,"line_end":303,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":50},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array.rs","byte_start":45010,"byte_end":45018,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":48607,"byte_end":48615,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":48906,"byte_end":48914,"line_start":41,"line_end":41,"column_start":39,"column_end":47},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":49161,"byte_end":49169,"line_start":54,"line_end":54,"column_start":32,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":49457,"byte_end":49465,"line_start":70,"line_end":70,"column_start":38,"column_end":46},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":49711,"byte_end":49719,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2176}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50010,"byte_end":50018,"line_start":99,"line_end":99,"column_start":39,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2201}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50255,"byte_end":50263,"line_start":112,"line_end":112,"column_start":22,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50489,"byte_end":50497,"line_start":126,"line_end":126,"column_start":25,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50676,"byte_end":50684,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":50966,"byte_end":50974,"line_start":151,"line_end":151,"column_start":35,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/ops.rs","byte_start":51232,"byte_end":51240,"line_start":164,"line_end":164,"column_start":20,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":51852,"byte_end":51860,"line_start":36,"line_end":36,"column_start":46,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1720}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52081,"byte_end":52089,"line_start":48,"line_end":48,"column_start":49,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52265,"byte_end":52273,"line_start":59,"line_end":59,"column_start":19,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52376,"byte_end":52384,"line_start":67,"line_end":67,"column_start":20,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52620,"byte_end":52628,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":52853,"byte_end":52861,"line_start":92,"line_end":92,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53125,"byte_end":53133,"line_start":106,"line_end":106,"column_start":46,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53395,"byte_end":53403,"line_start":119,"line_end":119,"column_start":37,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53703,"byte_end":53711,"line_start":133,"line_end":133,"column_start":45,"column_end":53},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":53928,"byte_end":53936,"line_start":145,"line_end":145,"column_start":45,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":54144,"byte_end":54152,"line_start":157,"line_end":157,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":54325,"byte_end":54333,"line_start":168,"line_end":168,"column_start":53,"column_end":61},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":1970}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":55791,"byte_end":55799,"line_start":227,"line_end":227,"column_start":24,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":55968,"byte_end":55976,"line_start":239,"line_end":239,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6608}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56156,"byte_end":56164,"line_start":250,"line_end":250,"column_start":22,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56517,"byte_end":56525,"line_start":271,"line_end":271,"column_start":24,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56739,"byte_end":56747,"line_start":283,"line_end":283,"column_start":25,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6610}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":56960,"byte_end":56968,"line_start":295,"line_end":295,"column_start":22,"column_end":30},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6606}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":57181,"byte_end":57189,"line_start":307,"line_end":307,"column_start":25,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6612}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":57401,"byte_end":57409,"line_start":319,"line_end":319,"column_start":21,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58325,"byte_end":58333,"line_start":361,"line_end":361,"column_start":22,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58573,"byte_end":58593,"line_start":374,"line_end":374,"column_start":6,"column_end":26},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58715,"byte_end":58735,"line_start":382,"line_end":382,"column_start":18,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2639},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/array/traits.rs","byte_start":58917,"byte_end":58937,"line_start":390,"line_end":390,"column_start":28,"column_end":48},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2639},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69541,"byte_end":69550,"line_start":342,"line_end":342,"column_start":22,"column_end":31},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2659},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":69677,"byte_end":69686,"line_start":353,"line_end":353,"column_start":21,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2659},"to":{"krate":2,"index":2055}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77089,"byte_end":77095,"line_start":614,"line_end":614,"column_start":19,"column_end":25},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2719},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77208,"byte_end":77214,"line_start":623,"line_end":623,"column_start":26,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2719},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":77864,"byte_end":77870,"line_start":651,"line_end":651,"column_start":37,"column_end":43},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2719},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":78496,"byte_end":78502,"line_start":677,"line_end":677,"column_start":31,"column_end":37},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2719},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":78775,"byte_end":78781,"line_start":691,"line_end":691,"column_start":39,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2719},"to":{"krate":2,"index":5567}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/domain.rs","byte_start":78829,"byte_end":78835,"line_start":695,"line_end":695,"column_start":18,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2719},"to":{"krate":2,"index":2055}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":90261,"byte_end":90269,"line_start":300,"line_end":300,"column_start":22,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":889},"to":{"krate":0,"index":383}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":94382,"byte_end":94390,"line_start":460,"line_end":460,"column_start":22,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":889},"to":{"krate":0,"index":383}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":97776,"byte_end":97784,"line_start":622,"line_end":622,"column_start":25,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2627},"to":{"krate":0,"index":383}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":98363,"byte_end":98369,"line_start":655,"line_end":655,"column_start":25,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1745},"to":{"krate":0,"index":383}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field.rs","byte_start":98942,"byte_end":98948,"line_start":688,"line_end":688,"column_start":25,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2049},"to":{"krate":0,"index":383}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/field/io.rs","byte_start":108349,"byte_end":108355,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2049},"to":{"krate":1,"index":3179}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":112694,"byte_end":112703,"line_start":92,"line_end":92,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":633},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":112706,"byte_end":112712,"line_start":92,"line_end":92,"column_start":36,"column_end":42},"kind":"SuperTrait","from":{"krate":18,"index":46},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":112715,"byte_end":112723,"line_start":92,"line_end":92,"column_start":45,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":1630},"to":{"krate":0,"index":517}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":114429,"byte_end":114435,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":122394,"byte_end":122400,"line_start":409,"line_end":409,"column_start":20,"column_end":26},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2778},"to":{"krate":2,"index":6608}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":122600,"byte_end":122606,"line_start":419,"line_end":419,"column_start":19,"column_end":25},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2778},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":122857,"byte_end":122863,"line_start":431,"line_end":431,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2778},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":125941,"byte_end":125948,"line_start":546,"line_end":546,"column_start":9,"column_end":16},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":128607,"byte_end":128614,"line_start":648,"line_end":648,"column_start":19,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2819},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":128866,"byte_end":128873,"line_start":660,"line_end":660,"column_start":21,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2819},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":130528,"byte_end":130534,"line_start":708,"line_end":708,"column_start":9,"column_end":15},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":132744,"byte_end":132750,"line_start":804,"line_end":804,"column_start":19,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2860},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":133001,"byte_end":133007,"line_start":816,"line_end":816,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2860},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":134186,"byte_end":134192,"line_start":857,"line_end":857,"column_start":9,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136112,"byte_end":136118,"line_start":937,"line_end":937,"column_start":20,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2901},"to":{"krate":2,"index":6608}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136318,"byte_end":136324,"line_start":947,"line_end":947,"column_start":19,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2901},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":136570,"byte_end":136576,"line_start":959,"line_end":959,"column_start":21,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2901},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":137404,"byte_end":137411,"line_start":989,"line_end":989,"column_start":9,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139342,"byte_end":139349,"line_start":1076,"line_end":1076,"column_start":20,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":6608}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139550,"byte_end":139557,"line_start":1086,"line_end":1086,"column_start":19,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139804,"byte_end":139811,"line_start":1098,"line_end":1098,"column_start":21,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":139975,"byte_end":139982,"line_start":1107,"line_end":1107,"column_start":28,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":5169}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":140143,"byte_end":140150,"line_start":1116,"line_end":1116,"column_start":23,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":140291,"byte_end":140298,"line_start":1126,"line_end":1126,"column_start":22,"column_end":29},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/index.rs","byte_start":140433,"byte_end":140440,"line_start":1136,"line_end":1136,"column_start":17,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2937},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143354,"byte_end":143364,"line_start":21,"line_end":21,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":21,"index":191},"to":{"krate":0,"index":633}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/mem.rs","byte_start":143373,"byte_end":143379,"line_start":21,"line_end":21,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":648},"to":{"krate":0,"index":633}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":154470,"byte_end":154474,"line_start":245,"line_end":245,"column_start":26,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2997},"to":{"krate":0,"index":657}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/order.rs","byte_start":155954,"byte_end":155958,"line_start":290,"line_end":290,"column_start":26,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3019},"to":{"krate":0,"index":657}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":164253,"byte_end":164260,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165254,"byte_end":165261,"line_start":108,"line_end":108,"column_start":19,"column_end":26},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165408,"byte_end":165415,"line_start":118,"line_end":118,"column_start":22,"column_end":29},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165579,"byte_end":165586,"line_start":128,"line_end":128,"column_start":28,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165755,"byte_end":165762,"line_start":138,"line_end":138,"column_start":26,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":165926,"byte_end":165933,"line_start":148,"line_end":148,"column_start":26,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":166091,"byte_end":166098,"line_start":158,"line_end":158,"column_start":19,"column_end":26},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":166288,"byte_end":166295,"line_start":168,"line_end":168,"column_start":21,"column_end":28},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":6614}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":166452,"byte_end":166459,"line_start":177,"line_end":177,"column_start":18,"column_end":25},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3041},"to":{"krate":2,"index":2055}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":172348,"byte_end":172354,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3074},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":194451,"byte_end":194457,"line_start":1021,"line_end":1021,"column_start":19,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3074},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":194569,"byte_end":194575,"line_start":1029,"line_end":1029,"column_start":37,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3074},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195102,"byte_end":195108,"line_start":1047,"line_end":1047,"column_start":21,"column_end":27},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3074},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195244,"byte_end":195250,"line_start":1057,"line_end":1057,"column_start":19,"column_end":25},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3074},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195429,"byte_end":195435,"line_start":1067,"line_end":1067,"column_start":21,"column_end":27},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3074},"to":{"krate":2,"index":6614}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/pointer.rs","byte_start":195592,"byte_end":195598,"line_start":1076,"line_end":1076,"column_start":18,"column_end":24},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3074},"to":{"krate":2,"index":2055}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":215902,"byte_end":215910,"line_start":416,"line_end":416,"column_start":12,"column_end":20},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":223152,"byte_end":223160,"line_start":654,"line_end":654,"column_start":12,"column_end":20},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":258908,"byte_end":258916,"line_start":1916,"line_end":1916,"column_start":12,"column_end":20},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice.rs","byte_start":259771,"byte_end":259779,"line_start":1946,"line_end":1946,"column_start":12,"column_end":20},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":266475,"byte_end":266483,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":332792,"byte_end":332800,"line_start":2287,"line_end":2287,"column_start":12,"column_end":20},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/api.rs","byte_start":349111,"byte_end":349120,"line_start":2869,"line_end":2869,"column_start":44,"column_end":53},"kind":{"Impl":{"id":120}},"from":{"krate":2,"index":31025},"to":{"krate":0,"index":1138}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":351970,"byte_end":351974,"line_start":90,"line_end":90,"column_start":16,"column_end":20},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":354567,"byte_end":354571,"line_start":181,"line_end":181,"column_start":22,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3167},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":354727,"byte_end":354731,"line_start":192,"line_end":192,"column_start":38,"column_end":42},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3167},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":355350,"byte_end":355354,"line_start":228,"line_end":228,"column_start":21,"column_end":25},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3167},"to":{"krate":2,"index":2055}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":357043,"byte_end":357050,"line_start":290,"line_end":290,"column_start":16,"column_end":23},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":360691,"byte_end":360695,"line_start":425,"line_end":425,"column_start":16,"column_end":20},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":361308,"byte_end":361315,"line_start":460,"line_end":460,"column_start":16,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":374963,"byte_end":374974,"line_start":1038,"line_end":1038,"column_start":16,"column_end":27},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":378046,"byte_end":378060,"line_start":1159,"line_end":1159,"column_start":16,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":387127,"byte_end":387139,"line_start":1496,"line_end":1496,"column_start":16,"column_end":28},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":390307,"byte_end":390322,"line_start":1618,"line_end":1618,"column_start":16,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/iter.rs","byte_start":401153,"byte_end":401172,"line_start":2096,"line_end":2096,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":5233},"to":{"krate":0,"index":1301}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":413598,"byte_end":413606,"line_start":32,"line_end":32,"column_start":39,"column_end":47},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":413862,"byte_end":413870,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":414126,"byte_end":414134,"line_start":56,"line_end":56,"column_start":39,"column_end":47},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":2201}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/ops.rs","byte_start":414381,"byte_end":414389,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":419549,"byte_end":419555,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421199,"byte_end":421205,"line_start":158,"line_end":158,"column_start":22,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421569,"byte_end":421575,"line_start":174,"line_end":174,"column_start":22,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421734,"byte_end":421740,"line_start":187,"line_end":187,"column_start":25,"column_end":31},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/proxy.rs","byte_start":421889,"byte_end":421895,"line_start":198,"line_end":198,"column_start":21,"column_end":27},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":423212,"byte_end":423220,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":423285,"byte_end":423293,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":423795,"byte_end":423803,"line_start":69,"line_end":69,"column_start":54,"column_end":62},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":424656,"byte_end":424664,"line_start":115,"line_end":115,"column_start":55,"column_end":63},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":424913,"byte_end":424921,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":425489,"byte_end":425497,"line_start":149,"line_end":149,"column_start":55,"column_end":63},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":426522,"byte_end":426530,"line_start":198,"line_end":198,"column_start":56,"column_end":64},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":426788,"byte_end":426796,"line_start":211,"line_end":211,"column_start":60,"column_end":68},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":428144,"byte_end":428152,"line_start":288,"line_end":288,"column_start":22,"column_end":30},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":428424,"byte_end":428432,"line_start":304,"line_end":304,"column_start":24,"column_end":32},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":428911,"byte_end":428919,"line_start":322,"line_end":322,"column_start":24,"column_end":32},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":6614}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434494,"byte_end":434502,"line_start":479,"line_end":479,"column_start":21,"column_end":29},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434699,"byte_end":434707,"line_start":493,"line_end":493,"column_start":28,"column_end":36},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434802,"byte_end":434810,"line_start":501,"line_end":501,"column_start":28,"column_end":36},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/slice/traits.rs","byte_start":434927,"byte_end":434935,"line_start":510,"line_end":510,"column_start":24,"column_end":32},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":889},"to":{"krate":5,"index":396}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442860,"byte_end":442866,"line_start":82,"line_end":82,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1658},"to":{"krate":0,"index":1630}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442869,"byte_end":442874,"line_start":82,"line_end":82,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1630}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":442877,"byte_end":442882,"line_start":82,"line_end":82,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":6599},"to":{"krate":0,"index":1630}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":447470,"byte_end":447474,"line_start":247,"line_end":247,"column_start":22,"column_end":26},"kind":{"Impl":{"id":166}},"from":{"krate":2,"index":2931},"to":{"krate":0,"index":1630}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/store.rs","byte_start":448056,"byte_end":448060,"line_start":273,"line_end":273,"column_start":26,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":2,"index":2931},"to":{"krate":0,"index":1658}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":454607,"byte_end":454608,"line_start":126,"line_end":126,"column_start":21,"column_end":22},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1683},"to":{"krate":0,"index":1669}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":460012,"byte_end":460013,"line_start":350,"line_end":350,"column_start":26,"column_end":27},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1720},"to":{"krate":0,"index":1711}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/view.rs","byte_start":460237,"byte_end":460238,"line_start":363,"line_end":363,"column_start":29,"column_end":30},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1725},"to":{"krate":0,"index":1715}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed.rs","byte_start":465106,"byte_end":465112,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/api.rs","byte_start":474097,"byte_end":474103,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":482261,"byte_end":482267,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":482544,"byte_end":482550,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":482783,"byte_end":482789,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483063,"byte_end":483069,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483301,"byte_end":483307,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2176}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483584,"byte_end":483590,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2201}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":483813,"byte_end":483819,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484031,"byte_end":484037,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484198,"byte_end":484204,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484469,"byte_end":484475,"line_start":154,"line_end":154,"column_start":32,"column_end":38},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":484767,"byte_end":484773,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/ops.rs","byte_start":485017,"byte_end":485023,"line_start":182,"line_end":182,"column_start":20,"column_end":26},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":485734,"byte_end":485740,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1720}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":485940,"byte_end":485946,"line_start":54,"line_end":54,"column_start":42,"column_end":48},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486142,"byte_end":486148,"line_start":66,"line_end":66,"column_start":22,"column_end":28},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486300,"byte_end":486306,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486402,"byte_end":486408,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":486644,"byte_end":486652,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":487423,"byte_end":487429,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":487669,"byte_end":487677,"line_start":152,"line_end":152,"column_start":41,"column_end":49},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":487916,"byte_end":487922,"line_start":164,"line_end":164,"column_start":37,"column_end":43},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488196,"byte_end":488202,"line_start":177,"line_end":177,"column_start":38,"column_end":44},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488398,"byte_end":488404,"line_start":189,"line_end":189,"column_start":38,"column_end":44},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488619,"byte_end":488625,"line_start":201,"line_end":201,"column_start":45,"column_end":51},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":488833,"byte_end":488839,"line_start":213,"line_end":213,"column_start":35,"column_end":41},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489032,"byte_end":489038,"line_start":225,"line_end":225,"column_start":31,"column_end":37},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1960}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489225,"byte_end":489231,"line_start":237,"line_end":237,"column_start":34,"column_end":40},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":1970}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489475,"byte_end":489481,"line_start":251,"line_end":251,"column_start":24,"column_end":30},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":489647,"byte_end":489653,"line_start":264,"line_end":264,"column_start":22,"column_end":28},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490006,"byte_end":490012,"line_start":285,"line_end":285,"column_start":24,"column_end":30},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490218,"byte_end":490224,"line_start":297,"line_end":297,"column_start":23,"column_end":29},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6608}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490431,"byte_end":490437,"line_start":309,"line_end":309,"column_start":25,"column_end":31},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6610}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490643,"byte_end":490649,"line_start":321,"line_end":321,"column_start":22,"column_end":28},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6606}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":490854,"byte_end":490860,"line_start":333,"line_end":333,"column_start":24,"column_end":30},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6614}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491102,"byte_end":491108,"line_start":346,"line_end":346,"column_start":25,"column_end":31},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6612}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491313,"byte_end":491319,"line_start":358,"line_end":358,"column_start":21,"column_end":27},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491492,"byte_end":491498,"line_start":370,"line_end":370,"column_start":28,"column_end":34},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491571,"byte_end":491577,"line_start":377,"line_end":377,"column_start":28,"column_end":34},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/boxed/traits.rs","byte_start":491644,"byte_end":491650,"line_start":384,"line_end":384,"column_start":22,"column_end":28},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec.rs","byte_start":497210,"byte_end":497216,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/api.rs","byte_start":512618,"byte_end":512624,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":546900,"byte_end":546906,"line_start":37,"line_end":37,"column_start":29,"column_end":35},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":5219}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":547604,"byte_end":547610,"line_start":67,"line_end":67,"column_start":37,"column_end":43},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":5219}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":547822,"byte_end":547828,"line_start":79,"line_end":79,"column_start":35,"column_end":41},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":5206}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":548160,"byte_end":548166,"line_start":96,"line_end":96,"column_start":43,"column_end":49},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":5206}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":548380,"byte_end":548386,"line_start":108,"line_end":108,"column_start":29,"column_end":35},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":550250,"byte_end":550258,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":4710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":552284,"byte_end":552292,"line_start":260,"line_end":260,"column_start":25,"column_end":33},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":4710},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":552866,"byte_end":552874,"line_start":294,"line_end":294,"column_start":36,"column_end":44},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":4710},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":553202,"byte_end":553210,"line_start":311,"line_end":311,"column_start":34,"column_end":42},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":4710},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":553351,"byte_end":553359,"line_start":322,"line_end":322,"column_start":30,"column_end":38},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":4710},"to":{"krate":2,"index":5567}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":554100,"byte_end":554105,"line_start":354,"line_end":354,"column_start":16,"column_end":21},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":558650,"byte_end":558655,"line_start":504,"line_end":504,"column_start":38,"column_end":43},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":558843,"byte_end":558848,"line_start":516,"line_end":516,"column_start":26,"column_end":31},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":559102,"byte_end":559107,"line_start":530,"line_end":530,"column_start":25,"column_end":30},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":559688,"byte_end":559693,"line_start":564,"line_end":564,"column_start":36,"column_end":41},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560027,"byte_end":560032,"line_start":581,"line_end":581,"column_start":34,"column_end":39},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560178,"byte_end":560183,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":5567}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560260,"byte_end":560265,"line_start":599,"line_end":599,"column_start":28,"column_end":33},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560342,"byte_end":560347,"line_start":606,"line_end":606,"column_start":28,"column_end":33},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":560417,"byte_end":560422,"line_start":613,"line_end":613,"column_start":21,"column_end":26},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":562134,"byte_end":562140,"line_start":680,"line_end":680,"column_start":19,"column_end":25},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":4745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":562494,"byte_end":562500,"line_start":694,"line_end":694,"column_start":28,"column_end":34},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":4745},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":563806,"byte_end":563812,"line_start":741,"line_end":741,"column_start":39,"column_end":45},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":4745},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":564161,"byte_end":564167,"line_start":759,"line_end":759,"column_start":37,"column_end":43},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":4745},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":564346,"byte_end":564352,"line_start":771,"line_end":771,"column_start":33,"column_end":39},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":4745},"to":{"krate":2,"index":5567}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/iter.rs","byte_start":564455,"byte_end":564461,"line_start":779,"line_end":779,"column_start":24,"column_end":30},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":4745},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":566432,"byte_end":566438,"line_start":29,"line_end":29,"column_start":33,"column_end":39},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":566715,"byte_end":566721,"line_start":45,"line_end":45,"column_start":39,"column_end":45},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2193}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":566954,"byte_end":566960,"line_start":58,"line_end":58,"column_start":32,"column_end":38},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2171}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567234,"byte_end":567240,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2197}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567472,"byte_end":567478,"line_start":87,"line_end":87,"column_start":33,"column_end":39},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2176}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567755,"byte_end":567761,"line_start":103,"line_end":103,"column_start":39,"column_end":45},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2201}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":567984,"byte_end":567990,"line_start":116,"line_end":116,"column_start":22,"column_end":28},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":568202,"byte_end":568208,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":568369,"byte_end":568375,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":568703,"byte_end":568709,"line_start":156,"line_end":156,"column_start":32,"column_end":38},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":569001,"byte_end":569007,"line_start":171,"line_end":171,"column_start":35,"column_end":41},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/ops.rs","byte_start":569429,"byte_end":569435,"line_start":188,"line_end":188,"column_start":20,"column_end":26},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2162}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":570143,"byte_end":570149,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1720}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":570349,"byte_end":570355,"line_start":56,"line_end":56,"column_start":42,"column_end":48},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":570520,"byte_end":570526,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":571065,"byte_end":571071,"line_start":95,"line_end":95,"column_start":19,"column_end":25},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1775}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":571167,"byte_end":571173,"line_start":103,"line_end":103,"column_start":20,"column_end":26},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1796}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":571409,"byte_end":571417,"line_start":115,"line_end":115,"column_start":52,"column_end":60},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572188,"byte_end":572194,"line_start":157,"line_end":157,"column_start":36,"column_end":42},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572434,"byte_end":572442,"line_start":170,"line_end":170,"column_start":41,"column_end":49},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572681,"byte_end":572687,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":572961,"byte_end":572967,"line_start":195,"line_end":195,"column_start":38,"column_end":44},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1954}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573163,"byte_end":573169,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1957}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573384,"byte_end":573390,"line_start":219,"line_end":219,"column_start":45,"column_end":51},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573603,"byte_end":573609,"line_start":231,"line_end":231,"column_start":49,"column_end":55},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":573812,"byte_end":573818,"line_start":243,"line_end":243,"column_start":35,"column_end":41},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574007,"byte_end":574013,"line_start":255,"line_end":255,"column_start":29,"column_end":35},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1960}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574188,"byte_end":574194,"line_start":267,"line_end":267,"column_start":32,"column_end":38},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1970}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574422,"byte_end":574428,"line_start":281,"line_end":281,"column_start":24,"column_end":30},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574555,"byte_end":574561,"line_start":292,"line_end":292,"column_start":22,"column_end":28},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":574848,"byte_end":574854,"line_start":308,"line_end":308,"column_start":24,"column_end":30},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575060,"byte_end":575066,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6608}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575273,"byte_end":575279,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6610}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575485,"byte_end":575491,"line_start":344,"line_end":344,"column_start":22,"column_end":28},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6606}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575665,"byte_end":575671,"line_start":355,"line_end":355,"column_start":24,"column_end":30},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6614}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":575970,"byte_end":575976,"line_start":371,"line_end":371,"column_start":25,"column_end":31},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6612}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576181,"byte_end":576187,"line_start":383,"line_end":383,"column_start":21,"column_end":27},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":6787}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576360,"byte_end":576366,"line_start":395,"line_end":395,"column_start":28,"column_end":34},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576439,"byte_end":576445,"line_start":402,"line_end":402,"column_start":28,"column_end":34},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/home/ytakasugi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.19.4/src/vec/traits.rs","byte_start":576512,"byte_end":576518,"line_start":409,"line_end":409,"column_start":22,"column_end":28},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":2086}}]}