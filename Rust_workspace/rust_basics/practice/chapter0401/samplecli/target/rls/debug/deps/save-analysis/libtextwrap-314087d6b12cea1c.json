{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1","program":"C:\\Users\\sigur\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","textwrap","--edition=2018","C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=314087d6b12cea1c","-C","extra-filename=-314087d6b12cea1c","--out-dir","c:\\Users\\sigur\\Documents\\900_github\\000_lerning\\Rust_workspace\\rust_basics\\practice\\chapter0401\\samplecli\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sigur\\Documents\\900_github\\000_lerning\\Rust_workspace\\rust_basics\\practice\\chapter0401\\samplecli\\target\\rls\\debug\\deps","--extern","unicode_width=c:\\Users\\sigur\\Documents\\900_github\\000_lerning\\Rust_workspace\\rust_basics\\practice\\chapter0401\\samplecli\\target\\rls\\debug\\deps\\libunicode_width-b5847af1e230f206.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sigur\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sigur\\Documents\\900_github\\000_lerning\\Rust_workspace\\rust_basics\\practice\\chapter0401\\samplecli\\target\\rls\\debug\\deps\\libtextwrap-314087d6b12cea1c.rmeta"},"prelude":{"crate_id":{"name":"textwrap","disambiguator":[5714556583697502192,14768280792389024966]},"crate_root":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src","external_crates":[{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[45344308337484766,904807583985397655]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[17608585110195136257,12532935013018738971]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10644633998059158352,10345665241509147306]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18212625787733517551,4937265065110821766]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2699922135837212616,11588109643627721037]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16653465091603201180,18239440457404116996]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3073254730555026972,7758270140448631200]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13759999943095835806,4978516890064261122]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4575299228079760236,9361028770882531394]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10307147502021998988,15592389341950453369]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2670035867216739096,10315597156951015330]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7309248630993686720,3186694738066578297]}},{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","num":13,"id":{"name":"unicode_width","disambiguator":[12229027184459297582,14033908656626698582]}}],"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":37874,"line_start":1,"line_end":1104,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3873,"byte_end":3879,"line_start":113,"line_end":113,"column_start":29,"column_end":35},"alias_span":null,"name":"dedent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3909,"byte_end":3915,"line_start":114,"line_end":114,"column_start":29,"column_end":35},"alias_span":null,"name":"indent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3960,"byte_end":3974,"line_start":117,"line_end":117,"column_start":28,"column_end":42},"alias_span":null,"name":"HyphenSplitter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3960,"byte_end":3974,"line_start":117,"line_end":117,"column_start":28,"column_end":42},"alias_span":null,"name":"HyphenSplitter","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3976,"byte_end":3989,"line_start":117,"line_end":117,"column_start":44,"column_end":57},"alias_span":null,"name":"NoHyphenation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3976,"byte_end":3989,"line_start":117,"line_end":117,"column_start":44,"column_end":57},"alias_span":null,"name":"NoHyphenation","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3991,"byte_end":4003,"line_start":117,"line_end":117,"column_start":59,"column_end":71},"alias_span":null,"name":"WordSplitter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":37874,"line_start":1,"line_end":1104,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":148},{"krate":0,"index":29},{"krate":0,"index":150},{"krate":0,"index":30},{"krate":0,"index":86},{"krate":0,"index":98},{"krate":0,"index":94},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":102},{"krate":0,"index":107},{"krate":0,"index":46},{"krate":0,"index":111},{"krate":0,"index":117},{"krate":0,"index":51},{"krate":0,"index":57},{"krate":0,"index":122},{"krate":0,"index":133},{"krate":0,"index":58},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" `textwrap` provides functions for word wrapping and filling text.","sig":null,"attributes":[{"value":"/ `textwrap` provides functions for word wrapping and filling text.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":69,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":70,"byte_end":73,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Wrapping text can be very useful in commandline programs where you","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":74,"byte_end":144,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ want to format dynamic output nicely so it looks good in a","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":145,"byte_end":207,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ terminal. A quick example:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":208,"byte_end":238,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":239,"byte_end":242,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":243,"byte_end":256,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":257,"byte_end":272,"line_start":8,"line_end":8,"column_start":1,"column_end":16}},{"value":"/     let text = \"textwrap: a small library for wrapping text.\";","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":273,"byte_end":339,"line_start":9,"line_end":9,"column_start":1,"column_end":67}},{"value":"/     println!(\"{}\", textwrap::fill(text, 18));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":340,"byte_end":389,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":390,"byte_end":395,"line_start":11,"line_end":11,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":396,"byte_end":403,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":404,"byte_end":407,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ When you run this program, it will display the following output:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":408,"byte_end":476,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":477,"byte_end":480,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":481,"byte_end":492,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/ textwrap: a small","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":493,"byte_end":514,"line_start":17,"line_end":17,"column_start":1,"column_end":22}},{"value":"/ library for","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":515,"byte_end":530,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/ wrapping text.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":531,"byte_end":549,"line_start":19,"line_end":19,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":550,"byte_end":557,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":558,"byte_end":561,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ If you enable the `hyphenation` feature, you can get automatic","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":562,"byte_end":628,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ hyphenation for a number of languages:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":629,"byte_end":671,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":672,"byte_end":675,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":676,"byte_end":689,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/ # #[cfg(feature = \"hyphenation\")]","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":690,"byte_end":727,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/ use hyphenation::{Language, Load, Standard};","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":728,"byte_end":776,"line_start":27,"line_end":27,"column_start":1,"column_end":49}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":777,"byte_end":803,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":804,"byte_end":807,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(feature = \"hyphenation\")]","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":808,"byte_end":845,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":846,"byte_end":861,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/     let text = \"textwrap: a small library for wrapping text.\";","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":862,"byte_end":928,"line_start":32,"line_end":32,"column_start":1,"column_end":67}},{"value":"/     let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":929,"byte_end":1008,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/     let wrapper = Wrapper::with_splitter(18, dictionary);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1009,"byte_end":1070,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/     println!(\"{}\", wrapper.fill(text));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1071,"byte_end":1114,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1115,"byte_end":1120,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1121,"byte_end":1124,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(not(feature = \"hyphenation\"))]","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1125,"byte_end":1167,"line_start":38,"line_end":38,"column_start":1,"column_end":43}},{"value":"/ # fn main() { }","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1168,"byte_end":1187,"line_start":39,"line_end":39,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1188,"byte_end":1195,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1196,"byte_end":1199,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The program will now output:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1200,"byte_end":1232,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1233,"byte_end":1236,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1237,"byte_end":1248,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/ textwrap: a small","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1249,"byte_end":1270,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/ library for wrap-","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1271,"byte_end":1292,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"/ ping text.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1293,"byte_end":1307,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1308,"byte_end":1315,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1316,"byte_end":1319,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Wrapping Strings at Compile Time","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1320,"byte_end":1358,"line_start":50,"line_end":50,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1359,"byte_end":1362,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ If your strings are known at compile time, please take a look at","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1363,"byte_end":1431,"line_start":52,"line_end":52,"column_start":1,"column_end":69}},{"value":"/ the procedural macros from the [`textwrap-macros` crate].","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1432,"byte_end":1493,"line_start":53,"line_end":53,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1494,"byte_end":1497,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Displayed Width vs Byte Size","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1498,"byte_end":1532,"line_start":55,"line_end":55,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1533,"byte_end":1536,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ To word wrap text, one must know the width of each word so one can","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1537,"byte_end":1607,"line_start":57,"line_end":57,"column_start":1,"column_end":71}},{"value":"/ know when to break lines. This library measures the width of text","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1608,"byte_end":1677,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/ using the [displayed width][unicode-width], not the size in bytes.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1678,"byte_end":1748,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1749,"byte_end":1752,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This is important for non-ASCII text. ASCII characters such as `a`","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1753,"byte_end":1823,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ and `!` are simple and take up one column each. This means that","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1824,"byte_end":1891,"line_start":62,"line_end":62,"column_start":1,"column_end":68}},{"value":"/ the displayed width is equal to the string length in bytes.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1892,"byte_end":1955,"line_start":63,"line_end":63,"column_start":1,"column_end":64}},{"value":"/ However, non-ASCII characters and symbols take up more than one","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":1956,"byte_end":2023,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ byte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2024,"byte_end":2097,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ `0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2098,"byte_end":2156,"line_start":66,"line_end":66,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2157,"byte_end":2160,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ This is why we take care to use the displayed width instead of the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2161,"byte_end":2231,"line_start":68,"line_end":68,"column_start":1,"column_end":71}},{"value":"/ byte count when computing line lengths. All functions in this","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2232,"byte_end":2297,"line_start":69,"line_end":69,"column_start":1,"column_end":66}},{"value":"/ library handle Unicode characters like this.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2298,"byte_end":2346,"line_start":70,"line_end":70,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2347,"byte_end":2350,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Cargo Features","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2351,"byte_end":2371,"line_start":72,"line_end":72,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2372,"byte_end":2375,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The library has two optional features:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2376,"byte_end":2418,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2419,"byte_end":2422,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ * `terminal_size`: enables automatic detection of the terminal","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2423,"byte_end":2489,"line_start":76,"line_end":76,"column_start":1,"column_end":67}},{"value":"/   width via the [terminal_size][] crate. See the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2490,"byte_end":2542,"line_start":77,"line_end":77,"column_start":1,"column_end":53}},{"value":"/   [`Wrapper::with_termwidth`] constructor for details.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2543,"byte_end":2601,"line_start":78,"line_end":78,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2602,"byte_end":2605,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * `hyphenation`: enables language-sentive hyphenation via the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2606,"byte_end":2671,"line_start":80,"line_end":80,"column_start":1,"column_end":66}},{"value":"/   [hyphenation][] crate. See the [`WordSplitter`] trait for","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2672,"byte_end":2735,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/   details.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2736,"byte_end":2750,"line_start":82,"line_end":82,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2751,"byte_end":2754,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [`textwrap-macros` crate]: https://crates.io/crates/textwrap-macros","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2755,"byte_end":2826,"line_start":84,"line_end":84,"column_start":1,"column_end":72}},{"value":"/ [unicode-width]: https://docs.rs/unicode-width/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2827,"byte_end":2878,"line_start":85,"line_end":85,"column_start":1,"column_end":52}},{"value":"/ [terminal_size]: https://crates.io/crates/terminal_size","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2879,"byte_end":2938,"line_start":86,"line_end":86,"column_start":1,"column_end":60}},{"value":"/ [hyphenation]: https://crates.io/crates/hyphenation","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2939,"byte_end":2994,"line_start":87,"line_end":87,"column_start":1,"column_end":56}},{"value":"/ [`Wrapper::with_termwidth`]: struct.Wrapper.html#method.with_termwidth","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":2995,"byte_end":3069,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3070,"byte_end":3115,"line_start":89,"line_end":89,"column_start":1,"column_end":46}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3176,"byte_end":3198,"line_start":92,"line_end":92,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3199,"byte_end":3238,"line_start":93,"line_end":93,"column_start":1,"column_end":40}},{"value":"allow(clippy :: redundant_field_names)","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":3239,"byte_end":3279,"line_start":94,"line_end":94,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38757,"byte_end":38763,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"indent","qualname":"::indentation::indent","value":"pub fn indent(&str, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Add prefix to each non-empty line.","sig":null,"attributes":[{"value":"/ Add prefix to each non-empty line.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38070,"byte_end":38108,"line_start":7,"line_end":7,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38109,"byte_end":38112,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38113,"byte_end":38120,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38121,"byte_end":38146,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38147,"byte_end":38150,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38151,"byte_end":38174,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ Foo","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38175,"byte_end":38182,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ Bar","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38183,"byte_end":38190,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ \", \"  \"), \"","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38191,"byte_end":38206,"line_start":15,"line_end":15,"column_start":1,"column_end":16}},{"value":"/   Foo","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38207,"byte_end":38216,"line_start":16,"line_end":16,"column_start":1,"column_end":10}},{"value":"/   Bar","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38217,"byte_end":38226,"line_start":17,"line_end":17,"column_start":1,"column_end":10}},{"value":"/ \");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38227,"byte_end":38234,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38235,"byte_end":38242,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38243,"byte_end":38246,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Empty lines (lines consisting only of whitespace) are not indented","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38247,"byte_end":38317,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ and the whitespace is replaced by a single newline (`\\n`):","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38318,"byte_end":38380,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38381,"byte_end":38384,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38385,"byte_end":38392,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38393,"byte_end":38418,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38419,"byte_end":38422,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38423,"byte_end":38446,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/ Foo","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38447,"byte_end":38454,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38455,"byte_end":38458,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Bar","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38459,"byte_end":38466,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/   \\t","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38467,"byte_end":38475,"line_start":31,"line_end":31,"column_start":1,"column_end":9}},{"value":"/ Baz","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38476,"byte_end":38483,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ \", \"->\"), \"","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38484,"byte_end":38499,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/ ->Foo","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38500,"byte_end":38509,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38510,"byte_end":38513,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ->Bar","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38514,"byte_end":38523,"line_start":36,"line_end":36,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38524,"byte_end":38527,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ->Baz","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38528,"byte_end":38537,"line_start":38,"line_end":38,"column_start":1,"column_end":10}},{"value":"/ \");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38538,"byte_end":38545,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38546,"byte_end":38553,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38554,"byte_end":38557,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Leading and trailing whitespace on non-empty lines is kept","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38558,"byte_end":38620,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/ unchanged:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38621,"byte_end":38635,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38636,"byte_end":38639,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38640,"byte_end":38647,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38648,"byte_end":38673,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38674,"byte_end":38677,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\" \\t  Foo   \", \"->\"), \"-> \\t  Foo   \\n\");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38678,"byte_end":38741,"line_start":48,"line_end":48,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":38742,"byte_end":38749,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39435,"byte_end":39441,"line_start":80,"line_end":80,"column_start":8,"column_end":14},"name":"dedent","qualname":"::indentation::dedent","value":"pub fn dedent(&str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Removes common leading whitespace from each line.","sig":null,"attributes":[{"value":"/ Removes common leading whitespace from each line.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39046,"byte_end":39099,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39100,"byte_end":39103,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This function will look at each non-empty line and determine the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39104,"byte_end":39172,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/ maximum amount of whitespace that can be removed from all lines:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39173,"byte_end":39241,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39242,"byte_end":39245,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39246,"byte_end":39253,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ use textwrap::dedent;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39254,"byte_end":39279,"line_start":68,"line_end":68,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39280,"byte_end":39283,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dedent(\"","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39284,"byte_end":39307,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/     1st line","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39308,"byte_end":39324,"line_start":71,"line_end":71,"column_start":1,"column_end":17}},{"value":"/       2nd line","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39325,"byte_end":39343,"line_start":72,"line_end":72,"column_start":1,"column_end":19}},{"value":"/     3rd line","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39344,"byte_end":39360,"line_start":73,"line_end":73,"column_start":1,"column_end":17}},{"value":"/ \"), \"","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39361,"byte_end":39370,"line_start":74,"line_end":74,"column_start":1,"column_end":10}},{"value":"/ 1st line","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39371,"byte_end":39383,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"/   2nd line","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39384,"byte_end":39398,"line_start":76,"line_end":76,"column_start":1,"column_end":15}},{"value":"/ 3rd line","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39399,"byte_end":39411,"line_start":77,"line_end":77,"column_start":1,"column_end":13}},{"value":"/ \");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39412,"byte_end":39419,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\indentation.rs","byte_start":39420,"byte_end":39427,"line_start":79,"line_end":79,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46306,"byte_end":46318,"line_start":25,"line_end":25,"column_start":11,"column_end":23},"name":"WordSplitter","qualname":"::splitting::WordSplitter","value":"WordSplitter","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":" An interface for splitting words.","sig":null,"attributes":[{"value":"/ An interface for splitting words.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45464,"byte_end":45501,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45502,"byte_end":45505,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ When the [`wrap_iter`] method will try to fit text into a line, it","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45506,"byte_end":45576,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ will eventually find a word that it too large the current text","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45577,"byte_end":45643,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ width. It will then call the currently configured `WordSplitter` to","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45644,"byte_end":45715,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ have it attempt to split the word into smaller parts. This trait","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45716,"byte_end":45784,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ describes that functionality via the [`split`] method.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45785,"byte_end":45843,"line_start":14,"line_end":14,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45844,"byte_end":45847,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If the `textwrap` crate has been compiled with the `hyphenation`","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45848,"byte_end":45916,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ feature enabled, you will find an implementation of `WordSplitter`","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45917,"byte_end":45987,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ by the `hyphenation::Standard` struct. Use this struct for","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":45988,"byte_end":46050,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/ language-aware hyphenation. See the [`hyphenation` documentation]","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46051,"byte_end":46120,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ for details.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46121,"byte_end":46137,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46138,"byte_end":46141,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: ../struct.Wrapper.html#method.wrap_iter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46142,"byte_end":46200,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/ [`split`]: #tymethod.split","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46201,"byte_end":46231,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/ [`hyphenation` documentation]: https://docs.rs/hyphenation/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46232,"byte_end":46295,"line_start":24,"line_end":24,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46898,"byte_end":46903,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"split","qualname":"::splitting::WordSplitter::split","value":"pub fn split<'w>(&Self, &'w str) -> Vec<(&'w str, &'w str, &'w str)>","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Return all possible splits of word. Each split is a triple\n with a head, a hyphen, and a tail where `head + &tail == word`.\n The hyphen can be empty if there is already a hyphen in the\n head.","sig":null,"attributes":[{"value":"/ Return all possible splits of word. Each split is a triple","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46325,"byte_end":46387,"line_start":26,"line_end":26,"column_start":5,"column_end":67}},{"value":"/ with a head, a hyphen, and a tail where `head + &tail == word`.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46392,"byte_end":46459,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ The hyphen can be empty if there is already a hyphen in the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46464,"byte_end":46527,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ head.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46532,"byte_end":46541,"line_start":29,"line_end":29,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46546,"byte_end":46549,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ The splits should go from smallest to longest and should","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46554,"byte_end":46614,"line_start":31,"line_end":31,"column_start":5,"column_end":65}},{"value":"/ include no split at all. So the word \"technology\" could be","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46619,"byte_end":46681,"line_start":32,"line_end":32,"column_start":5,"column_end":67}},{"value":"/ split into","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46686,"byte_end":46700,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46705,"byte_end":46708,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46713,"byte_end":46726,"line_start":35,"line_end":35,"column_start":5,"column_end":18}},{"value":"/ vec![(\"tech\", \"-\", \"nology\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46731,"byte_end":46764,"line_start":36,"line_end":36,"column_start":5,"column_end":38}},{"value":"/      (\"technol\", \"-\", \"ogy\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46769,"byte_end":46802,"line_start":37,"line_end":37,"column_start":5,"column_end":38}},{"value":"/      (\"technolo\", \"-\", \"gy\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46807,"byte_end":46840,"line_start":38,"line_end":38,"column_start":5,"column_end":38}},{"value":"/      (\"technology\", \"\", \"\")];","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46845,"byte_end":46878,"line_start":39,"line_end":39,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46883,"byte_end":46890,"line_start":40,"line_end":40,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47353,"byte_end":47366,"line_start":56,"line_end":56,"column_start":12,"column_end":25},"name":"NoHyphenation","qualname":"::splitting::NoHyphenation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Use this as a [`Wrapper.splitter`] to avoid any kind of\n hyphenation:","sig":null,"attributes":[{"value":"/ Use this as a [`Wrapper.splitter`] to avoid any kind of","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":46970,"byte_end":47029,"line_start":44,"line_end":44,"column_start":1,"column_end":60}},{"value":"/ hyphenation:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47030,"byte_end":47046,"line_start":45,"line_end":45,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47047,"byte_end":47050,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47051,"byte_end":47058,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use textwrap::{Wrapper, NoHyphenation};","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47059,"byte_end":47102,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47103,"byte_end":47106,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let wrapper = Wrapper::with_splitter(8, NoHyphenation);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47107,"byte_end":47166,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(wrapper.wrap(\"foo bar-baz\"), vec![\"foo\", \"bar-baz\"]);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47167,"byte_end":47235,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47236,"byte_end":47243,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47244,"byte_end":47247,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`Wrapper.splitter`]: ../struct.Wrapper.html#structfield.splitter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47248,"byte_end":47317,"line_start":54,"line_end":54,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47831,"byte_end":47845,"line_start":72,"line_end":72,"column_start":12,"column_end":26},"name":"HyphenSplitter","qualname":"::splitting::HyphenSplitter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple and default way to split words: splitting on existing\n hyphens only.","sig":null,"attributes":[{"value":"/ Simple and default way to split words: splitting on existing","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47606,"byte_end":47670,"line_start":66,"line_end":66,"column_start":1,"column_end":65}},{"value":"/ hyphens only.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47671,"byte_end":47688,"line_start":67,"line_end":67,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47689,"byte_end":47692,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ You probably don't need to use this type since it's already used","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47693,"byte_end":47761,"line_start":69,"line_end":69,"column_start":1,"column_end":69}},{"value":"/ by default by `Wrapper::new`.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47762,"byte_end":47795,"line_start":70,"line_end":70,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4634,"byte_end":4641,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"Wrapper","qualname":"::Wrapper","value":"Wrapper { width, initial_indent, subsequent_indent, break_words, splitter }","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" A Wrapper holds settings for wrapping and filling text. Use it\n when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions\n are not flexible enough.","sig":null,"attributes":[{"value":"/ A Wrapper holds settings for wrapping and filling text. Use it","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4007,"byte_end":4073,"line_start":119,"line_end":119,"column_start":1,"column_end":67}},{"value":"/ when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4074,"byte_end":4145,"line_start":120,"line_end":120,"column_start":1,"column_end":72}},{"value":"/ are not flexible enough.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4146,"byte_end":4174,"line_start":121,"line_end":121,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4175,"byte_end":4178,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4179,"byte_end":4215,"line_start":123,"line_end":123,"column_start":1,"column_end":37}},{"value":"/ [`wrap`]: fn.wrap.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4216,"byte_end":4242,"line_start":124,"line_end":124,"column_start":1,"column_end":27}},{"value":"/ [`fill`]: fn.fill.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4243,"byte_end":4269,"line_start":125,"line_end":125,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4270,"byte_end":4273,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ The algorithm used by the `WrapIter` iterator (returned from the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4274,"byte_end":4342,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/ `wrap_iter` method)  works by doing successive partial scans over","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4343,"byte_end":4412,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ words in the input string (where each single scan yields a single","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4413,"byte_end":4482,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/ line) so that the overall time and memory complexity is O(*n*) where","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4483,"byte_end":4555,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ *n* is the length of the input string.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4556,"byte_end":4598,"line_start":131,"line_end":131,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4737,"byte_end":4742,"line_start":135,"line_end":135,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrapper::width","value":"usize","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" The width in columns at which the text will be wrapped.\n","sig":null,"attributes":[{"value":"/ The width in columns at which the text will be wrapped.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4669,"byte_end":4728,"line_start":134,"line_end":134,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4814,"byte_end":4828,"line_start":137,"line_end":137,"column_start":9,"column_end":23},"name":"initial_indent","qualname":"::Wrapper::initial_indent","value":"&'a str","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Indentation used for the first line of output.\n","sig":null,"attributes":[{"value":"/ Indentation used for the first line of output.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4755,"byte_end":4805,"line_start":136,"line_end":136,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4904,"byte_end":4921,"line_start":139,"line_end":139,"column_start":9,"column_end":26},"name":"subsequent_indent","qualname":"::Wrapper::subsequent_indent","value":"&'a str","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Indentation used for subsequent lines of output.\n","sig":null,"attributes":[{"value":"/ Indentation used for subsequent lines of output.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4843,"byte_end":4895,"line_start":138,"line_end":138,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5089,"byte_end":5100,"line_start":143,"line_end":143,"column_start":9,"column_end":20},"name":"break_words","qualname":"::Wrapper::break_words","value":"bool","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Allow long words to be broken if they cannot fit on a line.\n When set to `false`, some lines may be longer than\n `self.width`.\n","sig":null,"attributes":[{"value":"/ Allow long words to be broken if they cannot fit on a line.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":4936,"byte_end":4999,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"/ When set to `false`, some lines may be longer than","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5004,"byte_end":5058,"line_start":141,"line_end":141,"column_start":5,"column_end":59}},{"value":"/ `self.width`.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5063,"byte_end":5080,"line_start":142,"line_end":142,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5302,"byte_end":5310,"line_start":147,"line_end":147,"column_start":9,"column_end":17},"name":"splitter","qualname":"::Wrapper::splitter","value":"S","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" The method for splitting words. If the `hyphenation` feature\n is enabled, you can use a `hyphenation::Standard` dictionary\n here to get language-aware hyphenation.\n","sig":null,"attributes":[{"value":"/ The method for splitting words. If the `hyphenation` feature","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5112,"byte_end":5176,"line_start":144,"line_end":144,"column_start":5,"column_end":69}},{"value":"/ is enabled, you can use a `hyphenation::Standard` dictionary","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5181,"byte_end":5245,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/ here to get language-aware hyphenation.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5250,"byte_end":5293,"line_start":146,"line_end":146,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5748,"byte_end":5751,"line_start":158,"line_end":158,"column_start":12,"column_end":15},"name":"new","qualname":"<Wrapper>::new","value":"pub fn new(usize) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Create a new Wrapper for wrapping at the specified width. By\n default, we allow words longer than `width` to be broken. A\n [`HyphenSplitter`] will be used by default for splitting\n words. See the [`WordSplitter`] trait for other options.","sig":null,"attributes":[{"value":"/ Create a new Wrapper for wrapping at the specified width. By","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5361,"byte_end":5425,"line_start":151,"line_end":151,"column_start":5,"column_end":69}},{"value":"/ default, we allow words longer than `width` to be broken. A","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5430,"byte_end":5493,"line_start":152,"line_end":152,"column_start":5,"column_end":68}},{"value":"/ [`HyphenSplitter`] will be used by default for splitting","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5498,"byte_end":5558,"line_start":153,"line_end":153,"column_start":5,"column_end":65}},{"value":"/ words. See the [`WordSplitter`] trait for other options.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5563,"byte_end":5623,"line_start":154,"line_end":154,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5628,"byte_end":5631,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ [`HyphenSplitter`]: struct.HyphenSplitter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5636,"byte_end":5686,"line_start":156,"line_end":156,"column_start":5,"column_end":55}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5691,"byte_end":5736,"line_start":157,"line_end":157,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6923,"byte_end":6936,"line_start":191,"line_end":191,"column_start":12,"column_end":25},"name":"with_splitter","qualname":"<Wrapper>::with_splitter","value":"pub fn with_splitter(usize, S) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Use the given [`WordSplitter`] to create a new Wrapper for\n wrapping at the specified width. By default, we allow words\n longer than `width` to be broken.","sig":null,"attributes":[{"value":"/ Use the given [`WordSplitter`] to create a new Wrapper for","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6681,"byte_end":6743,"line_start":186,"line_end":186,"column_start":5,"column_end":67}},{"value":"/ wrapping at the specified width. By default, we allow words","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6748,"byte_end":6811,"line_start":187,"line_end":187,"column_start":5,"column_end":68}},{"value":"/ longer than `width` to be broken.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6816,"byte_end":6853,"line_start":188,"line_end":188,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6858,"byte_end":6861,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6866,"byte_end":6911,"line_start":190,"line_end":190,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7720,"byte_end":7734,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"initial_indent","qualname":"<Wrapper>::initial_indent","value":"pub fn initial_indent(Self, &'a str) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.initial_indent`]. The initial indentation is\n used on the very first line of output.","sig":null,"attributes":[{"value":"/ Change [`self.initial_indent`]. The initial indentation is","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7179,"byte_end":7241,"line_start":201,"line_end":201,"column_start":5,"column_end":67}},{"value":"/ used on the very first line of output.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7246,"byte_end":7288,"line_start":202,"line_end":202,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7293,"byte_end":7296,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7301,"byte_end":7315,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7320,"byte_end":7323,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Classic paragraph indentation can be achieved by specifying an","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7328,"byte_end":7394,"line_start":206,"line_end":206,"column_start":5,"column_end":71}},{"value":"/ initial indentation and wrapping each paragraph by itself:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7399,"byte_end":7461,"line_start":207,"line_end":207,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7466,"byte_end":7469,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7474,"byte_end":7487,"line_start":209,"line_end":209,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7492,"byte_end":7525,"line_start":210,"line_end":210,"column_start":5,"column_end":38}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7530,"byte_end":7556,"line_start":211,"line_end":211,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7561,"byte_end":7564,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(15).initial_indent(\"    \");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7569,"byte_end":7627,"line_start":213,"line_end":213,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7632,"byte_end":7639,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7644,"byte_end":7647,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ [`self.initial_indent`]: #structfield.initial_indent","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7652,"byte_end":7708,"line_start":216,"line_end":216,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8460,"byte_end":8477,"line_start":242,"line_end":242,"column_start":12,"column_end":29},"name":"subsequent_indent","qualname":"<Wrapper>::subsequent_indent","value":"pub fn subsequent_indent(Self, &'a str) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.subsequent_indent`]. The subsequent indentation\n is used on lines following the first line of output.","sig":null,"attributes":[{"value":"/ Change [`self.subsequent_indent`]. The subsequent indentation","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7872,"byte_end":7937,"line_start":224,"line_end":224,"column_start":5,"column_end":70}},{"value":"/ is used on lines following the first line of output.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":7942,"byte_end":7998,"line_start":225,"line_end":225,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8003,"byte_end":8006,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8011,"byte_end":8025,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8030,"byte_end":8033,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Combining initial and subsequent indentation lets you format a","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8038,"byte_end":8104,"line_start":229,"line_end":229,"column_start":5,"column_end":71}},{"value":"/ single paragraph as a bullet list:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8109,"byte_end":8147,"line_start":230,"line_end":230,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8152,"byte_end":8155,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8160,"byte_end":8173,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8178,"byte_end":8211,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8216,"byte_end":8242,"line_start":234,"line_end":234,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8247,"byte_end":8250,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(15)","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8255,"byte_end":8289,"line_start":236,"line_end":236,"column_start":5,"column_end":39}},{"value":"/     .initial_indent(\"* \")","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8294,"byte_end":8323,"line_start":237,"line_end":237,"column_start":5,"column_end":34}},{"value":"/     .subsequent_indent(\"  \");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8328,"byte_end":8361,"line_start":238,"line_end":238,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8366,"byte_end":8373,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8378,"byte_end":8381,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ [`self.subsequent_indent`]: #structfield.subsequent_indent","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8386,"byte_end":8448,"line_start":241,"line_end":241,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8864,"byte_end":8875,"line_start":254,"line_end":254,"column_start":12,"column_end":23},"name":"break_words","qualname":"<Wrapper>::break_words","value":"pub fn break_words(Self, bool) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.break_words`]. This controls if words longer\n than `self.width` can be broken, or if they will be left\n sticking out into the right margin.","sig":null,"attributes":[{"value":"/ Change [`self.break_words`]. This controls if words longer","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8618,"byte_end":8680,"line_start":249,"line_end":249,"column_start":5,"column_end":67}},{"value":"/ than `self.width` can be broken, or if they will be left","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8685,"byte_end":8745,"line_start":250,"line_end":250,"column_start":5,"column_end":65}},{"value":"/ sticking out into the right margin.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8750,"byte_end":8789,"line_start":251,"line_end":251,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8794,"byte_end":8797,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [`self.break_words`]: #structfield.break_words","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":8802,"byte_end":8852,"line_start":253,"line_end":253,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9721,"byte_end":9725,"line_start":281,"line_end":281,"column_start":12,"column_end":16},"name":"fill","qualname":"<Wrapper>::fill","value":"pub fn fill(&Self, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `self.width` characters.","sig":null,"attributes":[{"value":"/ Fill a line of text at `self.width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9009,"byte_end":9060,"line_start":261,"line_end":261,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9065,"byte_end":9068,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ The result is a string with newlines between each line. Use","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9073,"byte_end":9136,"line_start":263,"line_end":263,"column_start":5,"column_end":68}},{"value":"/ the `wrap` method if you need access to the individual lines.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9141,"byte_end":9206,"line_start":264,"line_end":264,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9211,"byte_end":9214,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9219,"byte_end":9237,"line_start":266,"line_end":266,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9242,"byte_end":9245,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This method simply joins the lines produced by `wrap_iter`. As","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9250,"byte_end":9316,"line_start":268,"line_end":268,"column_start":5,"column_end":71}},{"value":"/ such, it inherits the O(*n*) time and memory complexity where","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9321,"byte_end":9386,"line_start":269,"line_end":269,"column_start":5,"column_end":70}},{"value":"/ *n* is the input string length.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9391,"byte_end":9426,"line_start":270,"line_end":270,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9431,"byte_end":9434,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9439,"byte_end":9453,"line_start":272,"line_end":272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9458,"byte_end":9461,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9466,"byte_end":9473,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9478,"byte_end":9504,"line_start":275,"line_end":275,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9509,"byte_end":9512,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(15);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9517,"byte_end":9552,"line_start":277,"line_end":277,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(wrapper.fill(\"Memory safety without garbage collection.\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9557,"byte_end":9630,"line_start":278,"line_end":278,"column_start":5,"column_end":78}},{"value":"/            \"Memory safety\\nwithout garbage\\ncollection.\");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9635,"byte_end":9697,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":9702,"byte_end":9709,"line_start":280,"line_end":280,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11334,"byte_end":11338,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"wrap","qualname":"<Wrapper>::wrap","value":"pub fn wrap(&Self, &'a str) -> Vec<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `self.width` characters.","sig":null,"attributes":[{"value":"/ Wrap a line of text at `self.width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10115,"byte_end":10166,"line_start":296,"line_end":296,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10171,"byte_end":10174,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10179,"byte_end":10197,"line_start":298,"line_end":298,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10202,"byte_end":10205,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This method simply collects the lines produced by `wrap_iter`.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10210,"byte_end":10276,"line_start":300,"line_end":300,"column_start":5,"column_end":71}},{"value":"/ As such, it inherits the O(*n*) overall time and memory","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10281,"byte_end":10340,"line_start":301,"line_end":301,"column_start":5,"column_end":64}},{"value":"/ complexity where *n* is the input string length.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10345,"byte_end":10397,"line_start":302,"line_end":302,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10402,"byte_end":10405,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10410,"byte_end":10424,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10429,"byte_end":10432,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10437,"byte_end":10444,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10449,"byte_end":10475,"line_start":307,"line_end":307,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10480,"byte_end":10483,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let wrap15 = Wrapper::new(15);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10488,"byte_end":10522,"line_start":309,"line_end":309,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(wrap15.wrap(\"Concurrency without data races.\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10527,"byte_end":10589,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/            vec![\"Concurrency\",","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10594,"byte_end":10628,"line_start":311,"line_end":311,"column_start":5,"column_end":39}},{"value":"/                 \"without data\",","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10633,"byte_end":10668,"line_start":312,"line_end":312,"column_start":5,"column_end":40}},{"value":"/                 \"races.\"]);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10673,"byte_end":10704,"line_start":313,"line_end":313,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10709,"byte_end":10712,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let wrap20 = Wrapper::new(20);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10717,"byte_end":10751,"line_start":315,"line_end":315,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(wrap20.wrap(\"Concurrency without data races.\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10756,"byte_end":10818,"line_start":316,"line_end":316,"column_start":5,"column_end":67}},{"value":"/            vec![\"Concurrency without\",","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10823,"byte_end":10865,"line_start":317,"line_end":317,"column_start":5,"column_end":47}},{"value":"/                 \"data races.\"]);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10870,"byte_end":10906,"line_start":318,"line_end":318,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10911,"byte_end":10918,"line_start":319,"line_end":319,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10923,"byte_end":10926,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Notice that newlines in the input are preserved. This means","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10931,"byte_end":10994,"line_start":321,"line_end":321,"column_start":5,"column_end":68}},{"value":"/ that they force a line break, regardless of how long the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":10999,"byte_end":11059,"line_start":322,"line_end":322,"column_start":5,"column_end":65}},{"value":"/ current line is:","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11064,"byte_end":11084,"line_start":323,"line_end":323,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11089,"byte_end":11092,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11097,"byte_end":11104,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11109,"byte_end":11135,"line_start":326,"line_end":326,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11140,"byte_end":11143,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(40);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11148,"byte_end":11183,"line_start":328,"line_end":328,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(wrapper.wrap(\"First line.\\nSecond line.\"),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11188,"byte_end":11245,"line_start":329,"line_end":329,"column_start":5,"column_end":62}},{"value":"/            vec![\"First line.\", \"Second line.\"]);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11250,"byte_end":11302,"line_start":330,"line_end":330,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11307,"byte_end":11314,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11319,"byte_end":11322,"line_start":332,"line_end":332,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13178,"byte_end":13187,"line_start":377,"line_end":377,"column_start":12,"column_end":21},"name":"wrap_iter","qualname":"<Wrapper>::wrap_iter","value":"pub fn wrap_iter<'w>(&'w Self, &'a str) -> WrapIter","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters.","sig":null,"attributes":[{"value":"/ Lazily wrap a line of text at `self.width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11438,"byte_end":11496,"line_start":337,"line_end":337,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11501,"byte_end":11504,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ The [`WordSplitter`] stored in [`self.splitter`] is used","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11509,"byte_end":11569,"line_start":339,"line_end":339,"column_start":5,"column_end":65}},{"value":"/ whenever when a word is too large to fit on the current line.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11574,"byte_end":11639,"line_start":340,"line_end":340,"column_start":5,"column_end":70}},{"value":"/ By changing the field, different hyphenation strategies can be","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11644,"byte_end":11710,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/ implemented.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11715,"byte_end":11731,"line_start":342,"line_end":342,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11736,"byte_end":11739,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11744,"byte_end":11762,"line_start":344,"line_end":344,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11767,"byte_end":11770,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This method returns a [`WrapIter`] iterator which borrows this","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11775,"byte_end":11841,"line_start":346,"line_end":346,"column_start":5,"column_end":71}},{"value":"/ `Wrapper`. The algorithm used has a linear complexity, so","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11846,"byte_end":11907,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/ getting the next line from the iterator will take O(*w*) time,","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11912,"byte_end":11978,"line_start":348,"line_end":348,"column_start":5,"column_end":71}},{"value":"/ where *w* is the wrapping width. Fully processing the iterator","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":11983,"byte_end":12049,"line_start":349,"line_end":349,"column_start":5,"column_end":71}},{"value":"/ will take O(*n*) time for an input string of length *n*.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12054,"byte_end":12114,"line_start":350,"line_end":350,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12119,"byte_end":12122,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ When no indentation is used, each line returned is a slice of","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12127,"byte_end":12192,"line_start":352,"line_end":352,"column_start":5,"column_end":70}},{"value":"/ the input string and the memory overhead is thus constant.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12197,"byte_end":12259,"line_start":353,"line_end":353,"column_start":5,"column_end":67}},{"value":"/ Otherwise new memory is allocated for each line returned.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12264,"byte_end":12325,"line_start":354,"line_end":354,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12330,"byte_end":12333,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12338,"byte_end":12352,"line_start":356,"line_end":356,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12357,"byte_end":12360,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12365,"byte_end":12372,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow::Borrowed;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12377,"byte_end":12412,"line_start":359,"line_end":359,"column_start":5,"column_end":40}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12417,"byte_end":12443,"line_start":360,"line_end":360,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12448,"byte_end":12451,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ let wrap20 = Wrapper::new(20);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12456,"byte_end":12490,"line_start":362,"line_end":362,"column_start":5,"column_end":39}},{"value":"/ let mut wrap20_iter = wrap20.wrap_iter(\"Zero-cost abstractions.\");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12495,"byte_end":12565,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Borrowed(\"Zero-cost\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12570,"byte_end":12634,"line_start":364,"line_end":364,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Borrowed(\"abstractions.\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12639,"byte_end":12707,"line_start":365,"line_end":365,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(wrap20_iter.next(), None);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12712,"byte_end":12753,"line_start":366,"line_end":366,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12758,"byte_end":12761,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let wrap25 = Wrapper::new(25);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12766,"byte_end":12800,"line_start":368,"line_end":368,"column_start":5,"column_end":39}},{"value":"/ let mut wrap25_iter = wrap25.wrap_iter(\"Zero-cost abstractions.\");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12805,"byte_end":12875,"line_start":369,"line_end":369,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(wrap25_iter.next(), Some(Borrowed(\"Zero-cost abstractions.\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12880,"byte_end":12958,"line_start":370,"line_end":370,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(wrap25_iter.next(), None);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":12963,"byte_end":13004,"line_start":371,"line_end":371,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13009,"byte_end":13016,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13021,"byte_end":13024,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ [`self.splitter`]: #structfield.splitter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13029,"byte_end":13073,"line_start":374,"line_end":374,"column_start":5,"column_end":49}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13078,"byte_end":13123,"line_start":375,"line_end":375,"column_start":5,"column_end":50}},{"value":"/ [`WrapIter`]: struct.WrapIter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13128,"byte_end":13166,"line_start":376,"line_end":376,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14578,"byte_end":14592,"line_start":415,"line_end":415,"column_start":12,"column_end":26},"name":"into_wrap_iter","qualname":"<Wrapper>::into_wrap_iter","value":"pub fn into_wrap_iter(Self, &'a str) -> IntoWrapIter","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters.","sig":null,"attributes":[{"value":"/ Lazily wrap a line of text at `self.width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13353,"byte_end":13411,"line_start":384,"line_end":384,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13416,"byte_end":13419,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ The [`WordSplitter`] stored in [`self.splitter`] is used","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13424,"byte_end":13484,"line_start":386,"line_end":386,"column_start":5,"column_end":65}},{"value":"/ whenever when a word is too large to fit on the current line.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13489,"byte_end":13554,"line_start":387,"line_end":387,"column_start":5,"column_end":70}},{"value":"/ By changing the field, different hyphenation strategies can be","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13559,"byte_end":13625,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ implemented.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13630,"byte_end":13646,"line_start":389,"line_end":389,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13651,"byte_end":13654,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13659,"byte_end":13677,"line_start":391,"line_end":391,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13682,"byte_end":13685,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This method consumes the `Wrapper` and returns a","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13690,"byte_end":13742,"line_start":393,"line_end":393,"column_start":5,"column_end":57}},{"value":"/ [`IntoWrapIter`] iterator. Fully processing the iterator has","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13747,"byte_end":13811,"line_start":394,"line_end":394,"column_start":5,"column_end":69}},{"value":"/ the same O(*n*) time complexity as [`wrap_iter`], where *n* is","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13816,"byte_end":13882,"line_start":395,"line_end":395,"column_start":5,"column_end":71}},{"value":"/ the length of the input string.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13887,"byte_end":13922,"line_start":396,"line_end":396,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13927,"byte_end":13930,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13935,"byte_end":13949,"line_start":398,"line_end":398,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13954,"byte_end":13957,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13962,"byte_end":13969,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow::Borrowed;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":13974,"byte_end":14009,"line_start":401,"line_end":401,"column_start":5,"column_end":40}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14014,"byte_end":14040,"line_start":402,"line_end":402,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14045,"byte_end":14048,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let wrap20 = Wrapper::new(20);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14053,"byte_end":14087,"line_start":404,"line_end":404,"column_start":5,"column_end":39}},{"value":"/ let mut wrap20_iter = wrap20.into_wrap_iter(\"Zero-cost abstractions.\");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14092,"byte_end":14167,"line_start":405,"line_end":405,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Borrowed(\"Zero-cost\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14172,"byte_end":14236,"line_start":406,"line_end":406,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Borrowed(\"abstractions.\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14241,"byte_end":14309,"line_start":407,"line_end":407,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(wrap20_iter.next(), None);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14314,"byte_end":14355,"line_start":408,"line_end":408,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14360,"byte_end":14367,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14372,"byte_end":14375,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ [`self.splitter`]: #structfield.splitter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14380,"byte_end":14424,"line_start":411,"line_end":411,"column_start":5,"column_end":49}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14429,"byte_end":14474,"line_start":412,"line_end":412,"column_start":5,"column_end":50}},{"value":"/ [`IntoWrapIter`]: struct.IntoWrapIter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14479,"byte_end":14525,"line_start":413,"line_end":413,"column_start":5,"column_end":51}},{"value":"/ [`wrap_iter`]: #method.wrap_iter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14530,"byte_end":14566,"line_start":414,"line_end":414,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15270,"byte_end":15282,"line_start":435,"line_end":435,"column_start":12,"column_end":24},"name":"IntoWrapIter","qualname":"::IntoWrapIter","value":"IntoWrapIter {  }","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"decl_id":null,"docs":" An iterator over the lines of the input string which owns a\n `Wrapper`. An instance of `IntoWrapIter` is typically obtained\n through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","sig":null,"attributes":[{"value":"/ An iterator over the lines of the input string which owns a","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14781,"byte_end":14844,"line_start":425,"line_end":425,"column_start":1,"column_end":64}},{"value":"/ `Wrapper`. An instance of `IntoWrapIter` is typically obtained","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14845,"byte_end":14911,"line_start":426,"line_end":426,"column_start":1,"column_end":67}},{"value":"/ through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14912,"byte_end":14976,"line_start":427,"line_end":427,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14977,"byte_end":14980,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ Each call of `.next()` method yields a line wrapped in `Some` if the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":14981,"byte_end":15053,"line_start":429,"line_end":429,"column_start":1,"column_end":73}},{"value":"/ input hasn't been fully processed yet. Otherwise it returns `None`.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15054,"byte_end":15125,"line_start":430,"line_end":430,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15126,"byte_end":15129,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15130,"byte_end":15166,"line_start":432,"line_end":432,"column_start":1,"column_end":37}},{"value":"/ [`Wrapper::into_wrap_iter`]: struct.Wrapper.html#method.into_wrap_iter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15167,"byte_end":15241,"line_start":433,"line_end":433,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15979,"byte_end":15987,"line_start":457,"line_end":457,"column_start":12,"column_end":20},"name":"WrapIter","qualname":"::WrapIter","value":"WrapIter {  }","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" An iterator over the lines of the input string which borrows a\n `Wrapper`. An instance of `WrapIter` is typically obtained\n through the [`Wrapper::wrap_iter`] method.","sig":null,"attributes":[{"value":"/ An iterator over the lines of the input string which borrows a","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15556,"byte_end":15622,"line_start":448,"line_end":448,"column_start":1,"column_end":67}},{"value":"/ `Wrapper`. An instance of `WrapIter` is typically obtained","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15623,"byte_end":15685,"line_start":449,"line_end":449,"column_start":1,"column_end":63}},{"value":"/ through the [`Wrapper::wrap_iter`] method.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15686,"byte_end":15732,"line_start":450,"line_end":450,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15733,"byte_end":15736,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ Each call of `.next()` method yields a line wrapped in `Some` if the","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15737,"byte_end":15809,"line_start":452,"line_end":452,"column_start":1,"column_end":73}},{"value":"/ input hasn't been fully processed yet. Otherwise it returns `None`.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15810,"byte_end":15881,"line_start":453,"line_end":453,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15882,"byte_end":15885,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ [`Wrapper::wrap_iter`]: struct.Wrapper.html#method.wrap_iter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15886,"byte_end":15950,"line_start":455,"line_end":455,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25496,"byte_end":25500,"line_start":703,"line_end":703,"column_start":8,"column_end":12},"name":"fill","qualname":"::fill","value":"pub fn fill(&str, usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `width` characters.","sig":null,"attributes":[{"value":"/ Fill a line of text at `width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24714,"byte_end":24760,"line_start":682,"line_end":682,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24761,"byte_end":24764,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ The result is a string with newlines between each line. Use","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24765,"byte_end":24828,"line_start":684,"line_end":684,"column_start":1,"column_end":64}},{"value":"/ [`wrap`] if you need access to the individual lines or","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24829,"byte_end":24887,"line_start":685,"line_end":685,"column_start":1,"column_end":59}},{"value":"/ [`wrap_iter`] for its iterator counterpart.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24888,"byte_end":24935,"line_start":686,"line_end":686,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24936,"byte_end":24939,"line_start":687,"line_end":687,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24940,"byte_end":24947,"line_start":688,"line_end":688,"column_start":1,"column_end":8}},{"value":"/ use textwrap::fill;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24948,"byte_end":24971,"line_start":689,"line_end":689,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24972,"byte_end":24975,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fill(\"Memory safety without garbage collection.\", 15),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":24976,"byte_end":25045,"line_start":691,"line_end":691,"column_start":1,"column_end":70}},{"value":"/            \"Memory safety\\nwithout garbage\\ncollection.\");","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25046,"byte_end":25108,"line_start":692,"line_end":692,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25109,"byte_end":25116,"line_start":693,"line_end":693,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25117,"byte_end":25120,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ This function creates a Wrapper on the fly with default settings.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25121,"byte_end":25190,"line_start":695,"line_end":695,"column_start":1,"column_end":70}},{"value":"/ If you need to set a language corpus for automatic hyphenation, or","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25191,"byte_end":25261,"line_start":696,"line_end":696,"column_start":1,"column_end":71}},{"value":"/ need to fill many strings, then it is suggested to create a Wrapper","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25262,"byte_end":25333,"line_start":697,"line_end":697,"column_start":1,"column_end":72}},{"value":"/ and call its [`fill` method].","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25334,"byte_end":25367,"line_start":698,"line_end":698,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25368,"byte_end":25371,"line_start":699,"line_end":699,"column_start":1,"column_end":4}},{"value":"/ [`wrap`]: fn.wrap.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25372,"byte_end":25398,"line_start":700,"line_end":700,"column_start":1,"column_end":27}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25399,"byte_end":25435,"line_start":701,"line_end":701,"column_start":1,"column_end":37}},{"value":"/ [`fill` method]: struct.Wrapper.html#method.fill","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25436,"byte_end":25488,"line_start":702,"line_end":702,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26442,"byte_end":26446,"line_start":734,"line_end":734,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"pub fn wrap(&str, usize) -> Vec<Cow<, str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `width` characters.","sig":null,"attributes":[{"value":"/ Wrap a line of text at `width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25571,"byte_end":25617,"line_start":707,"line_end":707,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25618,"byte_end":25621,"line_start":708,"line_end":708,"column_start":1,"column_end":4}},{"value":"/ This function creates a Wrapper on the fly with default settings.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25622,"byte_end":25691,"line_start":709,"line_end":709,"column_start":1,"column_end":70}},{"value":"/ If you need to set a language corpus for automatic hyphenation, or","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25692,"byte_end":25762,"line_start":710,"line_end":710,"column_start":1,"column_end":71}},{"value":"/ need to wrap many strings, then it is suggested to create a Wrapper","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25763,"byte_end":25834,"line_start":711,"line_end":711,"column_start":1,"column_end":72}},{"value":"/ and call its [`wrap` method].","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25835,"byte_end":25868,"line_start":712,"line_end":712,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25869,"byte_end":25872,"line_start":713,"line_end":713,"column_start":1,"column_end":4}},{"value":"/ The result is a vector of strings. Use [`wrap_iter`] if you need an","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25873,"byte_end":25944,"line_start":714,"line_end":714,"column_start":1,"column_end":72}},{"value":"/ iterator version.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25945,"byte_end":25966,"line_start":715,"line_end":715,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25967,"byte_end":25970,"line_start":716,"line_end":716,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25971,"byte_end":25985,"line_start":717,"line_end":717,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25986,"byte_end":25989,"line_start":718,"line_end":718,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25990,"byte_end":25997,"line_start":719,"line_end":719,"column_start":1,"column_end":8}},{"value":"/ use textwrap::wrap;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":25998,"byte_end":26021,"line_start":720,"line_end":720,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26022,"byte_end":26025,"line_start":721,"line_end":721,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(wrap(\"Concurrency without data races.\", 15),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26026,"byte_end":26085,"line_start":722,"line_end":722,"column_start":1,"column_end":60}},{"value":"/            vec![\"Concurrency\",","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26086,"byte_end":26120,"line_start":723,"line_end":723,"column_start":1,"column_end":35}},{"value":"/                 \"without data\",","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26121,"byte_end":26156,"line_start":724,"line_end":724,"column_start":1,"column_end":36}},{"value":"/                 \"races.\"]);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26157,"byte_end":26188,"line_start":725,"line_end":725,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26189,"byte_end":26192,"line_start":726,"line_end":726,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(wrap(\"Concurrency without data races.\", 20),","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26193,"byte_end":26252,"line_start":727,"line_end":727,"column_start":1,"column_end":60}},{"value":"/            vec![\"Concurrency without\",","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26253,"byte_end":26295,"line_start":728,"line_end":728,"column_start":1,"column_end":43}},{"value":"/                 \"data races.\"]);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26296,"byte_end":26332,"line_start":729,"line_end":729,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26333,"byte_end":26340,"line_start":730,"line_end":730,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26341,"byte_end":26344,"line_start":731,"line_end":731,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26345,"byte_end":26381,"line_start":732,"line_end":732,"column_start":1,"column_end":37}},{"value":"/ [`wrap` method]: struct.Wrapper.html#method.wrap","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26382,"byte_end":26434,"line_start":733,"line_end":733,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27799,"byte_end":27808,"line_start":769,"line_end":769,"column_start":8,"column_end":17},"name":"wrap_iter","qualname":"::wrap_iter","value":"pub fn wrap_iter(&str, usize) -> IntoWrapIter<, HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `width` characters.","sig":null,"attributes":[{"value":"/ Lazily wrap a line of text at `width` characters.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26528,"byte_end":26581,"line_start":738,"line_end":738,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26582,"byte_end":26585,"line_start":739,"line_end":739,"column_start":1,"column_end":4}},{"value":"/ This function creates a Wrapper on the fly with default settings.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26586,"byte_end":26655,"line_start":740,"line_end":740,"column_start":1,"column_end":70}},{"value":"/ It then calls the [`into_wrap_iter`] method. Hence, the return","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26656,"byte_end":26722,"line_start":741,"line_end":741,"column_start":1,"column_end":67}},{"value":"/ value is an [`IntoWrapIter`], not a [`WrapIter`] as the function","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26723,"byte_end":26791,"line_start":742,"line_end":742,"column_start":1,"column_end":69}},{"value":"/ name would otherwise suggest.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26792,"byte_end":26825,"line_start":743,"line_end":743,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26826,"byte_end":26829,"line_start":744,"line_end":744,"column_start":1,"column_end":4}},{"value":"/ If you need to set a language corpus for automatic hyphenation, or","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26830,"byte_end":26900,"line_start":745,"line_end":745,"column_start":1,"column_end":71}},{"value":"/ need to wrap many strings, then it is suggested to create a Wrapper","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26901,"byte_end":26972,"line_start":746,"line_end":746,"column_start":1,"column_end":72}},{"value":"/ and call its [`wrap_iter`] or [`into_wrap_iter`] methods.","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":26973,"byte_end":27034,"line_start":747,"line_end":747,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27035,"byte_end":27038,"line_start":748,"line_end":748,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27039,"byte_end":27053,"line_start":749,"line_end":749,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27054,"byte_end":27057,"line_start":750,"line_end":750,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27058,"byte_end":27065,"line_start":751,"line_end":751,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow::Borrowed;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27066,"byte_end":27101,"line_start":752,"line_end":752,"column_start":1,"column_end":36}},{"value":"/ use textwrap::wrap_iter;","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27102,"byte_end":27130,"line_start":753,"line_end":753,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27131,"byte_end":27134,"line_start":754,"line_end":754,"column_start":1,"column_end":4}},{"value":"/ let mut wrap20_iter = wrap_iter(\"Zero-cost abstractions.\", 20);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27135,"byte_end":27202,"line_start":755,"line_end":755,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Borrowed(\"Zero-cost\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27203,"byte_end":27267,"line_start":756,"line_end":756,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Borrowed(\"abstractions.\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27268,"byte_end":27336,"line_start":757,"line_end":757,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(wrap20_iter.next(), None);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27337,"byte_end":27378,"line_start":758,"line_end":758,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27379,"byte_end":27382,"line_start":759,"line_end":759,"column_start":1,"column_end":4}},{"value":"/ let mut wrap25_iter = wrap_iter(\"Zero-cost abstractions.\", 25);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27383,"byte_end":27450,"line_start":760,"line_end":760,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(wrap25_iter.next(), Some(Borrowed(\"Zero-cost abstractions.\")));","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27451,"byte_end":27529,"line_start":761,"line_end":761,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(wrap25_iter.next(), None);","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27530,"byte_end":27571,"line_start":762,"line_end":762,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27572,"byte_end":27579,"line_start":763,"line_end":763,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27580,"byte_end":27583,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: struct.Wrapper.html#method.wrap_iter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27584,"byte_end":27639,"line_start":765,"line_end":765,"column_start":1,"column_end":56}},{"value":"/ [`into_wrap_iter`]: struct.Wrapper.html#method.into_wrap_iter","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27640,"byte_end":27705,"line_start":766,"line_end":766,"column_start":1,"column_end":66}},{"value":"/ [`IntoWrapIter`]: struct.IntoWrapIter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27706,"byte_end":27752,"line_start":767,"line_end":767,"column_start":1,"column_end":47}},{"value":"/ [`WrapIter`]: struct.WrapIter.html","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":27753,"byte_end":27791,"line_start":768,"line_end":768,"column_start":1,"column_end":39}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47475,"byte_end":47488,"line_start":60,"line_end":60,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":48186,"byte_end":48200,"line_start":81,"line_end":81,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5327,"byte_end":5334,"line_start":150,"line_end":150,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6660,"byte_end":6667,"line_start":185,"line_end":185,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15406,"byte_end":15418,"line_start":440,"line_end":440,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":16131,"byte_end":16139,"line_start":462,"line_end":462,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":17220,"byte_end":17232,"line_start":499,"line_end":499,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":47475,"byte_end":47488,"line_start":60,"line_end":60,"column_start":23,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":74},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\splitting.rs","byte_start":48186,"byte_end":48200,"line_start":81,"line_end":81,"column_start":23,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":80},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":5327,"byte_end":5334,"line_start":150,"line_end":150,"column_start":10,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":6660,"byte_end":6667,"line_start":185,"line_end":185,"column_start":27,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":15406,"byte_end":15418,"line_start":440,"line_end":440,"column_start":40,"column_end":52},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":102},"to":{"krate":2,"index":5047}},{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":16131,"byte_end":16139,"line_start":462,"line_end":462,"column_start":48,"column_end":56},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":111},"to":{"krate":2,"index":5047}},{"span":{"file_name":"C:\\Users\\sigur\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.12.1\\src\\lib.rs","byte_start":17220,"byte_end":17232,"line_start":499,"line_end":499,"column_start":10,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":122},"to":{"krate":4294967295,"index":4294967295}}]}